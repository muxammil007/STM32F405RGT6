
ADXL357.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08006578  08006578  00016578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069ac  080069ac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080069ac  080069ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b4  080069b4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080069bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000210  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003e4  200003e4  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000096b9  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017df  00000000  00000000  00029900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008e8  00000000  00000000  0002b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006d1  00000000  00000000  0002b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f47d  00000000  00000000  0002c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a8e2  00000000  00000000  0004b516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bb057  00000000  00000000  00055df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000034c0  00000000  00000000  00110e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00114310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006560 	.word	0x08006560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006560 	.word	0x08006560

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <_write>:
void readADXL357Data(void);

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <_write+0x28>)
 8000f5c:	f002 fa73 	bl	8003446 <HAL_UART_Transmit>
	return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000248 	.word	0x20000248

08000f70 <writeRegister>:
/* USER CODE END 0 */

uint8_t count = 0;

/* USER CODE BEGIN 1 */
void writeRegister(uint8_t reg, uint8_t value) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
    uint8_t dataToSend = (reg << 1) | WRITE_BYTE;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(ADXL357_CS_PORT, ADXL357_CS_PIN, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <writeRegister+0x58>)
 8000f90:	f000 ffd8 	bl	8001f44 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &dataToSend, 1, HAL_MAX_DELAY);
 8000f94:	f107 010f 	add.w	r1, r7, #15
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <writeRegister+0x5c>)
 8000fa0:	f001 fce5 	bl	800296e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, &value, 1, HAL_MAX_DELAY);
 8000fa4:	1db9      	adds	r1, r7, #6
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	2201      	movs	r2, #1
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <writeRegister+0x5c>)
 8000fae:	f001 fcde 	bl	800296e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(ADXL357_CS_PORT, ADXL357_CS_PIN, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <writeRegister+0x58>)
 8000fba:	f000 ffc3 	bl	8001f44 <HAL_GPIO_WritePin>
  }
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	200001f0 	.word	0x200001f0

08000fd0 <readRegister>:

  uint8_t readRegister(uint8_t reg) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
    uint8_t dataToSend = (reg << 1) | READ_BYTE;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(ADXL357_CS_PORT, ADXL357_CS_PIN, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff4:	480e      	ldr	r0, [pc, #56]	; (8001030 <readRegister+0x60>)
 8000ff6:	f000 ffa5 	bl	8001f44 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &dataToSend, 1, HAL_MAX_DELAY);
 8000ffa:	f107 010e 	add.w	r1, r7, #14
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	2201      	movs	r2, #1
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <readRegister+0x64>)
 8001006:	f001 fcb2 	bl	800296e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &result, 1, HAL_MAX_DELAY);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	2201      	movs	r2, #1
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <readRegister+0x64>)
 8001016:	f001 fde6 	bl	8002be6 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(ADXL357_CS_PORT, ADXL357_CS_PIN, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <readRegister+0x60>)
 8001022:	f000 ff8f 	bl	8001f44 <HAL_GPIO_WritePin>

    return result;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
  }
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020400 	.word	0x40020400
 8001034:	200001f0 	.word	0x200001f0

08001038 <readMultipleData>:

  void readMultipleData(uint8_t* addresses, uint8_t dataSize, uint8_t* readData) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	460b      	mov	r3, r1
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_WritePin(ADXL357_CS_PORT, ADXL357_CS_PIN, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	4819      	ldr	r0, [pc, #100]	; (80010b4 <readMultipleData+0x7c>)
 800104e:	f000 ff79 	bl	8001f44 <HAL_GPIO_WritePin>
    for (int i = 0; i < dataSize; i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e01e      	b.n	8001096 <readMultipleData+0x5e>
      uint8_t dataToSend = (addresses[i] << 1) | READ_BYTE;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	b25b      	sxtb	r3, r3
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	b25b      	sxtb	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	74fb      	strb	r3, [r7, #19]
      HAL_SPI_Transmit(&hspi2, &dataToSend, 1, HAL_MAX_DELAY);
 800106e:	f107 0113 	add.w	r1, r7, #19
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2201      	movs	r2, #1
 8001078:	480f      	ldr	r0, [pc, #60]	; (80010b8 <readMultipleData+0x80>)
 800107a:	f001 fc78 	bl	800296e <HAL_SPI_Transmit>
      HAL_SPI_Receive(&hspi2, &readData[i], 1, HAL_MAX_DELAY);
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	18d1      	adds	r1, r2, r3
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	2201      	movs	r2, #1
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <readMultipleData+0x80>)
 800108c:	f001 fdab 	bl	8002be6 <HAL_SPI_Receive>
    for (int i = 0; i < dataSize; i++) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	7afb      	ldrb	r3, [r7, #11]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbdc      	blt.n	8001058 <readMultipleData+0x20>
    }
    HAL_GPIO_WritePin(ADXL357_CS_PORT, ADXL357_CS_PIN, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <readMultipleData+0x7c>)
 80010a6:	f000 ff4d 	bl	8001f44 <HAL_GPIO_WritePin>
  }
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020400 	.word	0x40020400
 80010b8:	200001f0 	.word	0x200001f0

080010bc <initADXL357>:

  void initADXL357(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL357_CS_PORT, ADXL357_CS_PIN, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c8:	4821      	ldr	r0, [pc, #132]	; (8001150 <initADXL357+0x94>)
 80010ca:	f000 ff3b 	bl	8001f44 <HAL_GPIO_WritePin>
    HAL_Delay(1000);  // Wait for ADXL357 to settle
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f000 fc91 	bl	80019f8 <HAL_Delay>

    uint8_t devid_ad = readRegister(DEVID_AD); // Device ID
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff ff7a 	bl	8000fd0 <readRegister>
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
    uint8_t devid_mst = readRegister(DEVID_MST); // MEMS ID
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff ff75 	bl	8000fd0 <readRegister>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71bb      	strb	r3, [r7, #6]
    uint8_t part_id = readRegister(PARTID);   // PART ID
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff ff70 	bl	8000fd0 <readRegister>
 80010f0:	4603      	mov	r3, r0
 80010f2:	717b      	strb	r3, [r7, #5]

    printf("Device ID AD: 0x%X ", devid_ad);
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4619      	mov	r1, r3
 80010f8:	4816      	ldr	r0, [pc, #88]	; (8001154 <initADXL357+0x98>)
 80010fa:	f003 fa2f 	bl	800455c <iprintf>
    printf("Device ID MST: 0x%X ", devid_mst);
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	4619      	mov	r1, r3
 8001102:	4815      	ldr	r0, [pc, #84]	; (8001158 <initADXL357+0x9c>)
 8001104:	f003 fa2a 	bl	800455c <iprintf>
    printf("Part ID: 0x%X ", part_id);
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	4619      	mov	r1, r3
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <initADXL357+0xa0>)
 800110e:	f003 fa25 	bl	800455c <iprintf>

    if (devid_ad != 0xAD || devid_mst != 0x1D || part_id != 0xED) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2bad      	cmp	r3, #173	; 0xad
 8001116:	d105      	bne.n	8001124 <initADXL357+0x68>
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	2b1d      	cmp	r3, #29
 800111c:	d102      	bne.n	8001124 <initADXL357+0x68>
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	2bed      	cmp	r3, #237	; 0xed
 8001122:	d003      	beq.n	800112c <initADXL357+0x70>
      printf("Error: Device ID mismatch\n");
 8001124:	480e      	ldr	r0, [pc, #56]	; (8001160 <initADXL357+0xa4>)
 8001126:	f003 fa7f 	bl	8004628 <puts>
      while (1);
 800112a:	e7fe      	b.n	800112a <initADXL357+0x6e>
    } else {
      printf("Device ID matched successfully.\n");
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <initADXL357+0xa8>)
 800112e:	f003 fa7b 	bl	8004628 <puts>
    }

    writeRegister(RANGE, RANGE_10G); // Set range to ±10g
 8001132:	2101      	movs	r1, #1
 8001134:	202c      	movs	r0, #44	; 0x2c
 8001136:	f7ff ff1b 	bl	8000f70 <writeRegister>
    writeRegister(POWER_CTL, MEASURE_MODE); // Enable measure mode
 800113a:	2106      	movs	r1, #6
 800113c:	202d      	movs	r0, #45	; 0x2d
 800113e:	f7ff ff17 	bl	8000f70 <writeRegister>

    // Give the sensor time to set up
    HAL_Delay(100);
 8001142:	2064      	movs	r0, #100	; 0x64
 8001144:	f000 fc58 	bl	80019f8 <HAL_Delay>
  }
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020400 	.word	0x40020400
 8001154:	08006578 	.word	0x08006578
 8001158:	0800658c 	.word	0x0800658c
 800115c:	080065a4 	.word	0x080065a4
 8001160:	080065b4 	.word	0x080065b4
 8001164:	080065d0 	.word	0x080065d0

08001168 <readADXL357Data>:

  void readADXL357Data(void) {
 8001168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800116c:	b090      	sub	sp, #64	; 0x40
 800116e:	af04      	add	r7, sp, #16
    uint8_t addresses[] = {XDATA3, XDATA2, XDATA1, YDATA3, YDATA2, YDATA1, ZDATA3, ZDATA2, ZDATA1};
 8001170:	4a4a      	ldr	r2, [pc, #296]	; (800129c <readADXL357Data+0x134>)
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	ca07      	ldmia	r2, {r0, r1, r2}
 8001178:	c303      	stmia	r3!, {r0, r1}
 800117a:	701a      	strb	r2, [r3, #0]
    uint8_t data[9];
    int32_t xData, yData, zData;

    readMultipleData(addresses, 9, data);
 800117c:	463a      	mov	r2, r7
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2109      	movs	r1, #9
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff57 	bl	8001038 <readMultipleData>

    // Combine data to form 20-bit values
    xData = ((data[0] << 16) | (data[1] << 8) | data[2]) >> 4;
 800118a:	783b      	ldrb	r3, [r7, #0]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	787b      	ldrb	r3, [r7, #1]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	4313      	orrs	r3, r2
 8001194:	78ba      	ldrb	r2, [r7, #2]
 8001196:	4313      	orrs	r3, r2
 8001198:	111b      	asrs	r3, r3, #4
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
    yData = ((data[3] << 16) | (data[4] << 8) | data[5]) >> 4;
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	041a      	lsls	r2, r3, #16
 80011a0:	793b      	ldrb	r3, [r7, #4]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	4313      	orrs	r3, r2
 80011a6:	797a      	ldrb	r2, [r7, #5]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	111b      	asrs	r3, r3, #4
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
    zData = ((data[6] << 16) | (data[7] << 8) | data[8]) >> 4;
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	4313      	orrs	r3, r2
 80011b8:	7a3a      	ldrb	r2, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	111b      	asrs	r3, r3, #4
 80011be:	627b      	str	r3, [r7, #36]	; 0x24

    // Apply two's complement for 20-bit signed integers
    if (xData & (1 << 19)) xData |= 0xFFF00000;
 80011c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <readADXL357Data+0x6e>
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80011d0:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (yData & (1 << 19)) yData |= 0xFFF00000;
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <readADXL357Data+0x84>
 80011e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80011e6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
    if (zData & (1 << 19)) zData |= 0xFFF00000;
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <readADXL357Data+0x9a>
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80011fc:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001200:	627b      	str	r3, [r7, #36]	; 0x24

    // Convert raw data to g-units
    float xAccel = xData / SENSITIVITY_10G;
 8001202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <readADXL357Data+0x138>)
 800120e:	f7ff fb1d 	bl	800084c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff fcc5 	bl	8000ba8 <__aeabi_d2f>
 800121e:	4603      	mov	r3, r0
 8001220:	623b      	str	r3, [r7, #32]
    float yAccel = yData / SENSITIVITY_10G;
 8001222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001224:	f7ff f97e 	bl	8000524 <__aeabi_i2d>
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <readADXL357Data+0x138>)
 800122e:	f7ff fb0d 	bl	800084c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fcb5 	bl	8000ba8 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	61fb      	str	r3, [r7, #28]
    float zAccel = zData / SENSITIVITY_10G;
 8001242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001244:	f7ff f96e 	bl	8000524 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <readADXL357Data+0x138>)
 800124e:	f7ff fafd 	bl	800084c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fca5 	bl	8000ba8 <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]

    printf("X: %.2f g, Y: %.2f g, Z: %.2f g\n", xAccel, yAccel, zAccel);
 8001262:	6a38      	ldr	r0, [r7, #32]
 8001264:	f7ff f970 	bl	8000548 <__aeabi_f2d>
 8001268:	4680      	mov	r8, r0
 800126a:	4689      	mov	r9, r1
 800126c:	69f8      	ldr	r0, [r7, #28]
 800126e:	f7ff f96b 	bl	8000548 <__aeabi_f2d>
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	69b8      	ldr	r0, [r7, #24]
 8001278:	f7ff f966 	bl	8000548 <__aeabi_f2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001284:	e9cd 4500 	strd	r4, r5, [sp]
 8001288:	4642      	mov	r2, r8
 800128a:	464b      	mov	r3, r9
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <readADXL357Data+0x13c>)
 800128e:	f003 f965 	bl	800455c <iprintf>
  }
 8001292:	bf00      	nop
 8001294:	3730      	adds	r7, #48	; 0x30
 8001296:	46bd      	mov	sp, r7
 8001298:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800129c:	08006614 	.word	0x08006614
 80012a0:	40e90000 	.word	0x40e90000
 80012a4:	080065f0 	.word	0x080065f0

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f000 fb32 	bl	8001914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 f822 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f000 f8ea 	bl	800148c <MX_GPIO_Init>
  MX_SPI2_Init();
 80012b8:	f000 f888 	bl	80013cc <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80012bc:	f000 f8bc 	bl	8001438 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize ADXL357
  initADXL357();
 80012c0:	f7ff fefc 	bl	80010bc <initADXL357>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    readADXL357Data();
 80012c4:	f7ff ff50 	bl	8001168 <readADXL357Data>
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80012c8:	2102      	movs	r1, #2
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <main+0x44>)
 80012cc:	f000 fe53 	bl	8001f76 <HAL_GPIO_TogglePin>
	    printf("\r\n");
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <main+0x48>)
 80012d2:	f003 f9a9 	bl	8004628 <puts>
	    count++;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <main+0x4c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <main+0x4c>)
 80012e0:	701a      	strb	r2, [r3, #0]
	    HAL_Delay(100);
 80012e2:	2064      	movs	r0, #100	; 0x64
 80012e4:	f000 fb88 	bl	80019f8 <HAL_Delay>
	    readADXL357Data();
 80012e8:	e7ec      	b.n	80012c4 <main+0x1c>
 80012ea:	bf00      	nop
 80012ec:	40020800 	.word	0x40020800
 80012f0:	08006620 	.word	0x08006620
 80012f4:	2000028c 	.word	0x2000028c

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b094      	sub	sp, #80	; 0x50
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2230      	movs	r2, #48	; 0x30
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f003 fa6e 	bl	80047e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <SystemClock_Config+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <SystemClock_Config+0xcc>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <SystemClock_Config+0xcc>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <SystemClock_Config+0xd0>)
 8001342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <SystemClock_Config+0xd0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001368:	2306      	movs	r3, #6
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800136c:	23a8      	movs	r3, #168	; 0xa8
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001374:	2304      	movs	r3, #4
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fe15 	bl	8001fac <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001388:	f000 f8f6 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001398:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2105      	movs	r1, #5
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 f876 	bl	800249c <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013b6:	f000 f8df 	bl	8001578 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	; 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_SPI2_Init+0x64>)
 80013d2:	4a18      	ldr	r2, [pc, #96]	; (8001434 <MX_SPI2_Init+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_SPI2_Init+0x64>)
 80013d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_SPI2_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_SPI2_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_SPI2_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_SPI2_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_SPI2_Init+0x64>)
 80013f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_SPI2_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_SPI2_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_SPI2_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_SPI2_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_SPI2_Init+0x64>)
 8001418:	220a      	movs	r2, #10
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_SPI2_Init+0x64>)
 800141e:	f001 fa1d 	bl	800285c <HAL_SPI_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001428:	f000 f8a6 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200001f0 	.word	0x200001f0
 8001434:	40003800 	.word	0x40003800

08001438 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_USART6_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART6_UART_Init+0x4c>)
 8001470:	f001 ff9c 	bl	80033ac <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800147a:	f000 f87d 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000248 	.word	0x20000248
 8001488:	40011400 	.word	0x40011400

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <MX_GPIO_Init+0xe0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <MX_GPIO_Init+0xe0>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <MX_GPIO_Init+0xe0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <MX_GPIO_Init+0xe0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a29      	ldr	r2, [pc, #164]	; (800156c <MX_GPIO_Init+0xe0>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <MX_GPIO_Init+0xe0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <MX_GPIO_Init+0xe0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <MX_GPIO_Init+0xe0>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <MX_GPIO_Init+0xe0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_GPIO_Init+0xe0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a1b      	ldr	r2, [pc, #108]	; (800156c <MX_GPIO_Init+0xe0>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_GPIO_Init+0xe0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2102      	movs	r1, #2
 8001516:	4816      	ldr	r0, [pc, #88]	; (8001570 <MX_GPIO_Init+0xe4>)
 8001518:	f000 fd14 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <MX_GPIO_Init+0xe8>)
 8001524:	f000 fd0e 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001528:	2302      	movs	r3, #2
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	480c      	ldr	r0, [pc, #48]	; (8001570 <MX_GPIO_Init+0xe4>)
 8001540:	f000 fb64 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_GPIO_Init+0xe8>)
 800155e:	f000 fb55 	bl	8001c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40020800 	.word	0x40020800
 8001574:	40020400 	.word	0x40020400

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_SPI_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12c      	bne.n	8001650 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_SPI_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_SPI_MspInit+0x88>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_SPI_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_SPI_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_SPI_MspInit+0x88>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_SPI_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800162e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001640:	2305      	movs	r3, #5
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_SPI_MspInit+0x8c>)
 800164c:	f000 fade 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40003800 	.word	0x40003800
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_UART_MspInit+0x84>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12b      	bne.n	80016de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_UART_MspInit+0x88>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_UART_MspInit+0x88>)
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_UART_MspInit+0x88>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_UART_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_UART_MspInit+0x88>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_UART_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016ce:	2308      	movs	r3, #8
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <HAL_UART_MspInit+0x8c>)
 80016da:	f000 fa97 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40011400 	.word	0x40011400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020800 	.word	0x40020800

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001740:	f000 f93a 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_kill>:

int _kill(int pid, int sig)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001762:	f003 f893 	bl	800488c <__errno>
 8001766:	4603      	mov	r3, r0
 8001768:	2216      	movs	r2, #22
 800176a:	601a      	str	r2, [r3, #0]
  return -1;
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_exit>:

void _exit (int status)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ffe7 	bl	8001758 <_kill>
  while (1) {}    /* Make sure we hang here */
 800178a:	e7fe      	b.n	800178a <_exit+0x12>

0800178c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e00a      	b.n	80017b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800179e:	f3af 8000 	nop.w
 80017a2:	4601      	mov	r1, r0
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60ba      	str	r2, [r7, #8]
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbf0      	blt.n	800179e <_read+0x12>
  }

  return len;
 80017bc:	687b      	ldr	r3, [r7, #4]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ee:	605a      	str	r2, [r3, #4]
  return 0;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_isatty>:

int _isatty(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001838:	4a14      	ldr	r2, [pc, #80]	; (800188c <_sbrk+0x5c>)
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <_sbrk+0x60>)
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <_sbrk+0x64>)
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <_sbrk+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d207      	bcs.n	8001870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001860:	f003 f814 	bl	800488c <__errno>
 8001864:	4603      	mov	r3, r0
 8001866:	220c      	movs	r2, #12
 8001868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e009      	b.n	8001884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <_sbrk+0x64>)
 8001880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20020000 	.word	0x20020000
 8001890:	00000400 	.word	0x00000400
 8001894:	20000290 	.word	0x20000290
 8001898:	200003e8 	.word	0x200003e8

0800189c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <SystemInit+0x20>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <SystemInit+0x20>)
 80018a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018c6:	490e      	ldr	r1, [pc, #56]	; (8001900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c8:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018dc:	4c0b      	ldr	r4, [pc, #44]	; (800190c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ea:	f7ff ffd7 	bl	800189c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ee:	f002 ffd3 	bl	8004898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f2:	f7ff fcd9 	bl	80012a8 <main>
  bx  lr    
 80018f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001904:	080069bc 	.word	0x080069bc
  ldr r2, =_sbss
 8001908:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800190c:	200003e4 	.word	0x200003e4

08001910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC_IRQHandler>
	...

08001914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_Init+0x40>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_Init+0x40>)
 800192a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_Init+0x40>)
 8001936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 f931 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001942:	200f      	movs	r0, #15
 8001944:	f000 f808 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fe1c 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x54>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x58>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f93b 	bl	8001bf2 <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00e      	b.n	80019a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d80a      	bhi.n	80019a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 f911 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <HAL_InitTick+0x5c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000294 	.word	0x20000294

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000294 	.word	0x20000294

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff47 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff5c 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb0 	bl	8001b60 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e16b      	b.n	8001f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 815a 	bne.w	8001efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d005      	beq.n	8001c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d017      	beq.n	8001cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80b4 	beq.w	8001efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a5f      	ldr	r2, [pc, #380]	; (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <HAL_GPIO_Init+0x30c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dae:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_GPIO_Init+0x314>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <HAL_GPIO_Init+0x318>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x222>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a50      	ldr	r2, [pc, #320]	; (8001f28 <HAL_GPIO_Init+0x31c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x21e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <HAL_GPIO_Init+0x320>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x216>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_GPIO_Init+0x328>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x212>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	; (8001f38 <HAL_GPIO_Init+0x32c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x20e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	; (8001f3c <HAL_GPIO_Init+0x330>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x20a>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e00e      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e00c      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00a      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e32:	2300      	movs	r3, #0
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e44:	4935      	ldr	r1, [pc, #212]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e76:	4a32      	ldr	r2, [pc, #200]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	f67f ae90 	bls.w	8001c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40021400 	.word	0x40021400
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	40021c00 	.word	0x40021c00
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f60:	e003      	b.n	8001f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	041a      	lsls	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f88:	887a      	ldrh	r2, [r7, #2]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	041a      	lsls	r2, r3, #16
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	400b      	ands	r3, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e267      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d075      	beq.n	80020b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fca:	4b88      	ldr	r3, [pc, #544]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	4b85      	ldr	r3, [pc, #532]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d112      	bne.n	8002008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b82      	ldr	r3, [pc, #520]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fee:	d10b      	bne.n	8002008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	4b7e      	ldr	r3, [pc, #504]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d05b      	beq.n	80020b4 <HAL_RCC_OscConfig+0x108>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d157      	bne.n	80020b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e242      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d106      	bne.n	8002020 <HAL_RCC_OscConfig+0x74>
 8002012:	4b76      	ldr	r3, [pc, #472]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a75      	ldr	r2, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0xb0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x98>
 800202a:	4b70      	ldr	r3, [pc, #448]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6f      	ldr	r2, [pc, #444]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b6d      	ldr	r3, [pc, #436]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6c      	ldr	r2, [pc, #432]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xb0>
 8002044:	4b69      	ldr	r3, [pc, #420]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a68      	ldr	r2, [pc, #416]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b66      	ldr	r3, [pc, #408]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a65      	ldr	r2, [pc, #404]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fcbc 	bl	80019e0 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fcb8 	bl	80019e0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e207      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b5b      	ldr	r3, [pc, #364]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0xc0>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fca8 	bl	80019e0 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fca4 	bl	80019e0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e1f3      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0xe8>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d063      	beq.n	800218a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c2:	4b4a      	ldr	r3, [pc, #296]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d11c      	bne.n	8002114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b44      	ldr	r3, [pc, #272]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x152>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e1c7      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4937      	ldr	r1, [pc, #220]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	e03a      	b.n	800218a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211c:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_OscConfig+0x244>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff fc5d 	bl	80019e0 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff fc59 	bl	80019e0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1a8      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4925      	ldr	r1, [pc, #148]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]
 800215c:	e015      	b.n	800218a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_OscConfig+0x244>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff fc3c 	bl	80019e0 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216c:	f7ff fc38 	bl	80019e0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e187      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d036      	beq.n	8002204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d016      	beq.n	80021cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_RCC_OscConfig+0x248>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7ff fc1c 	bl	80019e0 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ac:	f7ff fc18 	bl	80019e0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e167      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_OscConfig+0x240>)
 80021c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x200>
 80021ca:	e01b      	b.n	8002204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_OscConfig+0x248>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7ff fc05 	bl	80019e0 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	e00e      	b.n	80021f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021da:	f7ff fc01 	bl	80019e0 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d907      	bls.n	80021f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e150      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
 80021ec:	40023800 	.word	0x40023800
 80021f0:	42470000 	.word	0x42470000
 80021f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80021fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ea      	bne.n	80021da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8097 	beq.w	8002340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002216:	4b81      	ldr	r3, [pc, #516]	; (800241c <HAL_RCC_OscConfig+0x470>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b7d      	ldr	r3, [pc, #500]	; (800241c <HAL_RCC_OscConfig+0x470>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a7c      	ldr	r2, [pc, #496]	; (800241c <HAL_RCC_OscConfig+0x470>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b7a      	ldr	r3, [pc, #488]	; (800241c <HAL_RCC_OscConfig+0x470>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b77      	ldr	r3, [pc, #476]	; (8002420 <HAL_RCC_OscConfig+0x474>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d118      	bne.n	8002280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b74      	ldr	r3, [pc, #464]	; (8002420 <HAL_RCC_OscConfig+0x474>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a73      	ldr	r2, [pc, #460]	; (8002420 <HAL_RCC_OscConfig+0x474>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7ff fbc1 	bl	80019e0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7ff fbbd 	bl	80019e0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e10c      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x474>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x2ea>
 8002288:	4b64      	ldr	r3, [pc, #400]	; (800241c <HAL_RCC_OscConfig+0x470>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a63      	ldr	r2, [pc, #396]	; (800241c <HAL_RCC_OscConfig+0x470>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	e01c      	b.n	80022d0 <HAL_RCC_OscConfig+0x324>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x30c>
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a5e      	ldr	r2, [pc, #376]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a5b      	ldr	r2, [pc, #364]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0x324>
 80022b8:	4b58      	ldr	r3, [pc, #352]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	4a57      	ldr	r2, [pc, #348]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6713      	str	r3, [r2, #112]	; 0x70
 80022c4:	4b55      	ldr	r3, [pc, #340]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a54      	ldr	r2, [pc, #336]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 0304 	bic.w	r3, r3, #4
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7ff fb82 	bl	80019e0 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7ff fb7e 	bl	80019e0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e0cb      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	4b49      	ldr	r3, [pc, #292]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ee      	beq.n	80022e0 <HAL_RCC_OscConfig+0x334>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7ff fb6c 	bl	80019e0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230a:	e00a      	b.n	8002322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7ff fb68 	bl	80019e0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0b5      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_RCC_OscConfig+0x470>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ee      	bne.n	800230c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002334:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_OscConfig+0x470>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	4a38      	ldr	r2, [pc, #224]	; (800241c <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a1 	beq.w	800248c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800234a:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCC_OscConfig+0x470>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d05c      	beq.n	8002410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d141      	bne.n	80023e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <HAL_RCC_OscConfig+0x478>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff fb3c 	bl	80019e0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff fb38 	bl	80019e0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e087      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_RCC_OscConfig+0x470>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	3b01      	subs	r3, #1
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	491b      	ldr	r1, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x478>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fb11 	bl	80019e0 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff fb0d 	bl	80019e0 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e05c      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_RCC_OscConfig+0x470>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x416>
 80023e0:	e054      	b.n	800248c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x478>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fafa 	bl	80019e0 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff faf6 	bl	80019e0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e045      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_OscConfig+0x470>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x444>
 800240e:	e03d      	b.n	800248c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e038      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000
 8002424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x4ec>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d028      	beq.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d121      	bne.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d11a      	bne.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800245e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002460:	4293      	cmp	r3, r2
 8002462:	d111      	bne.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	3b01      	subs	r3, #1
 8002472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d107      	bne.n	8002488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0cc      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d90c      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d044      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d119      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d003      	beq.n	800255a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	2b03      	cmp	r3, #3
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e067      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4934      	ldr	r1, [pc, #208]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7ff fa28 	bl	80019e0 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7ff fa24 	bl	80019e0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e04f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d20c      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	490a      	ldr	r1, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f988 	bl	8001958 <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00
 8002658:	40023800 	.word	0x40023800
 800265c:	08006624 	.word	0x08006624
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800266c:	b090      	sub	sp, #64	; 0x40
 800266e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
 8002674:	2300      	movs	r3, #0
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002678:	2300      	movs	r3, #0
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d00d      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x40>
 800268c:	2b08      	cmp	r3, #8
 800268e:	f200 80a1 	bhi.w	80027d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x34>
 8002696:	2b04      	cmp	r3, #4
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800269a:	e09b      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_GetSysClockFreq+0x184>)
 800269e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026a0:	e09b      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026a2:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026a6:	e098      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a8:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026b2:	4b4d      	ldr	r3, [pc, #308]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d028      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	2200      	movs	r2, #0
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	627a      	str	r2, [r7, #36]	; 0x24
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026d0:	2100      	movs	r1, #0
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026d4:	fb03 f201 	mul.w	r2, r3, r1
 80026d8:	2300      	movs	r3, #0
 80026da:	fb00 f303 	mul.w	r3, r0, r3
 80026de:	4413      	add	r3, r2
 80026e0:	4a43      	ldr	r2, [pc, #268]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026e2:	fba0 1202 	umull	r1, r2, r0, r2
 80026e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e8:	460a      	mov	r2, r1
 80026ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80026ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ee:	4413      	add	r3, r2
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	2200      	movs	r2, #0
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	61fa      	str	r2, [r7, #28]
 80026fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002702:	f7fe faa1 	bl	8000c48 <__aeabi_uldivmod>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4613      	mov	r3, r2
 800270c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800270e:	e053      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	2200      	movs	r2, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	617a      	str	r2, [r7, #20]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002722:	f04f 0b00 	mov.w	fp, #0
 8002726:	4652      	mov	r2, sl
 8002728:	465b      	mov	r3, fp
 800272a:	f04f 0000 	mov.w	r0, #0
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	0159      	lsls	r1, r3, #5
 8002734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002738:	0150      	lsls	r0, r2, #5
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	ebb2 080a 	subs.w	r8, r2, sl
 8002742:	eb63 090b 	sbc.w	r9, r3, fp
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800275a:	ebb2 0408 	subs.w	r4, r2, r8
 800275e:	eb63 0509 	sbc.w	r5, r3, r9
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	00eb      	lsls	r3, r5, #3
 800276c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002770:	00e2      	lsls	r2, r4, #3
 8002772:	4614      	mov	r4, r2
 8002774:	461d      	mov	r5, r3
 8002776:	eb14 030a 	adds.w	r3, r4, sl
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	eb45 030b 	adc.w	r3, r5, fp
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800278e:	4629      	mov	r1, r5
 8002790:	028b      	lsls	r3, r1, #10
 8002792:	4621      	mov	r1, r4
 8002794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002798:	4621      	mov	r1, r4
 800279a:	028a      	lsls	r2, r1, #10
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	2200      	movs	r2, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	60fa      	str	r2, [r7, #12]
 80027a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ac:	f7fe fa4c 	bl	8000c48 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4613      	mov	r3, r2
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetSysClockFreq+0x184>)
 80027d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3740      	adds	r7, #64	; 0x40
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	00b71b00 	.word	0x00b71b00

080027f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08006634 	.word	0x08006634

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffdc 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0b5b      	lsrs	r3, r3, #13
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08006634 	.word	0x08006634

0800285c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07b      	b.n	8002966 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287e:	d009      	beq.n	8002894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
 8002886:	e005      	b.n	8002894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fe90 	bl	80015d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	ea42 0103 	orr.w	r1, r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0104 	and.w	r1, r3, #4
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f003 0210 	and.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b088      	sub	sp, #32
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_SPI_Transmit+0x22>
 800298c:	2302      	movs	r3, #2
 800298e:	e126      	b.n	8002bde <HAL_SPI_Transmit+0x270>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002998:	f7ff f822 	bl	80019e0 <HAL_GetTick>
 800299c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029b2:	e10b      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Transmit+0x52>
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029c4:	e102      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2203      	movs	r2, #3
 80029ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	88fa      	ldrh	r2, [r7, #6]
 80029e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d10f      	bne.n	8002a2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d007      	beq.n	8002a4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a54:	d14b      	bne.n	8002aee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_SPI_Transmit+0xf6>
 8002a5e:	8afb      	ldrh	r3, [r7, #22]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d13e      	bne.n	8002ae2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a88:	e02b      	b.n	8002ae2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d112      	bne.n	8002abe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	1c9a      	adds	r2, r3, #2
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	86da      	strh	r2, [r3, #54]	; 0x36
 8002abc:	e011      	b.n	8002ae2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002abe:	f7fe ff8f 	bl	80019e0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d803      	bhi.n	8002ad6 <HAL_SPI_Transmit+0x168>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d102      	bne.n	8002adc <HAL_SPI_Transmit+0x16e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ae0:	e074      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ce      	bne.n	8002a8a <HAL_SPI_Transmit+0x11c>
 8002aec:	e04c      	b.n	8002b88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_SPI_Transmit+0x18e>
 8002af6:	8afb      	ldrh	r3, [r7, #22]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d140      	bne.n	8002b7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b22:	e02c      	b.n	8002b7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d113      	bne.n	8002b5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b58:	e011      	b.n	8002b7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5a:	f7fe ff41 	bl	80019e0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d803      	bhi.n	8002b72 <HAL_SPI_Transmit+0x204>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d102      	bne.n	8002b78 <HAL_SPI_Transmit+0x20a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b7c:	e026      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1cd      	bne.n	8002b24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fbcb 	bl	8003328 <SPI_EndRxTxTransaction>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e000      	b.n	8002bcc <HAL_SPI_Transmit+0x25e>
  }

error:
 8002bca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c02:	d112      	bne.n	8002c2a <HAL_SPI_Receive+0x44>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10e      	bne.n	8002c2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f8f1 	bl	8002e08 <HAL_SPI_TransmitReceive>
 8002c26:	4603      	mov	r3, r0
 8002c28:	e0ea      	b.n	8002e00 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_SPI_Receive+0x52>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0e3      	b.n	8002e00 <HAL_SPI_Receive+0x21a>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c40:	f7fe fece 	bl	80019e0 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c56:	e0ca      	b.n	8002dee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_SPI_Receive+0x7e>
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c68:	e0c1      	b.n	8002dee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d007      	beq.n	8002cf0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d162      	bne.n	8002dbe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cf8:	e02e      	b.n	8002d58 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d115      	bne.n	8002d34 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f103 020c 	add.w	r2, r3, #12
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d32:	e011      	b.n	8002d58 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d34:	f7fe fe54 	bl	80019e0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d803      	bhi.n	8002d4c <HAL_SPI_Receive+0x166>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d102      	bne.n	8002d52 <HAL_SPI_Receive+0x16c>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d56:	e04a      	b.n	8002dee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cb      	bne.n	8002cfa <HAL_SPI_Receive+0x114>
 8002d62:	e031      	b.n	8002dc8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d113      	bne.n	8002d9a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	b292      	uxth	r2, r2
 8002d7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	1c9a      	adds	r2, r3, #2
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d98:	e011      	b.n	8002dbe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9a:	f7fe fe21 	bl	80019e0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d803      	bhi.n	8002db2 <HAL_SPI_Receive+0x1cc>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d102      	bne.n	8002db8 <HAL_SPI_Receive+0x1d2>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002dbc:	e017      	b.n	8002dee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1cd      	bne.n	8002d64 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fa45 	bl	800325c <SPI_EndRxTransaction>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
 8002dea:	e000      	b.n	8002dee <HAL_SPI_Receive+0x208>
  }

error :
 8002dec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	; 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e16:	2301      	movs	r3, #1
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x26>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e18a      	b.n	8003144 <HAL_SPI_TransmitReceive+0x33c>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e36:	f7fe fdd3 	bl	80019e0 <HAL_GetTick>
 8002e3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d00f      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x70>
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5e:	d107      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d103      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x68>
 8002e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d003      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e76:	e15b      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x82>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x82>
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e90:	e14e      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d003      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2205      	movs	r2, #5
 8002ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	887a      	ldrh	r2, [r7, #2]
 8002eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	887a      	ldrh	r2, [r7, #2]
 8002ece:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d007      	beq.n	8002efa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f02:	d178      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x10a>
 8002f0c:	8b7b      	ldrh	r3, [r7, #26]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d166      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	1c9a      	adds	r2, r3, #2
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f36:	e053      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d11b      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x176>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d016      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x176>
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d113      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	1c9a      	adds	r2, r3, #2
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d119      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x1b8>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d014      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fc0:	f7fe fd0e 	bl	80019e0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d807      	bhi.n	8002fe0 <HAL_SPI_TransmitReceive+0x1d8>
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d003      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fde:	e0a7      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1a6      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x130>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1a1      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x130>
 8002ff4:	e07c      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x1fc>
 8002ffe:	8b7b      	ldrh	r3, [r7, #26]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d16b      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800302a:	e057      	b.n	80030dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b02      	cmp	r3, #2
 8003038:	d11c      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x26c>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d017      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x26c>
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d114      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d119      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x2ae>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d014      	beq.n	80030b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030b2:	2301      	movs	r3, #1
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030b6:	f7fe fc93 	bl	80019e0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d803      	bhi.n	80030ce <HAL_SPI_TransmitReceive+0x2c6>
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d102      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x2cc>
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030da:	e029      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1a2      	bne.n	800302c <HAL_SPI_TransmitReceive+0x224>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d19d      	bne.n	800302c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f917 	bl	8003328 <SPI_EndRxTxTransaction>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800310c:	e010      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	e000      	b.n	8003130 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800312e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003144:	4618      	mov	r0, r3
 8003146:	3730      	adds	r7, #48	; 0x30
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800315c:	f7fe fc40 	bl	80019e0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	4413      	add	r3, r2
 800316a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800316c:	f7fe fc38 	bl	80019e0 <HAL_GetTick>
 8003170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003172:	4b39      	ldr	r3, [pc, #228]	; (8003258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	015b      	lsls	r3, r3, #5
 8003178:	0d1b      	lsrs	r3, r3, #20
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003182:	e054      	b.n	800322e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d050      	beq.n	800322e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800318c:	f7fe fc28 	bl	80019e0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	429a      	cmp	r2, r3
 800319a:	d902      	bls.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d13d      	bne.n	800321e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ba:	d111      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	d004      	beq.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d107      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d10f      	bne.n	800320a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e017      	b.n	800324e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3b01      	subs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	429a      	cmp	r2, r3
 800324a:	d19b      	bne.n	8003184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000000 	.word	0x20000000

0800325c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003270:	d111      	bne.n	8003296 <SPI_EndRxTransaction+0x3a>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327a:	d004      	beq.n	8003286 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d107      	bne.n	8003296 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329e:	d12a      	bne.n	80032f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d012      	beq.n	80032d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ff49 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02d      	beq.n	800331c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e026      	b.n	800331e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2200      	movs	r2, #0
 80032d8:	2101      	movs	r1, #1
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff ff36 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01a      	beq.n	800331c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e013      	b.n	800331e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2101      	movs	r1, #1
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff ff23 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e000      	b.n	800331e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <SPI_EndRxTxTransaction+0x7c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <SPI_EndRxTxTransaction+0x80>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0d5b      	lsrs	r3, r3, #21
 8003340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003352:	d112      	bne.n	800337a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff fef4 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e00f      	b.n	800339a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3b01      	subs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d0f2      	beq.n	800337a <SPI_EndRxTxTransaction+0x52>
 8003394:	e000      	b.n	8003398 <SPI_EndRxTxTransaction+0x70>
        break;
 8003396:	bf00      	nop
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000
 80033a8:	165e9f81 	.word	0x165e9f81

080033ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e03f      	b.n	800343e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe f946 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f929 	bl	8003648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b08a      	sub	sp, #40	; 0x28
 800344a:	af02      	add	r7, sp, #8
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b20      	cmp	r3, #32
 8003464:	d17c      	bne.n	8003560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_UART_Transmit+0x2c>
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e075      	b.n	8003562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_UART_Transmit+0x3e>
 8003480:	2302      	movs	r3, #2
 8003482:	e06e      	b.n	8003562 <HAL_UART_Transmit+0x11c>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349a:	f7fe faa1 	bl	80019e0 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d108      	bne.n	80034c8 <HAL_UART_Transmit+0x82>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e003      	b.n	80034d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034d8:	e02a      	b.n	8003530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f840 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e036      	b.n	8003562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	3302      	adds	r3, #2
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	e007      	b.n	8003522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	3301      	adds	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1cf      	bne.n	80034da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f810 	bl	800356a <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e006      	b.n	8003562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b090      	sub	sp, #64	; 0x40
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357a:	e050      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d04c      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x30>
 800358a:	f7fe fa29 	bl	80019e0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003596:	429a      	cmp	r2, r3
 8003598:	d241      	bcs.n	800361e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ba:	637a      	str	r2, [r7, #52]	; 0x34
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e5      	bne.n	800359a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3314      	adds	r3, #20
 80035d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	613b      	str	r3, [r7, #16]
   return(result);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3314      	adds	r3, #20
 80035ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ee:	623a      	str	r2, [r7, #32]
 80035f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	69f9      	ldr	r1, [r7, #28]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e5      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e00f      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d09f      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3740      	adds	r7, #64	; 0x40
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800364c:	b0c0      	sub	sp, #256	; 0x100
 800364e:	af00      	add	r7, sp, #0
 8003650:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	68d9      	ldr	r1, [r3, #12]
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	ea40 0301 	orr.w	r3, r0, r1
 8003670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	431a      	orrs	r2, r3
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036a0:	f021 010c 	bic.w	r1, r1, #12
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ae:	430b      	orrs	r3, r1
 80036b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	6999      	ldr	r1, [r3, #24]
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	ea40 0301 	orr.w	r3, r0, r1
 80036ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <UART_SetConfig+0x2cc>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d005      	beq.n	80036e8 <UART_SetConfig+0xa0>
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <UART_SetConfig+0x2d0>)
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d104      	bne.n	80036f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036e8:	f7ff f8a4 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 80036ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036f0:	e003      	b.n	80036fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036f2:	f7ff f88b 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80036f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003704:	f040 810c 	bne.w	8003920 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370c:	2200      	movs	r2, #0
 800370e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003712:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003716:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800371a:	4622      	mov	r2, r4
 800371c:	462b      	mov	r3, r5
 800371e:	1891      	adds	r1, r2, r2
 8003720:	65b9      	str	r1, [r7, #88]	; 0x58
 8003722:	415b      	adcs	r3, r3
 8003724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003726:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800372a:	4621      	mov	r1, r4
 800372c:	eb12 0801 	adds.w	r8, r2, r1
 8003730:	4629      	mov	r1, r5
 8003732:	eb43 0901 	adc.w	r9, r3, r1
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800374a:	4690      	mov	r8, r2
 800374c:	4699      	mov	r9, r3
 800374e:	4623      	mov	r3, r4
 8003750:	eb18 0303 	adds.w	r3, r8, r3
 8003754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003758:	462b      	mov	r3, r5
 800375a:	eb49 0303 	adc.w	r3, r9, r3
 800375e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800376e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003776:	460b      	mov	r3, r1
 8003778:	18db      	adds	r3, r3, r3
 800377a:	653b      	str	r3, [r7, #80]	; 0x50
 800377c:	4613      	mov	r3, r2
 800377e:	eb42 0303 	adc.w	r3, r2, r3
 8003782:	657b      	str	r3, [r7, #84]	; 0x54
 8003784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003788:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800378c:	f7fd fa5c 	bl	8000c48 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4b61      	ldr	r3, [pc, #388]	; (800391c <UART_SetConfig+0x2d4>)
 8003796:	fba3 2302 	umull	r2, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	011c      	lsls	r4, r3, #4
 800379e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80037b8:	415b      	adcs	r3, r3
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037c0:	4641      	mov	r1, r8
 80037c2:	eb12 0a01 	adds.w	sl, r2, r1
 80037c6:	4649      	mov	r1, r9
 80037c8:	eb43 0b01 	adc.w	fp, r3, r1
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e0:	4692      	mov	sl, r2
 80037e2:	469b      	mov	fp, r3
 80037e4:	4643      	mov	r3, r8
 80037e6:	eb1a 0303 	adds.w	r3, sl, r3
 80037ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037ee:	464b      	mov	r3, r9
 80037f0:	eb4b 0303 	adc.w	r3, fp, r3
 80037f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003804:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003808:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800380c:	460b      	mov	r3, r1
 800380e:	18db      	adds	r3, r3, r3
 8003810:	643b      	str	r3, [r7, #64]	; 0x40
 8003812:	4613      	mov	r3, r2
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
 800381a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800381e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003822:	f7fd fa11 	bl	8000c48 <__aeabi_uldivmod>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4611      	mov	r1, r2
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <UART_SetConfig+0x2d4>)
 800382e:	fba3 2301 	umull	r2, r3, r3, r1
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2264      	movs	r2, #100	; 0x64
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	1acb      	subs	r3, r1, r3
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003842:	4b36      	ldr	r3, [pc, #216]	; (800391c <UART_SetConfig+0x2d4>)
 8003844:	fba3 2302 	umull	r2, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003850:	441c      	add	r4, r3
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800385c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003860:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	63b9      	str	r1, [r7, #56]	; 0x38
 800386c:	415b      	adcs	r3, r3
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003874:	4641      	mov	r1, r8
 8003876:	1851      	adds	r1, r2, r1
 8003878:	6339      	str	r1, [r7, #48]	; 0x30
 800387a:	4649      	mov	r1, r9
 800387c:	414b      	adcs	r3, r1
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800388c:	4659      	mov	r1, fp
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4651      	mov	r1, sl
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4642      	mov	r2, r8
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038a8:	464b      	mov	r3, r9
 80038aa:	460a      	mov	r2, r1
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038c8:	460b      	mov	r3, r1
 80038ca:	18db      	adds	r3, r3, r3
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ce:	4613      	mov	r3, r2
 80038d0:	eb42 0303 	adc.w	r3, r2, r3
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038de:	f7fd f9b3 	bl	8000c48 <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <UART_SetConfig+0x2d4>)
 80038e8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	2164      	movs	r1, #100	; 0x64
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	3332      	adds	r3, #50	; 0x32
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <UART_SetConfig+0x2d4>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	f003 0207 	and.w	r2, r3, #7
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4422      	add	r2, r4
 800390e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003910:	e106      	b.n	8003b20 <UART_SetConfig+0x4d8>
 8003912:	bf00      	nop
 8003914:	40011000 	.word	0x40011000
 8003918:	40011400 	.word	0x40011400
 800391c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800392a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800392e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003932:	4642      	mov	r2, r8
 8003934:	464b      	mov	r3, r9
 8003936:	1891      	adds	r1, r2, r2
 8003938:	6239      	str	r1, [r7, #32]
 800393a:	415b      	adcs	r3, r3
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
 800393e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003942:	4641      	mov	r1, r8
 8003944:	1854      	adds	r4, r2, r1
 8003946:	4649      	mov	r1, r9
 8003948:	eb43 0501 	adc.w	r5, r3, r1
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	00eb      	lsls	r3, r5, #3
 8003956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800395a:	00e2      	lsls	r2, r4, #3
 800395c:	4614      	mov	r4, r2
 800395e:	461d      	mov	r5, r3
 8003960:	4643      	mov	r3, r8
 8003962:	18e3      	adds	r3, r4, r3
 8003964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003968:	464b      	mov	r3, r9
 800396a:	eb45 0303 	adc.w	r3, r5, r3
 800396e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800397e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800398e:	4629      	mov	r1, r5
 8003990:	008b      	lsls	r3, r1, #2
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003998:	4621      	mov	r1, r4
 800399a:	008a      	lsls	r2, r1, #2
 800399c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039a0:	f7fd f952 	bl	8000c48 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4b60      	ldr	r3, [pc, #384]	; (8003b2c <UART_SetConfig+0x4e4>)
 80039aa:	fba3 2302 	umull	r2, r3, r3, r2
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	011c      	lsls	r4, r3, #4
 80039b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039c4:	4642      	mov	r2, r8
 80039c6:	464b      	mov	r3, r9
 80039c8:	1891      	adds	r1, r2, r2
 80039ca:	61b9      	str	r1, [r7, #24]
 80039cc:	415b      	adcs	r3, r3
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d4:	4641      	mov	r1, r8
 80039d6:	1851      	adds	r1, r2, r1
 80039d8:	6139      	str	r1, [r7, #16]
 80039da:	4649      	mov	r1, r9
 80039dc:	414b      	adcs	r3, r1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039ec:	4659      	mov	r1, fp
 80039ee:	00cb      	lsls	r3, r1, #3
 80039f0:	4651      	mov	r1, sl
 80039f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f6:	4651      	mov	r1, sl
 80039f8:	00ca      	lsls	r2, r1, #3
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	4642      	mov	r2, r8
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a08:	464b      	mov	r3, r9
 8003a0a:	460a      	mov	r2, r1
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	008b      	lsls	r3, r1, #2
 8003a30:	4641      	mov	r1, r8
 8003a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a36:	4641      	mov	r1, r8
 8003a38:	008a      	lsls	r2, r1, #2
 8003a3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a3e:	f7fd f903 	bl	8000c48 <__aeabi_uldivmod>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4611      	mov	r1, r2
 8003a48:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <UART_SetConfig+0x4e4>)
 8003a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2264      	movs	r2, #100	; 0x64
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	1acb      	subs	r3, r1, r3
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	3332      	adds	r3, #50	; 0x32
 8003a5c:	4a33      	ldr	r2, [pc, #204]	; (8003b2c <UART_SetConfig+0x4e4>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a68:	441c      	add	r4, r3
 8003a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6e:	2200      	movs	r2, #0
 8003a70:	673b      	str	r3, [r7, #112]	; 0x70
 8003a72:	677a      	str	r2, [r7, #116]	; 0x74
 8003a74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a78:	4642      	mov	r2, r8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	1891      	adds	r1, r2, r2
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	415b      	adcs	r3, r3
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a88:	4641      	mov	r1, r8
 8003a8a:	1851      	adds	r1, r2, r1
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	4649      	mov	r1, r9
 8003a90:	414b      	adcs	r3, r1
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	00cb      	lsls	r3, r1, #3
 8003aa4:	4651      	mov	r1, sl
 8003aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aaa:	4651      	mov	r1, sl
 8003aac:	00ca      	lsls	r2, r1, #3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	189b      	adds	r3, r3, r2
 8003ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aba:	464b      	mov	r3, r9
 8003abc:	460a      	mov	r2, r1
 8003abe:	eb42 0303 	adc.w	r3, r2, r3
 8003ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ace:	667a      	str	r2, [r7, #100]	; 0x64
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003adc:	4649      	mov	r1, r9
 8003ade:	008b      	lsls	r3, r1, #2
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	008a      	lsls	r2, r1, #2
 8003aea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003aee:	f7fd f8ab 	bl	8000c48 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <UART_SetConfig+0x4e4>)
 8003af8:	fba3 1302 	umull	r1, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	2164      	movs	r1, #100	; 0x64
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	3332      	adds	r3, #50	; 0x32
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <UART_SetConfig+0x4e4>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4422      	add	r2, r4
 8003b1e:	609a      	str	r2, [r3, #8]
}
 8003b20:	bf00      	nop
 8003b22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b26:	46bd      	mov	sp, r7
 8003b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2c:	51eb851f 	.word	0x51eb851f

08003b30 <__cvt>:
 8003b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	ec55 4b10 	vmov	r4, r5, d0
 8003b38:	2d00      	cmp	r5, #0
 8003b3a:	460e      	mov	r6, r1
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	462b      	mov	r3, r5
 8003b40:	bfbb      	ittet	lt
 8003b42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b46:	461d      	movlt	r5, r3
 8003b48:	2300      	movge	r3, #0
 8003b4a:	232d      	movlt	r3, #45	; 0x2d
 8003b4c:	700b      	strb	r3, [r1, #0]
 8003b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b54:	4691      	mov	r9, r2
 8003b56:	f023 0820 	bic.w	r8, r3, #32
 8003b5a:	bfbc      	itt	lt
 8003b5c:	4622      	movlt	r2, r4
 8003b5e:	4614      	movlt	r4, r2
 8003b60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b64:	d005      	beq.n	8003b72 <__cvt+0x42>
 8003b66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b6a:	d100      	bne.n	8003b6e <__cvt+0x3e>
 8003b6c:	3601      	adds	r6, #1
 8003b6e:	2102      	movs	r1, #2
 8003b70:	e000      	b.n	8003b74 <__cvt+0x44>
 8003b72:	2103      	movs	r1, #3
 8003b74:	ab03      	add	r3, sp, #12
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	ab02      	add	r3, sp, #8
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	ec45 4b10 	vmov	d0, r4, r5
 8003b80:	4653      	mov	r3, sl
 8003b82:	4632      	mov	r2, r6
 8003b84:	f000 ff38 	bl	80049f8 <_dtoa_r>
 8003b88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b8c:	4607      	mov	r7, r0
 8003b8e:	d102      	bne.n	8003b96 <__cvt+0x66>
 8003b90:	f019 0f01 	tst.w	r9, #1
 8003b94:	d022      	beq.n	8003bdc <__cvt+0xac>
 8003b96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b9a:	eb07 0906 	add.w	r9, r7, r6
 8003b9e:	d110      	bne.n	8003bc2 <__cvt+0x92>
 8003ba0:	783b      	ldrb	r3, [r7, #0]
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d10a      	bne.n	8003bbc <__cvt+0x8c>
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4620      	mov	r0, r4
 8003bac:	4629      	mov	r1, r5
 8003bae:	f7fc ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bb2:	b918      	cbnz	r0, 8003bbc <__cvt+0x8c>
 8003bb4:	f1c6 0601 	rsb	r6, r6, #1
 8003bb8:	f8ca 6000 	str.w	r6, [sl]
 8003bbc:	f8da 3000 	ldr.w	r3, [sl]
 8003bc0:	4499      	add	r9, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4629      	mov	r1, r5
 8003bca:	f7fc ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bce:	b108      	cbz	r0, 8003bd4 <__cvt+0xa4>
 8003bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bd4:	2230      	movs	r2, #48	; 0x30
 8003bd6:	9b03      	ldr	r3, [sp, #12]
 8003bd8:	454b      	cmp	r3, r9
 8003bda:	d307      	bcc.n	8003bec <__cvt+0xbc>
 8003bdc:	9b03      	ldr	r3, [sp, #12]
 8003bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003be0:	1bdb      	subs	r3, r3, r7
 8003be2:	4638      	mov	r0, r7
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	b004      	add	sp, #16
 8003be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bec:	1c59      	adds	r1, r3, #1
 8003bee:	9103      	str	r1, [sp, #12]
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	e7f0      	b.n	8003bd6 <__cvt+0xa6>

08003bf4 <__exponent>:
 8003bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2900      	cmp	r1, #0
 8003bfa:	bfb8      	it	lt
 8003bfc:	4249      	neglt	r1, r1
 8003bfe:	f803 2b02 	strb.w	r2, [r3], #2
 8003c02:	bfb4      	ite	lt
 8003c04:	222d      	movlt	r2, #45	; 0x2d
 8003c06:	222b      	movge	r2, #43	; 0x2b
 8003c08:	2909      	cmp	r1, #9
 8003c0a:	7042      	strb	r2, [r0, #1]
 8003c0c:	dd2a      	ble.n	8003c64 <__exponent+0x70>
 8003c0e:	f10d 0207 	add.w	r2, sp, #7
 8003c12:	4617      	mov	r7, r2
 8003c14:	260a      	movs	r6, #10
 8003c16:	4694      	mov	ip, r2
 8003c18:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c1c:	fb06 1415 	mls	r4, r6, r5, r1
 8003c20:	3430      	adds	r4, #48	; 0x30
 8003c22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003c26:	460c      	mov	r4, r1
 8003c28:	2c63      	cmp	r4, #99	; 0x63
 8003c2a:	f102 32ff 	add.w	r2, r2, #4294967295
 8003c2e:	4629      	mov	r1, r5
 8003c30:	dcf1      	bgt.n	8003c16 <__exponent+0x22>
 8003c32:	3130      	adds	r1, #48	; 0x30
 8003c34:	f1ac 0402 	sub.w	r4, ip, #2
 8003c38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c3c:	1c41      	adds	r1, r0, #1
 8003c3e:	4622      	mov	r2, r4
 8003c40:	42ba      	cmp	r2, r7
 8003c42:	d30a      	bcc.n	8003c5a <__exponent+0x66>
 8003c44:	f10d 0209 	add.w	r2, sp, #9
 8003c48:	eba2 020c 	sub.w	r2, r2, ip
 8003c4c:	42bc      	cmp	r4, r7
 8003c4e:	bf88      	it	hi
 8003c50:	2200      	movhi	r2, #0
 8003c52:	4413      	add	r3, r2
 8003c54:	1a18      	subs	r0, r3, r0
 8003c56:	b003      	add	sp, #12
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003c5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003c62:	e7ed      	b.n	8003c40 <__exponent+0x4c>
 8003c64:	2330      	movs	r3, #48	; 0x30
 8003c66:	3130      	adds	r1, #48	; 0x30
 8003c68:	7083      	strb	r3, [r0, #2]
 8003c6a:	70c1      	strb	r1, [r0, #3]
 8003c6c:	1d03      	adds	r3, r0, #4
 8003c6e:	e7f1      	b.n	8003c54 <__exponent+0x60>

08003c70 <_printf_float>:
 8003c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c74:	ed2d 8b02 	vpush	{d8}
 8003c78:	b08d      	sub	sp, #52	; 0x34
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c80:	4616      	mov	r6, r2
 8003c82:	461f      	mov	r7, r3
 8003c84:	4605      	mov	r5, r0
 8003c86:	f000 fdb7 	bl	80047f8 <_localeconv_r>
 8003c8a:	f8d0 a000 	ldr.w	sl, [r0]
 8003c8e:	4650      	mov	r0, sl
 8003c90:	f7fc faee 	bl	8000270 <strlen>
 8003c94:	2300      	movs	r3, #0
 8003c96:	930a      	str	r3, [sp, #40]	; 0x28
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	9305      	str	r3, [sp, #20]
 8003c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ca4:	3307      	adds	r3, #7
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	f103 0208 	add.w	r2, r3, #8
 8003cae:	f8c8 2000 	str.w	r2, [r8]
 8003cb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cba:	9307      	str	r3, [sp, #28]
 8003cbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cc0:	ee08 0a10 	vmov	s16, r0
 8003cc4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003cc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ccc:	4b9e      	ldr	r3, [pc, #632]	; (8003f48 <_printf_float+0x2d8>)
 8003cce:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd2:	f7fc ff2b 	bl	8000b2c <__aeabi_dcmpun>
 8003cd6:	bb88      	cbnz	r0, 8003d3c <_printf_float+0xcc>
 8003cd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cdc:	4b9a      	ldr	r3, [pc, #616]	; (8003f48 <_printf_float+0x2d8>)
 8003cde:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce2:	f7fc ff05 	bl	8000af0 <__aeabi_dcmple>
 8003ce6:	bb48      	cbnz	r0, 8003d3c <_printf_float+0xcc>
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2300      	movs	r3, #0
 8003cec:	4640      	mov	r0, r8
 8003cee:	4649      	mov	r1, r9
 8003cf0:	f7fc fef4 	bl	8000adc <__aeabi_dcmplt>
 8003cf4:	b110      	cbz	r0, 8003cfc <_printf_float+0x8c>
 8003cf6:	232d      	movs	r3, #45	; 0x2d
 8003cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cfc:	4a93      	ldr	r2, [pc, #588]	; (8003f4c <_printf_float+0x2dc>)
 8003cfe:	4b94      	ldr	r3, [pc, #592]	; (8003f50 <_printf_float+0x2e0>)
 8003d00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d04:	bf94      	ite	ls
 8003d06:	4690      	movls	r8, r2
 8003d08:	4698      	movhi	r8, r3
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	6123      	str	r3, [r4, #16]
 8003d0e:	9b05      	ldr	r3, [sp, #20]
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	f04f 0900 	mov.w	r9, #0
 8003d1a:	9700      	str	r7, [sp, #0]
 8003d1c:	4633      	mov	r3, r6
 8003d1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d20:	4621      	mov	r1, r4
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 f9da 	bl	80040dc <_printf_common>
 8003d28:	3001      	adds	r0, #1
 8003d2a:	f040 8090 	bne.w	8003e4e <_printf_float+0x1de>
 8003d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d32:	b00d      	add	sp, #52	; 0x34
 8003d34:	ecbd 8b02 	vpop	{d8}
 8003d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	4640      	mov	r0, r8
 8003d42:	4649      	mov	r1, r9
 8003d44:	f7fc fef2 	bl	8000b2c <__aeabi_dcmpun>
 8003d48:	b140      	cbz	r0, 8003d5c <_printf_float+0xec>
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bfbc      	itt	lt
 8003d50:	232d      	movlt	r3, #45	; 0x2d
 8003d52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d56:	4a7f      	ldr	r2, [pc, #508]	; (8003f54 <_printf_float+0x2e4>)
 8003d58:	4b7f      	ldr	r3, [pc, #508]	; (8003f58 <_printf_float+0x2e8>)
 8003d5a:	e7d1      	b.n	8003d00 <_printf_float+0x90>
 8003d5c:	6863      	ldr	r3, [r4, #4]
 8003d5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d62:	9206      	str	r2, [sp, #24]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	d13f      	bne.n	8003de8 <_printf_float+0x178>
 8003d68:	2306      	movs	r3, #6
 8003d6a:	6063      	str	r3, [r4, #4]
 8003d6c:	9b05      	ldr	r3, [sp, #20]
 8003d6e:	6861      	ldr	r1, [r4, #4]
 8003d70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d74:	2300      	movs	r3, #0
 8003d76:	9303      	str	r3, [sp, #12]
 8003d78:	ab0a      	add	r3, sp, #40	; 0x28
 8003d7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d7e:	ab09      	add	r3, sp, #36	; 0x24
 8003d80:	ec49 8b10 	vmov	d0, r8, r9
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	6022      	str	r2, [r4, #0]
 8003d88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f7ff fecf 	bl	8003b30 <__cvt>
 8003d92:	9b06      	ldr	r3, [sp, #24]
 8003d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d96:	2b47      	cmp	r3, #71	; 0x47
 8003d98:	4680      	mov	r8, r0
 8003d9a:	d108      	bne.n	8003dae <_printf_float+0x13e>
 8003d9c:	1cc8      	adds	r0, r1, #3
 8003d9e:	db02      	blt.n	8003da6 <_printf_float+0x136>
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	4299      	cmp	r1, r3
 8003da4:	dd41      	ble.n	8003e2a <_printf_float+0x1ba>
 8003da6:	f1ab 0302 	sub.w	r3, fp, #2
 8003daa:	fa5f fb83 	uxtb.w	fp, r3
 8003dae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003db2:	d820      	bhi.n	8003df6 <_printf_float+0x186>
 8003db4:	3901      	subs	r1, #1
 8003db6:	465a      	mov	r2, fp
 8003db8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dbc:	9109      	str	r1, [sp, #36]	; 0x24
 8003dbe:	f7ff ff19 	bl	8003bf4 <__exponent>
 8003dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dc4:	1813      	adds	r3, r2, r0
 8003dc6:	2a01      	cmp	r2, #1
 8003dc8:	4681      	mov	r9, r0
 8003dca:	6123      	str	r3, [r4, #16]
 8003dcc:	dc02      	bgt.n	8003dd4 <_printf_float+0x164>
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	07d2      	lsls	r2, r2, #31
 8003dd2:	d501      	bpl.n	8003dd8 <_printf_float+0x168>
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	6123      	str	r3, [r4, #16]
 8003dd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d09c      	beq.n	8003d1a <_printf_float+0xaa>
 8003de0:	232d      	movs	r3, #45	; 0x2d
 8003de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de6:	e798      	b.n	8003d1a <_printf_float+0xaa>
 8003de8:	9a06      	ldr	r2, [sp, #24]
 8003dea:	2a47      	cmp	r2, #71	; 0x47
 8003dec:	d1be      	bne.n	8003d6c <_printf_float+0xfc>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1bc      	bne.n	8003d6c <_printf_float+0xfc>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e7b9      	b.n	8003d6a <_printf_float+0xfa>
 8003df6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003dfa:	d118      	bne.n	8003e2e <_printf_float+0x1be>
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	dd0b      	ble.n	8003e1a <_printf_float+0x1aa>
 8003e02:	6121      	str	r1, [r4, #16]
 8003e04:	b913      	cbnz	r3, 8003e0c <_printf_float+0x19c>
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	07d0      	lsls	r0, r2, #31
 8003e0a:	d502      	bpl.n	8003e12 <_printf_float+0x1a2>
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	440b      	add	r3, r1
 8003e10:	6123      	str	r3, [r4, #16]
 8003e12:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e14:	f04f 0900 	mov.w	r9, #0
 8003e18:	e7de      	b.n	8003dd8 <_printf_float+0x168>
 8003e1a:	b913      	cbnz	r3, 8003e22 <_printf_float+0x1b2>
 8003e1c:	6822      	ldr	r2, [r4, #0]
 8003e1e:	07d2      	lsls	r2, r2, #31
 8003e20:	d501      	bpl.n	8003e26 <_printf_float+0x1b6>
 8003e22:	3302      	adds	r3, #2
 8003e24:	e7f4      	b.n	8003e10 <_printf_float+0x1a0>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e7f2      	b.n	8003e10 <_printf_float+0x1a0>
 8003e2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e30:	4299      	cmp	r1, r3
 8003e32:	db05      	blt.n	8003e40 <_printf_float+0x1d0>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	6121      	str	r1, [r4, #16]
 8003e38:	07d8      	lsls	r0, r3, #31
 8003e3a:	d5ea      	bpl.n	8003e12 <_printf_float+0x1a2>
 8003e3c:	1c4b      	adds	r3, r1, #1
 8003e3e:	e7e7      	b.n	8003e10 <_printf_float+0x1a0>
 8003e40:	2900      	cmp	r1, #0
 8003e42:	bfd4      	ite	le
 8003e44:	f1c1 0202 	rsble	r2, r1, #2
 8003e48:	2201      	movgt	r2, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	e7e0      	b.n	8003e10 <_printf_float+0x1a0>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	055a      	lsls	r2, r3, #21
 8003e52:	d407      	bmi.n	8003e64 <_printf_float+0x1f4>
 8003e54:	6923      	ldr	r3, [r4, #16]
 8003e56:	4642      	mov	r2, r8
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d12c      	bne.n	8003ebc <_printf_float+0x24c>
 8003e62:	e764      	b.n	8003d2e <_printf_float+0xbe>
 8003e64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e68:	f240 80e0 	bls.w	800402c <_printf_float+0x3bc>
 8003e6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e70:	2200      	movs	r2, #0
 8003e72:	2300      	movs	r3, #0
 8003e74:	f7fc fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d034      	beq.n	8003ee6 <_printf_float+0x276>
 8003e7c:	4a37      	ldr	r2, [pc, #220]	; (8003f5c <_printf_float+0x2ec>)
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4631      	mov	r1, r6
 8003e82:	4628      	mov	r0, r5
 8003e84:	47b8      	blx	r7
 8003e86:	3001      	adds	r0, #1
 8003e88:	f43f af51 	beq.w	8003d2e <_printf_float+0xbe>
 8003e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e90:	429a      	cmp	r2, r3
 8003e92:	db02      	blt.n	8003e9a <_printf_float+0x22a>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	07d8      	lsls	r0, r3, #31
 8003e98:	d510      	bpl.n	8003ebc <_printf_float+0x24c>
 8003e9a:	ee18 3a10 	vmov	r3, s16
 8003e9e:	4652      	mov	r2, sl
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	47b8      	blx	r7
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	f43f af41 	beq.w	8003d2e <_printf_float+0xbe>
 8003eac:	f04f 0800 	mov.w	r8, #0
 8003eb0:	f104 091a 	add.w	r9, r4, #26
 8003eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	4543      	cmp	r3, r8
 8003eba:	dc09      	bgt.n	8003ed0 <_printf_float+0x260>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	079b      	lsls	r3, r3, #30
 8003ec0:	f100 8107 	bmi.w	80040d2 <_printf_float+0x462>
 8003ec4:	68e0      	ldr	r0, [r4, #12]
 8003ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ec8:	4298      	cmp	r0, r3
 8003eca:	bfb8      	it	lt
 8003ecc:	4618      	movlt	r0, r3
 8003ece:	e730      	b.n	8003d32 <_printf_float+0xc2>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	464a      	mov	r2, r9
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	47b8      	blx	r7
 8003eda:	3001      	adds	r0, #1
 8003edc:	f43f af27 	beq.w	8003d2e <_printf_float+0xbe>
 8003ee0:	f108 0801 	add.w	r8, r8, #1
 8003ee4:	e7e6      	b.n	8003eb4 <_printf_float+0x244>
 8003ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	dc39      	bgt.n	8003f60 <_printf_float+0x2f0>
 8003eec:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <_printf_float+0x2ec>)
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	47b8      	blx	r7
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	f43f af19 	beq.w	8003d2e <_printf_float+0xbe>
 8003efc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d102      	bne.n	8003f0a <_printf_float+0x29a>
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	07d9      	lsls	r1, r3, #31
 8003f08:	d5d8      	bpl.n	8003ebc <_printf_float+0x24c>
 8003f0a:	ee18 3a10 	vmov	r3, s16
 8003f0e:	4652      	mov	r2, sl
 8003f10:	4631      	mov	r1, r6
 8003f12:	4628      	mov	r0, r5
 8003f14:	47b8      	blx	r7
 8003f16:	3001      	adds	r0, #1
 8003f18:	f43f af09 	beq.w	8003d2e <_printf_float+0xbe>
 8003f1c:	f04f 0900 	mov.w	r9, #0
 8003f20:	f104 0a1a 	add.w	sl, r4, #26
 8003f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f26:	425b      	negs	r3, r3
 8003f28:	454b      	cmp	r3, r9
 8003f2a:	dc01      	bgt.n	8003f30 <_printf_float+0x2c0>
 8003f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f2e:	e792      	b.n	8003e56 <_printf_float+0x1e6>
 8003f30:	2301      	movs	r3, #1
 8003f32:	4652      	mov	r2, sl
 8003f34:	4631      	mov	r1, r6
 8003f36:	4628      	mov	r0, r5
 8003f38:	47b8      	blx	r7
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	f43f aef7 	beq.w	8003d2e <_printf_float+0xbe>
 8003f40:	f109 0901 	add.w	r9, r9, #1
 8003f44:	e7ee      	b.n	8003f24 <_printf_float+0x2b4>
 8003f46:	bf00      	nop
 8003f48:	7fefffff 	.word	0x7fefffff
 8003f4c:	0800663c 	.word	0x0800663c
 8003f50:	08006640 	.word	0x08006640
 8003f54:	08006644 	.word	0x08006644
 8003f58:	08006648 	.word	0x08006648
 8003f5c:	0800664c 	.word	0x0800664c
 8003f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f64:	429a      	cmp	r2, r3
 8003f66:	bfa8      	it	ge
 8003f68:	461a      	movge	r2, r3
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	4691      	mov	r9, r2
 8003f6e:	dc37      	bgt.n	8003fe0 <_printf_float+0x370>
 8003f70:	f04f 0b00 	mov.w	fp, #0
 8003f74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f78:	f104 021a 	add.w	r2, r4, #26
 8003f7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f7e:	9305      	str	r3, [sp, #20]
 8003f80:	eba3 0309 	sub.w	r3, r3, r9
 8003f84:	455b      	cmp	r3, fp
 8003f86:	dc33      	bgt.n	8003ff0 <_printf_float+0x380>
 8003f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	db3b      	blt.n	8004008 <_printf_float+0x398>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	07da      	lsls	r2, r3, #31
 8003f94:	d438      	bmi.n	8004008 <_printf_float+0x398>
 8003f96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003f9a:	eba2 0903 	sub.w	r9, r2, r3
 8003f9e:	9b05      	ldr	r3, [sp, #20]
 8003fa0:	1ad2      	subs	r2, r2, r3
 8003fa2:	4591      	cmp	r9, r2
 8003fa4:	bfa8      	it	ge
 8003fa6:	4691      	movge	r9, r2
 8003fa8:	f1b9 0f00 	cmp.w	r9, #0
 8003fac:	dc35      	bgt.n	800401a <_printf_float+0x3aa>
 8003fae:	f04f 0800 	mov.w	r8, #0
 8003fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fb6:	f104 0a1a 	add.w	sl, r4, #26
 8003fba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	eba3 0309 	sub.w	r3, r3, r9
 8003fc4:	4543      	cmp	r3, r8
 8003fc6:	f77f af79 	ble.w	8003ebc <_printf_float+0x24c>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4652      	mov	r2, sl
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	47b8      	blx	r7
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	f43f aeaa 	beq.w	8003d2e <_printf_float+0xbe>
 8003fda:	f108 0801 	add.w	r8, r8, #1
 8003fde:	e7ec      	b.n	8003fba <_printf_float+0x34a>
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	d1c0      	bne.n	8003f70 <_printf_float+0x300>
 8003fee:	e69e      	b.n	8003d2e <_printf_float+0xbe>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	9205      	str	r2, [sp, #20]
 8003ff8:	47b8      	blx	r7
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	f43f ae97 	beq.w	8003d2e <_printf_float+0xbe>
 8004000:	9a05      	ldr	r2, [sp, #20]
 8004002:	f10b 0b01 	add.w	fp, fp, #1
 8004006:	e7b9      	b.n	8003f7c <_printf_float+0x30c>
 8004008:	ee18 3a10 	vmov	r3, s16
 800400c:	4652      	mov	r2, sl
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	47b8      	blx	r7
 8004014:	3001      	adds	r0, #1
 8004016:	d1be      	bne.n	8003f96 <_printf_float+0x326>
 8004018:	e689      	b.n	8003d2e <_printf_float+0xbe>
 800401a:	9a05      	ldr	r2, [sp, #20]
 800401c:	464b      	mov	r3, r9
 800401e:	4442      	add	r2, r8
 8004020:	4631      	mov	r1, r6
 8004022:	4628      	mov	r0, r5
 8004024:	47b8      	blx	r7
 8004026:	3001      	adds	r0, #1
 8004028:	d1c1      	bne.n	8003fae <_printf_float+0x33e>
 800402a:	e680      	b.n	8003d2e <_printf_float+0xbe>
 800402c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800402e:	2a01      	cmp	r2, #1
 8004030:	dc01      	bgt.n	8004036 <_printf_float+0x3c6>
 8004032:	07db      	lsls	r3, r3, #31
 8004034:	d53a      	bpl.n	80040ac <_printf_float+0x43c>
 8004036:	2301      	movs	r3, #1
 8004038:	4642      	mov	r2, r8
 800403a:	4631      	mov	r1, r6
 800403c:	4628      	mov	r0, r5
 800403e:	47b8      	blx	r7
 8004040:	3001      	adds	r0, #1
 8004042:	f43f ae74 	beq.w	8003d2e <_printf_float+0xbe>
 8004046:	ee18 3a10 	vmov	r3, s16
 800404a:	4652      	mov	r2, sl
 800404c:	4631      	mov	r1, r6
 800404e:	4628      	mov	r0, r5
 8004050:	47b8      	blx	r7
 8004052:	3001      	adds	r0, #1
 8004054:	f43f ae6b 	beq.w	8003d2e <_printf_float+0xbe>
 8004058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800405c:	2200      	movs	r2, #0
 800405e:	2300      	movs	r3, #0
 8004060:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004064:	f7fc fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8004068:	b9d8      	cbnz	r0, 80040a2 <_printf_float+0x432>
 800406a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800406e:	f108 0201 	add.w	r2, r8, #1
 8004072:	4631      	mov	r1, r6
 8004074:	4628      	mov	r0, r5
 8004076:	47b8      	blx	r7
 8004078:	3001      	adds	r0, #1
 800407a:	d10e      	bne.n	800409a <_printf_float+0x42a>
 800407c:	e657      	b.n	8003d2e <_printf_float+0xbe>
 800407e:	2301      	movs	r3, #1
 8004080:	4652      	mov	r2, sl
 8004082:	4631      	mov	r1, r6
 8004084:	4628      	mov	r0, r5
 8004086:	47b8      	blx	r7
 8004088:	3001      	adds	r0, #1
 800408a:	f43f ae50 	beq.w	8003d2e <_printf_float+0xbe>
 800408e:	f108 0801 	add.w	r8, r8, #1
 8004092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	4543      	cmp	r3, r8
 8004098:	dcf1      	bgt.n	800407e <_printf_float+0x40e>
 800409a:	464b      	mov	r3, r9
 800409c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040a0:	e6da      	b.n	8003e58 <_printf_float+0x1e8>
 80040a2:	f04f 0800 	mov.w	r8, #0
 80040a6:	f104 0a1a 	add.w	sl, r4, #26
 80040aa:	e7f2      	b.n	8004092 <_printf_float+0x422>
 80040ac:	2301      	movs	r3, #1
 80040ae:	4642      	mov	r2, r8
 80040b0:	e7df      	b.n	8004072 <_printf_float+0x402>
 80040b2:	2301      	movs	r3, #1
 80040b4:	464a      	mov	r2, r9
 80040b6:	4631      	mov	r1, r6
 80040b8:	4628      	mov	r0, r5
 80040ba:	47b8      	blx	r7
 80040bc:	3001      	adds	r0, #1
 80040be:	f43f ae36 	beq.w	8003d2e <_printf_float+0xbe>
 80040c2:	f108 0801 	add.w	r8, r8, #1
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040ca:	1a5b      	subs	r3, r3, r1
 80040cc:	4543      	cmp	r3, r8
 80040ce:	dcf0      	bgt.n	80040b2 <_printf_float+0x442>
 80040d0:	e6f8      	b.n	8003ec4 <_printf_float+0x254>
 80040d2:	f04f 0800 	mov.w	r8, #0
 80040d6:	f104 0919 	add.w	r9, r4, #25
 80040da:	e7f4      	b.n	80040c6 <_printf_float+0x456>

080040dc <_printf_common>:
 80040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	4616      	mov	r6, r2
 80040e2:	4699      	mov	r9, r3
 80040e4:	688a      	ldr	r2, [r1, #8]
 80040e6:	690b      	ldr	r3, [r1, #16]
 80040e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bfb8      	it	lt
 80040f0:	4613      	movlt	r3, r2
 80040f2:	6033      	str	r3, [r6, #0]
 80040f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040f8:	4607      	mov	r7, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	b10a      	cbz	r2, 8004102 <_printf_common+0x26>
 80040fe:	3301      	adds	r3, #1
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	0699      	lsls	r1, r3, #26
 8004106:	bf42      	ittt	mi
 8004108:	6833      	ldrmi	r3, [r6, #0]
 800410a:	3302      	addmi	r3, #2
 800410c:	6033      	strmi	r3, [r6, #0]
 800410e:	6825      	ldr	r5, [r4, #0]
 8004110:	f015 0506 	ands.w	r5, r5, #6
 8004114:	d106      	bne.n	8004124 <_printf_common+0x48>
 8004116:	f104 0a19 	add.w	sl, r4, #25
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	6832      	ldr	r2, [r6, #0]
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	42ab      	cmp	r3, r5
 8004122:	dc26      	bgt.n	8004172 <_printf_common+0x96>
 8004124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004128:	1e13      	subs	r3, r2, #0
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	bf18      	it	ne
 800412e:	2301      	movne	r3, #1
 8004130:	0692      	lsls	r2, r2, #26
 8004132:	d42b      	bmi.n	800418c <_printf_common+0xb0>
 8004134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004138:	4649      	mov	r1, r9
 800413a:	4638      	mov	r0, r7
 800413c:	47c0      	blx	r8
 800413e:	3001      	adds	r0, #1
 8004140:	d01e      	beq.n	8004180 <_printf_common+0xa4>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	6922      	ldr	r2, [r4, #16]
 8004146:	f003 0306 	and.w	r3, r3, #6
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf02      	ittt	eq
 800414e:	68e5      	ldreq	r5, [r4, #12]
 8004150:	6833      	ldreq	r3, [r6, #0]
 8004152:	1aed      	subeq	r5, r5, r3
 8004154:	68a3      	ldr	r3, [r4, #8]
 8004156:	bf0c      	ite	eq
 8004158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800415c:	2500      	movne	r5, #0
 800415e:	4293      	cmp	r3, r2
 8004160:	bfc4      	itt	gt
 8004162:	1a9b      	subgt	r3, r3, r2
 8004164:	18ed      	addgt	r5, r5, r3
 8004166:	2600      	movs	r6, #0
 8004168:	341a      	adds	r4, #26
 800416a:	42b5      	cmp	r5, r6
 800416c:	d11a      	bne.n	80041a4 <_printf_common+0xc8>
 800416e:	2000      	movs	r0, #0
 8004170:	e008      	b.n	8004184 <_printf_common+0xa8>
 8004172:	2301      	movs	r3, #1
 8004174:	4652      	mov	r2, sl
 8004176:	4649      	mov	r1, r9
 8004178:	4638      	mov	r0, r7
 800417a:	47c0      	blx	r8
 800417c:	3001      	adds	r0, #1
 800417e:	d103      	bne.n	8004188 <_printf_common+0xac>
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004188:	3501      	adds	r5, #1
 800418a:	e7c6      	b.n	800411a <_printf_common+0x3e>
 800418c:	18e1      	adds	r1, r4, r3
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	2030      	movs	r0, #48	; 0x30
 8004192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004196:	4422      	add	r2, r4
 8004198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800419c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a0:	3302      	adds	r3, #2
 80041a2:	e7c7      	b.n	8004134 <_printf_common+0x58>
 80041a4:	2301      	movs	r3, #1
 80041a6:	4622      	mov	r2, r4
 80041a8:	4649      	mov	r1, r9
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c0      	blx	r8
 80041ae:	3001      	adds	r0, #1
 80041b0:	d0e6      	beq.n	8004180 <_printf_common+0xa4>
 80041b2:	3601      	adds	r6, #1
 80041b4:	e7d9      	b.n	800416a <_printf_common+0x8e>
	...

080041b8 <_printf_i>:
 80041b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	7e0f      	ldrb	r7, [r1, #24]
 80041be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041c0:	2f78      	cmp	r7, #120	; 0x78
 80041c2:	4691      	mov	r9, r2
 80041c4:	4680      	mov	r8, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	469a      	mov	sl, r3
 80041ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041ce:	d807      	bhi.n	80041e0 <_printf_i+0x28>
 80041d0:	2f62      	cmp	r7, #98	; 0x62
 80041d2:	d80a      	bhi.n	80041ea <_printf_i+0x32>
 80041d4:	2f00      	cmp	r7, #0
 80041d6:	f000 80d4 	beq.w	8004382 <_printf_i+0x1ca>
 80041da:	2f58      	cmp	r7, #88	; 0x58
 80041dc:	f000 80c0 	beq.w	8004360 <_printf_i+0x1a8>
 80041e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041e8:	e03a      	b.n	8004260 <_printf_i+0xa8>
 80041ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ee:	2b15      	cmp	r3, #21
 80041f0:	d8f6      	bhi.n	80041e0 <_printf_i+0x28>
 80041f2:	a101      	add	r1, pc, #4	; (adr r1, 80041f8 <_printf_i+0x40>)
 80041f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041f8:	08004251 	.word	0x08004251
 80041fc:	08004265 	.word	0x08004265
 8004200:	080041e1 	.word	0x080041e1
 8004204:	080041e1 	.word	0x080041e1
 8004208:	080041e1 	.word	0x080041e1
 800420c:	080041e1 	.word	0x080041e1
 8004210:	08004265 	.word	0x08004265
 8004214:	080041e1 	.word	0x080041e1
 8004218:	080041e1 	.word	0x080041e1
 800421c:	080041e1 	.word	0x080041e1
 8004220:	080041e1 	.word	0x080041e1
 8004224:	08004369 	.word	0x08004369
 8004228:	08004291 	.word	0x08004291
 800422c:	08004323 	.word	0x08004323
 8004230:	080041e1 	.word	0x080041e1
 8004234:	080041e1 	.word	0x080041e1
 8004238:	0800438b 	.word	0x0800438b
 800423c:	080041e1 	.word	0x080041e1
 8004240:	08004291 	.word	0x08004291
 8004244:	080041e1 	.word	0x080041e1
 8004248:	080041e1 	.word	0x080041e1
 800424c:	0800432b 	.word	0x0800432b
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	602a      	str	r2, [r5, #0]
 8004258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800425c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004260:	2301      	movs	r3, #1
 8004262:	e09f      	b.n	80043a4 <_printf_i+0x1ec>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	0607      	lsls	r7, r0, #24
 800426a:	f103 0104 	add.w	r1, r3, #4
 800426e:	6029      	str	r1, [r5, #0]
 8004270:	d501      	bpl.n	8004276 <_printf_i+0xbe>
 8004272:	681e      	ldr	r6, [r3, #0]
 8004274:	e003      	b.n	800427e <_printf_i+0xc6>
 8004276:	0646      	lsls	r6, r0, #25
 8004278:	d5fb      	bpl.n	8004272 <_printf_i+0xba>
 800427a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800427e:	2e00      	cmp	r6, #0
 8004280:	da03      	bge.n	800428a <_printf_i+0xd2>
 8004282:	232d      	movs	r3, #45	; 0x2d
 8004284:	4276      	negs	r6, r6
 8004286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428a:	485a      	ldr	r0, [pc, #360]	; (80043f4 <_printf_i+0x23c>)
 800428c:	230a      	movs	r3, #10
 800428e:	e012      	b.n	80042b6 <_printf_i+0xfe>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	6820      	ldr	r0, [r4, #0]
 8004294:	1d19      	adds	r1, r3, #4
 8004296:	6029      	str	r1, [r5, #0]
 8004298:	0605      	lsls	r5, r0, #24
 800429a:	d501      	bpl.n	80042a0 <_printf_i+0xe8>
 800429c:	681e      	ldr	r6, [r3, #0]
 800429e:	e002      	b.n	80042a6 <_printf_i+0xee>
 80042a0:	0641      	lsls	r1, r0, #25
 80042a2:	d5fb      	bpl.n	800429c <_printf_i+0xe4>
 80042a4:	881e      	ldrh	r6, [r3, #0]
 80042a6:	4853      	ldr	r0, [pc, #332]	; (80043f4 <_printf_i+0x23c>)
 80042a8:	2f6f      	cmp	r7, #111	; 0x6f
 80042aa:	bf0c      	ite	eq
 80042ac:	2308      	moveq	r3, #8
 80042ae:	230a      	movne	r3, #10
 80042b0:	2100      	movs	r1, #0
 80042b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042b6:	6865      	ldr	r5, [r4, #4]
 80042b8:	60a5      	str	r5, [r4, #8]
 80042ba:	2d00      	cmp	r5, #0
 80042bc:	bfa2      	ittt	ge
 80042be:	6821      	ldrge	r1, [r4, #0]
 80042c0:	f021 0104 	bicge.w	r1, r1, #4
 80042c4:	6021      	strge	r1, [r4, #0]
 80042c6:	b90e      	cbnz	r6, 80042cc <_printf_i+0x114>
 80042c8:	2d00      	cmp	r5, #0
 80042ca:	d04b      	beq.n	8004364 <_printf_i+0x1ac>
 80042cc:	4615      	mov	r5, r2
 80042ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80042d2:	fb03 6711 	mls	r7, r3, r1, r6
 80042d6:	5dc7      	ldrb	r7, [r0, r7]
 80042d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042dc:	4637      	mov	r7, r6
 80042de:	42bb      	cmp	r3, r7
 80042e0:	460e      	mov	r6, r1
 80042e2:	d9f4      	bls.n	80042ce <_printf_i+0x116>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d10b      	bne.n	8004300 <_printf_i+0x148>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	07de      	lsls	r6, r3, #31
 80042ec:	d508      	bpl.n	8004300 <_printf_i+0x148>
 80042ee:	6923      	ldr	r3, [r4, #16]
 80042f0:	6861      	ldr	r1, [r4, #4]
 80042f2:	4299      	cmp	r1, r3
 80042f4:	bfde      	ittt	le
 80042f6:	2330      	movle	r3, #48	; 0x30
 80042f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004300:	1b52      	subs	r2, r2, r5
 8004302:	6122      	str	r2, [r4, #16]
 8004304:	f8cd a000 	str.w	sl, [sp]
 8004308:	464b      	mov	r3, r9
 800430a:	aa03      	add	r2, sp, #12
 800430c:	4621      	mov	r1, r4
 800430e:	4640      	mov	r0, r8
 8004310:	f7ff fee4 	bl	80040dc <_printf_common>
 8004314:	3001      	adds	r0, #1
 8004316:	d14a      	bne.n	80043ae <_printf_i+0x1f6>
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	b004      	add	sp, #16
 800431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	4833      	ldr	r0, [pc, #204]	; (80043f8 <_printf_i+0x240>)
 800432c:	2778      	movs	r7, #120	; 0x78
 800432e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	6829      	ldr	r1, [r5, #0]
 8004336:	061f      	lsls	r7, r3, #24
 8004338:	f851 6b04 	ldr.w	r6, [r1], #4
 800433c:	d402      	bmi.n	8004344 <_printf_i+0x18c>
 800433e:	065f      	lsls	r7, r3, #25
 8004340:	bf48      	it	mi
 8004342:	b2b6      	uxthmi	r6, r6
 8004344:	07df      	lsls	r7, r3, #31
 8004346:	bf48      	it	mi
 8004348:	f043 0320 	orrmi.w	r3, r3, #32
 800434c:	6029      	str	r1, [r5, #0]
 800434e:	bf48      	it	mi
 8004350:	6023      	strmi	r3, [r4, #0]
 8004352:	b91e      	cbnz	r6, 800435c <_printf_i+0x1a4>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	2310      	movs	r3, #16
 800435e:	e7a7      	b.n	80042b0 <_printf_i+0xf8>
 8004360:	4824      	ldr	r0, [pc, #144]	; (80043f4 <_printf_i+0x23c>)
 8004362:	e7e4      	b.n	800432e <_printf_i+0x176>
 8004364:	4615      	mov	r5, r2
 8004366:	e7bd      	b.n	80042e4 <_printf_i+0x12c>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	6826      	ldr	r6, [r4, #0]
 800436c:	6961      	ldr	r1, [r4, #20]
 800436e:	1d18      	adds	r0, r3, #4
 8004370:	6028      	str	r0, [r5, #0]
 8004372:	0635      	lsls	r5, r6, #24
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	d501      	bpl.n	800437c <_printf_i+0x1c4>
 8004378:	6019      	str	r1, [r3, #0]
 800437a:	e002      	b.n	8004382 <_printf_i+0x1ca>
 800437c:	0670      	lsls	r0, r6, #25
 800437e:	d5fb      	bpl.n	8004378 <_printf_i+0x1c0>
 8004380:	8019      	strh	r1, [r3, #0]
 8004382:	2300      	movs	r3, #0
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	4615      	mov	r5, r2
 8004388:	e7bc      	b.n	8004304 <_printf_i+0x14c>
 800438a:	682b      	ldr	r3, [r5, #0]
 800438c:	1d1a      	adds	r2, r3, #4
 800438e:	602a      	str	r2, [r5, #0]
 8004390:	681d      	ldr	r5, [r3, #0]
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	2100      	movs	r1, #0
 8004396:	4628      	mov	r0, r5
 8004398:	f7fb ff1a 	bl	80001d0 <memchr>
 800439c:	b108      	cbz	r0, 80043a2 <_printf_i+0x1ea>
 800439e:	1b40      	subs	r0, r0, r5
 80043a0:	6060      	str	r0, [r4, #4]
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	6123      	str	r3, [r4, #16]
 80043a6:	2300      	movs	r3, #0
 80043a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ac:	e7aa      	b.n	8004304 <_printf_i+0x14c>
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	462a      	mov	r2, r5
 80043b2:	4649      	mov	r1, r9
 80043b4:	4640      	mov	r0, r8
 80043b6:	47d0      	blx	sl
 80043b8:	3001      	adds	r0, #1
 80043ba:	d0ad      	beq.n	8004318 <_printf_i+0x160>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	079b      	lsls	r3, r3, #30
 80043c0:	d413      	bmi.n	80043ea <_printf_i+0x232>
 80043c2:	68e0      	ldr	r0, [r4, #12]
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	4298      	cmp	r0, r3
 80043c8:	bfb8      	it	lt
 80043ca:	4618      	movlt	r0, r3
 80043cc:	e7a6      	b.n	800431c <_printf_i+0x164>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4632      	mov	r2, r6
 80043d2:	4649      	mov	r1, r9
 80043d4:	4640      	mov	r0, r8
 80043d6:	47d0      	blx	sl
 80043d8:	3001      	adds	r0, #1
 80043da:	d09d      	beq.n	8004318 <_printf_i+0x160>
 80043dc:	3501      	adds	r5, #1
 80043de:	68e3      	ldr	r3, [r4, #12]
 80043e0:	9903      	ldr	r1, [sp, #12]
 80043e2:	1a5b      	subs	r3, r3, r1
 80043e4:	42ab      	cmp	r3, r5
 80043e6:	dcf2      	bgt.n	80043ce <_printf_i+0x216>
 80043e8:	e7eb      	b.n	80043c2 <_printf_i+0x20a>
 80043ea:	2500      	movs	r5, #0
 80043ec:	f104 0619 	add.w	r6, r4, #25
 80043f0:	e7f5      	b.n	80043de <_printf_i+0x226>
 80043f2:	bf00      	nop
 80043f4:	0800664e 	.word	0x0800664e
 80043f8:	0800665f 	.word	0x0800665f

080043fc <std>:
 80043fc:	2300      	movs	r3, #0
 80043fe:	b510      	push	{r4, lr}
 8004400:	4604      	mov	r4, r0
 8004402:	e9c0 3300 	strd	r3, r3, [r0]
 8004406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800440a:	6083      	str	r3, [r0, #8]
 800440c:	8181      	strh	r1, [r0, #12]
 800440e:	6643      	str	r3, [r0, #100]	; 0x64
 8004410:	81c2      	strh	r2, [r0, #14]
 8004412:	6183      	str	r3, [r0, #24]
 8004414:	4619      	mov	r1, r3
 8004416:	2208      	movs	r2, #8
 8004418:	305c      	adds	r0, #92	; 0x5c
 800441a:	f000 f9e5 	bl	80047e8 <memset>
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <std+0x38>)
 8004420:	6263      	str	r3, [r4, #36]	; 0x24
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <std+0x3c>)
 8004424:	62a3      	str	r3, [r4, #40]	; 0x28
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <std+0x40>)
 8004428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <std+0x44>)
 800442c:	6224      	str	r4, [r4, #32]
 800442e:	6323      	str	r3, [r4, #48]	; 0x30
 8004430:	bd10      	pop	{r4, pc}
 8004432:	bf00      	nop
 8004434:	08004639 	.word	0x08004639
 8004438:	0800465b 	.word	0x0800465b
 800443c:	08004693 	.word	0x08004693
 8004440:	080046b7 	.word	0x080046b7

08004444 <stdio_exit_handler>:
 8004444:	4a02      	ldr	r2, [pc, #8]	; (8004450 <stdio_exit_handler+0xc>)
 8004446:	4903      	ldr	r1, [pc, #12]	; (8004454 <stdio_exit_handler+0x10>)
 8004448:	4803      	ldr	r0, [pc, #12]	; (8004458 <stdio_exit_handler+0x14>)
 800444a:	f000 b869 	b.w	8004520 <_fwalk_sglue>
 800444e:	bf00      	nop
 8004450:	2000000c 	.word	0x2000000c
 8004454:	08006269 	.word	0x08006269
 8004458:	20000018 	.word	0x20000018

0800445c <cleanup_stdio>:
 800445c:	6841      	ldr	r1, [r0, #4]
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <cleanup_stdio+0x34>)
 8004460:	4299      	cmp	r1, r3
 8004462:	b510      	push	{r4, lr}
 8004464:	4604      	mov	r4, r0
 8004466:	d001      	beq.n	800446c <cleanup_stdio+0x10>
 8004468:	f001 fefe 	bl	8006268 <_fflush_r>
 800446c:	68a1      	ldr	r1, [r4, #8]
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <cleanup_stdio+0x38>)
 8004470:	4299      	cmp	r1, r3
 8004472:	d002      	beq.n	800447a <cleanup_stdio+0x1e>
 8004474:	4620      	mov	r0, r4
 8004476:	f001 fef7 	bl	8006268 <_fflush_r>
 800447a:	68e1      	ldr	r1, [r4, #12]
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <cleanup_stdio+0x3c>)
 800447e:	4299      	cmp	r1, r3
 8004480:	d004      	beq.n	800448c <cleanup_stdio+0x30>
 8004482:	4620      	mov	r0, r4
 8004484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004488:	f001 beee 	b.w	8006268 <_fflush_r>
 800448c:	bd10      	pop	{r4, pc}
 800448e:	bf00      	nop
 8004490:	20000298 	.word	0x20000298
 8004494:	20000300 	.word	0x20000300
 8004498:	20000368 	.word	0x20000368

0800449c <global_stdio_init.part.0>:
 800449c:	b510      	push	{r4, lr}
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <global_stdio_init.part.0+0x30>)
 80044a0:	4c0b      	ldr	r4, [pc, #44]	; (80044d0 <global_stdio_init.part.0+0x34>)
 80044a2:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <global_stdio_init.part.0+0x38>)
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	4620      	mov	r0, r4
 80044a8:	2200      	movs	r2, #0
 80044aa:	2104      	movs	r1, #4
 80044ac:	f7ff ffa6 	bl	80043fc <std>
 80044b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80044b4:	2201      	movs	r2, #1
 80044b6:	2109      	movs	r1, #9
 80044b8:	f7ff ffa0 	bl	80043fc <std>
 80044bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80044c0:	2202      	movs	r2, #2
 80044c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c6:	2112      	movs	r1, #18
 80044c8:	f7ff bf98 	b.w	80043fc <std>
 80044cc:	200003d0 	.word	0x200003d0
 80044d0:	20000298 	.word	0x20000298
 80044d4:	08004445 	.word	0x08004445

080044d8 <__sfp_lock_acquire>:
 80044d8:	4801      	ldr	r0, [pc, #4]	; (80044e0 <__sfp_lock_acquire+0x8>)
 80044da:	f000 ba01 	b.w	80048e0 <__retarget_lock_acquire_recursive>
 80044de:	bf00      	nop
 80044e0:	200003d9 	.word	0x200003d9

080044e4 <__sfp_lock_release>:
 80044e4:	4801      	ldr	r0, [pc, #4]	; (80044ec <__sfp_lock_release+0x8>)
 80044e6:	f000 b9fc 	b.w	80048e2 <__retarget_lock_release_recursive>
 80044ea:	bf00      	nop
 80044ec:	200003d9 	.word	0x200003d9

080044f0 <__sinit>:
 80044f0:	b510      	push	{r4, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	f7ff fff0 	bl	80044d8 <__sfp_lock_acquire>
 80044f8:	6a23      	ldr	r3, [r4, #32]
 80044fa:	b11b      	cbz	r3, 8004504 <__sinit+0x14>
 80044fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004500:	f7ff bff0 	b.w	80044e4 <__sfp_lock_release>
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <__sinit+0x28>)
 8004506:	6223      	str	r3, [r4, #32]
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <__sinit+0x2c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f5      	bne.n	80044fc <__sinit+0xc>
 8004510:	f7ff ffc4 	bl	800449c <global_stdio_init.part.0>
 8004514:	e7f2      	b.n	80044fc <__sinit+0xc>
 8004516:	bf00      	nop
 8004518:	0800445d 	.word	0x0800445d
 800451c:	200003d0 	.word	0x200003d0

08004520 <_fwalk_sglue>:
 8004520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004524:	4607      	mov	r7, r0
 8004526:	4688      	mov	r8, r1
 8004528:	4614      	mov	r4, r2
 800452a:	2600      	movs	r6, #0
 800452c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004530:	f1b9 0901 	subs.w	r9, r9, #1
 8004534:	d505      	bpl.n	8004542 <_fwalk_sglue+0x22>
 8004536:	6824      	ldr	r4, [r4, #0]
 8004538:	2c00      	cmp	r4, #0
 800453a:	d1f7      	bne.n	800452c <_fwalk_sglue+0xc>
 800453c:	4630      	mov	r0, r6
 800453e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004542:	89ab      	ldrh	r3, [r5, #12]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d907      	bls.n	8004558 <_fwalk_sglue+0x38>
 8004548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800454c:	3301      	adds	r3, #1
 800454e:	d003      	beq.n	8004558 <_fwalk_sglue+0x38>
 8004550:	4629      	mov	r1, r5
 8004552:	4638      	mov	r0, r7
 8004554:	47c0      	blx	r8
 8004556:	4306      	orrs	r6, r0
 8004558:	3568      	adds	r5, #104	; 0x68
 800455a:	e7e9      	b.n	8004530 <_fwalk_sglue+0x10>

0800455c <iprintf>:
 800455c:	b40f      	push	{r0, r1, r2, r3}
 800455e:	b507      	push	{r0, r1, r2, lr}
 8004560:	4906      	ldr	r1, [pc, #24]	; (800457c <iprintf+0x20>)
 8004562:	ab04      	add	r3, sp, #16
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	f853 2b04 	ldr.w	r2, [r3], #4
 800456a:	6881      	ldr	r1, [r0, #8]
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	f001 fcdb 	bl	8005f28 <_vfiprintf_r>
 8004572:	b003      	add	sp, #12
 8004574:	f85d eb04 	ldr.w	lr, [sp], #4
 8004578:	b004      	add	sp, #16
 800457a:	4770      	bx	lr
 800457c:	20000064 	.word	0x20000064

08004580 <_puts_r>:
 8004580:	6a03      	ldr	r3, [r0, #32]
 8004582:	b570      	push	{r4, r5, r6, lr}
 8004584:	6884      	ldr	r4, [r0, #8]
 8004586:	4605      	mov	r5, r0
 8004588:	460e      	mov	r6, r1
 800458a:	b90b      	cbnz	r3, 8004590 <_puts_r+0x10>
 800458c:	f7ff ffb0 	bl	80044f0 <__sinit>
 8004590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004592:	07db      	lsls	r3, r3, #31
 8004594:	d405      	bmi.n	80045a2 <_puts_r+0x22>
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	0598      	lsls	r0, r3, #22
 800459a:	d402      	bmi.n	80045a2 <_puts_r+0x22>
 800459c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800459e:	f000 f99f 	bl	80048e0 <__retarget_lock_acquire_recursive>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	0719      	lsls	r1, r3, #28
 80045a6:	d513      	bpl.n	80045d0 <_puts_r+0x50>
 80045a8:	6923      	ldr	r3, [r4, #16]
 80045aa:	b18b      	cbz	r3, 80045d0 <_puts_r+0x50>
 80045ac:	3e01      	subs	r6, #1
 80045ae:	68a3      	ldr	r3, [r4, #8]
 80045b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045b4:	3b01      	subs	r3, #1
 80045b6:	60a3      	str	r3, [r4, #8]
 80045b8:	b9e9      	cbnz	r1, 80045f6 <_puts_r+0x76>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da2e      	bge.n	800461c <_puts_r+0x9c>
 80045be:	4622      	mov	r2, r4
 80045c0:	210a      	movs	r1, #10
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f87b 	bl	80046be <__swbuf_r>
 80045c8:	3001      	adds	r0, #1
 80045ca:	d007      	beq.n	80045dc <_puts_r+0x5c>
 80045cc:	250a      	movs	r5, #10
 80045ce:	e007      	b.n	80045e0 <_puts_r+0x60>
 80045d0:	4621      	mov	r1, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 f8b0 	bl	8004738 <__swsetup_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d0e7      	beq.n	80045ac <_puts_r+0x2c>
 80045dc:	f04f 35ff 	mov.w	r5, #4294967295
 80045e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045e2:	07da      	lsls	r2, r3, #31
 80045e4:	d405      	bmi.n	80045f2 <_puts_r+0x72>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	059b      	lsls	r3, r3, #22
 80045ea:	d402      	bmi.n	80045f2 <_puts_r+0x72>
 80045ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ee:	f000 f978 	bl	80048e2 <__retarget_lock_release_recursive>
 80045f2:	4628      	mov	r0, r5
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da04      	bge.n	8004604 <_puts_r+0x84>
 80045fa:	69a2      	ldr	r2, [r4, #24]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	dc06      	bgt.n	800460e <_puts_r+0x8e>
 8004600:	290a      	cmp	r1, #10
 8004602:	d004      	beq.n	800460e <_puts_r+0x8e>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	6022      	str	r2, [r4, #0]
 800460a:	7019      	strb	r1, [r3, #0]
 800460c:	e7cf      	b.n	80045ae <_puts_r+0x2e>
 800460e:	4622      	mov	r2, r4
 8004610:	4628      	mov	r0, r5
 8004612:	f000 f854 	bl	80046be <__swbuf_r>
 8004616:	3001      	adds	r0, #1
 8004618:	d1c9      	bne.n	80045ae <_puts_r+0x2e>
 800461a:	e7df      	b.n	80045dc <_puts_r+0x5c>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	250a      	movs	r5, #10
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	6022      	str	r2, [r4, #0]
 8004624:	701d      	strb	r5, [r3, #0]
 8004626:	e7db      	b.n	80045e0 <_puts_r+0x60>

08004628 <puts>:
 8004628:	4b02      	ldr	r3, [pc, #8]	; (8004634 <puts+0xc>)
 800462a:	4601      	mov	r1, r0
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	f7ff bfa7 	b.w	8004580 <_puts_r>
 8004632:	bf00      	nop
 8004634:	20000064 	.word	0x20000064

08004638 <__sread>:
 8004638:	b510      	push	{r4, lr}
 800463a:	460c      	mov	r4, r1
 800463c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004640:	f000 f900 	bl	8004844 <_read_r>
 8004644:	2800      	cmp	r0, #0
 8004646:	bfab      	itete	ge
 8004648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800464a:	89a3      	ldrhlt	r3, [r4, #12]
 800464c:	181b      	addge	r3, r3, r0
 800464e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004652:	bfac      	ite	ge
 8004654:	6563      	strge	r3, [r4, #84]	; 0x54
 8004656:	81a3      	strhlt	r3, [r4, #12]
 8004658:	bd10      	pop	{r4, pc}

0800465a <__swrite>:
 800465a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800465e:	461f      	mov	r7, r3
 8004660:	898b      	ldrh	r3, [r1, #12]
 8004662:	05db      	lsls	r3, r3, #23
 8004664:	4605      	mov	r5, r0
 8004666:	460c      	mov	r4, r1
 8004668:	4616      	mov	r6, r2
 800466a:	d505      	bpl.n	8004678 <__swrite+0x1e>
 800466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004670:	2302      	movs	r3, #2
 8004672:	2200      	movs	r2, #0
 8004674:	f000 f8d4 	bl	8004820 <_lseek_r>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800467e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	4632      	mov	r2, r6
 8004686:	463b      	mov	r3, r7
 8004688:	4628      	mov	r0, r5
 800468a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	f000 b8eb 	b.w	8004868 <_write_r>

08004692 <__sseek>:
 8004692:	b510      	push	{r4, lr}
 8004694:	460c      	mov	r4, r1
 8004696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800469a:	f000 f8c1 	bl	8004820 <_lseek_r>
 800469e:	1c43      	adds	r3, r0, #1
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	bf15      	itete	ne
 80046a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80046a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046ae:	81a3      	strheq	r3, [r4, #12]
 80046b0:	bf18      	it	ne
 80046b2:	81a3      	strhne	r3, [r4, #12]
 80046b4:	bd10      	pop	{r4, pc}

080046b6 <__sclose>:
 80046b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ba:	f000 b8a1 	b.w	8004800 <_close_r>

080046be <__swbuf_r>:
 80046be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c0:	460e      	mov	r6, r1
 80046c2:	4614      	mov	r4, r2
 80046c4:	4605      	mov	r5, r0
 80046c6:	b118      	cbz	r0, 80046d0 <__swbuf_r+0x12>
 80046c8:	6a03      	ldr	r3, [r0, #32]
 80046ca:	b90b      	cbnz	r3, 80046d0 <__swbuf_r+0x12>
 80046cc:	f7ff ff10 	bl	80044f0 <__sinit>
 80046d0:	69a3      	ldr	r3, [r4, #24]
 80046d2:	60a3      	str	r3, [r4, #8]
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	071a      	lsls	r2, r3, #28
 80046d8:	d525      	bpl.n	8004726 <__swbuf_r+0x68>
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	b31b      	cbz	r3, 8004726 <__swbuf_r+0x68>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	6922      	ldr	r2, [r4, #16]
 80046e2:	1a98      	subs	r0, r3, r2
 80046e4:	6963      	ldr	r3, [r4, #20]
 80046e6:	b2f6      	uxtb	r6, r6
 80046e8:	4283      	cmp	r3, r0
 80046ea:	4637      	mov	r7, r6
 80046ec:	dc04      	bgt.n	80046f8 <__swbuf_r+0x3a>
 80046ee:	4621      	mov	r1, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	f001 fdb9 	bl	8006268 <_fflush_r>
 80046f6:	b9e0      	cbnz	r0, 8004732 <__swbuf_r+0x74>
 80046f8:	68a3      	ldr	r3, [r4, #8]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	6022      	str	r2, [r4, #0]
 8004704:	701e      	strb	r6, [r3, #0]
 8004706:	6962      	ldr	r2, [r4, #20]
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	429a      	cmp	r2, r3
 800470c:	d004      	beq.n	8004718 <__swbuf_r+0x5a>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	07db      	lsls	r3, r3, #31
 8004712:	d506      	bpl.n	8004722 <__swbuf_r+0x64>
 8004714:	2e0a      	cmp	r6, #10
 8004716:	d104      	bne.n	8004722 <__swbuf_r+0x64>
 8004718:	4621      	mov	r1, r4
 800471a:	4628      	mov	r0, r5
 800471c:	f001 fda4 	bl	8006268 <_fflush_r>
 8004720:	b938      	cbnz	r0, 8004732 <__swbuf_r+0x74>
 8004722:	4638      	mov	r0, r7
 8004724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004726:	4621      	mov	r1, r4
 8004728:	4628      	mov	r0, r5
 800472a:	f000 f805 	bl	8004738 <__swsetup_r>
 800472e:	2800      	cmp	r0, #0
 8004730:	d0d5      	beq.n	80046de <__swbuf_r+0x20>
 8004732:	f04f 37ff 	mov.w	r7, #4294967295
 8004736:	e7f4      	b.n	8004722 <__swbuf_r+0x64>

08004738 <__swsetup_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <__swsetup_r+0xac>)
 800473c:	4605      	mov	r5, r0
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	460c      	mov	r4, r1
 8004742:	b118      	cbz	r0, 800474c <__swsetup_r+0x14>
 8004744:	6a03      	ldr	r3, [r0, #32]
 8004746:	b90b      	cbnz	r3, 800474c <__swsetup_r+0x14>
 8004748:	f7ff fed2 	bl	80044f0 <__sinit>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004752:	0718      	lsls	r0, r3, #28
 8004754:	d422      	bmi.n	800479c <__swsetup_r+0x64>
 8004756:	06d9      	lsls	r1, r3, #27
 8004758:	d407      	bmi.n	800476a <__swsetup_r+0x32>
 800475a:	2309      	movs	r3, #9
 800475c:	602b      	str	r3, [r5, #0]
 800475e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	e034      	b.n	80047d4 <__swsetup_r+0x9c>
 800476a:	0758      	lsls	r0, r3, #29
 800476c:	d512      	bpl.n	8004794 <__swsetup_r+0x5c>
 800476e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004770:	b141      	cbz	r1, 8004784 <__swsetup_r+0x4c>
 8004772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004776:	4299      	cmp	r1, r3
 8004778:	d002      	beq.n	8004780 <__swsetup_r+0x48>
 800477a:	4628      	mov	r0, r5
 800477c:	f000 ff2e 	bl	80055dc <_free_r>
 8004780:	2300      	movs	r3, #0
 8004782:	6363      	str	r3, [r4, #52]	; 0x34
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800478a:	81a3      	strh	r3, [r4, #12]
 800478c:	2300      	movs	r3, #0
 800478e:	6063      	str	r3, [r4, #4]
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f043 0308 	orr.w	r3, r3, #8
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	6923      	ldr	r3, [r4, #16]
 800479e:	b94b      	cbnz	r3, 80047b4 <__swsetup_r+0x7c>
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047aa:	d003      	beq.n	80047b4 <__swsetup_r+0x7c>
 80047ac:	4621      	mov	r1, r4
 80047ae:	4628      	mov	r0, r5
 80047b0:	f001 fda8 	bl	8006304 <__smakebuf_r>
 80047b4:	89a0      	ldrh	r0, [r4, #12]
 80047b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047ba:	f010 0301 	ands.w	r3, r0, #1
 80047be:	d00a      	beq.n	80047d6 <__swsetup_r+0x9e>
 80047c0:	2300      	movs	r3, #0
 80047c2:	60a3      	str	r3, [r4, #8]
 80047c4:	6963      	ldr	r3, [r4, #20]
 80047c6:	425b      	negs	r3, r3
 80047c8:	61a3      	str	r3, [r4, #24]
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	b943      	cbnz	r3, 80047e0 <__swsetup_r+0xa8>
 80047ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047d2:	d1c4      	bne.n	800475e <__swsetup_r+0x26>
 80047d4:	bd38      	pop	{r3, r4, r5, pc}
 80047d6:	0781      	lsls	r1, r0, #30
 80047d8:	bf58      	it	pl
 80047da:	6963      	ldrpl	r3, [r4, #20]
 80047dc:	60a3      	str	r3, [r4, #8]
 80047de:	e7f4      	b.n	80047ca <__swsetup_r+0x92>
 80047e0:	2000      	movs	r0, #0
 80047e2:	e7f7      	b.n	80047d4 <__swsetup_r+0x9c>
 80047e4:	20000064 	.word	0x20000064

080047e8 <memset>:
 80047e8:	4402      	add	r2, r0
 80047ea:	4603      	mov	r3, r0
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d100      	bne.n	80047f2 <memset+0xa>
 80047f0:	4770      	bx	lr
 80047f2:	f803 1b01 	strb.w	r1, [r3], #1
 80047f6:	e7f9      	b.n	80047ec <memset+0x4>

080047f8 <_localeconv_r>:
 80047f8:	4800      	ldr	r0, [pc, #0]	; (80047fc <_localeconv_r+0x4>)
 80047fa:	4770      	bx	lr
 80047fc:	20000158 	.word	0x20000158

08004800 <_close_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4d06      	ldr	r5, [pc, #24]	; (800481c <_close_r+0x1c>)
 8004804:	2300      	movs	r3, #0
 8004806:	4604      	mov	r4, r0
 8004808:	4608      	mov	r0, r1
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	f7fc ffdb 	bl	80017c6 <_close>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d102      	bne.n	800481a <_close_r+0x1a>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	b103      	cbz	r3, 800481a <_close_r+0x1a>
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	200003d4 	.word	0x200003d4

08004820 <_lseek_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d07      	ldr	r5, [pc, #28]	; (8004840 <_lseek_r+0x20>)
 8004824:	4604      	mov	r4, r0
 8004826:	4608      	mov	r0, r1
 8004828:	4611      	mov	r1, r2
 800482a:	2200      	movs	r2, #0
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7fc fff0 	bl	8001814 <_lseek>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_lseek_r+0x1e>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_lseek_r+0x1e>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	200003d4 	.word	0x200003d4

08004844 <_read_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4d07      	ldr	r5, [pc, #28]	; (8004864 <_read_r+0x20>)
 8004848:	4604      	mov	r4, r0
 800484a:	4608      	mov	r0, r1
 800484c:	4611      	mov	r1, r2
 800484e:	2200      	movs	r2, #0
 8004850:	602a      	str	r2, [r5, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	f7fc ff9a 	bl	800178c <_read>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_read_r+0x1e>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_read_r+0x1e>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	200003d4 	.word	0x200003d4

08004868 <_write_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d07      	ldr	r5, [pc, #28]	; (8004888 <_write_r+0x20>)
 800486c:	4604      	mov	r4, r0
 800486e:	4608      	mov	r0, r1
 8004870:	4611      	mov	r1, r2
 8004872:	2200      	movs	r2, #0
 8004874:	602a      	str	r2, [r5, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7fc fb64 	bl	8000f44 <_write>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_write_r+0x1e>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_write_r+0x1e>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200003d4 	.word	0x200003d4

0800488c <__errno>:
 800488c:	4b01      	ldr	r3, [pc, #4]	; (8004894 <__errno+0x8>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000064 	.word	0x20000064

08004898 <__libc_init_array>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4d0d      	ldr	r5, [pc, #52]	; (80048d0 <__libc_init_array+0x38>)
 800489c:	4c0d      	ldr	r4, [pc, #52]	; (80048d4 <__libc_init_array+0x3c>)
 800489e:	1b64      	subs	r4, r4, r5
 80048a0:	10a4      	asrs	r4, r4, #2
 80048a2:	2600      	movs	r6, #0
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	d109      	bne.n	80048bc <__libc_init_array+0x24>
 80048a8:	4d0b      	ldr	r5, [pc, #44]	; (80048d8 <__libc_init_array+0x40>)
 80048aa:	4c0c      	ldr	r4, [pc, #48]	; (80048dc <__libc_init_array+0x44>)
 80048ac:	f001 fe58 	bl	8006560 <_init>
 80048b0:	1b64      	subs	r4, r4, r5
 80048b2:	10a4      	asrs	r4, r4, #2
 80048b4:	2600      	movs	r6, #0
 80048b6:	42a6      	cmp	r6, r4
 80048b8:	d105      	bne.n	80048c6 <__libc_init_array+0x2e>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c0:	4798      	blx	r3
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7ee      	b.n	80048a4 <__libc_init_array+0xc>
 80048c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ca:	4798      	blx	r3
 80048cc:	3601      	adds	r6, #1
 80048ce:	e7f2      	b.n	80048b6 <__libc_init_array+0x1e>
 80048d0:	080069b4 	.word	0x080069b4
 80048d4:	080069b4 	.word	0x080069b4
 80048d8:	080069b4 	.word	0x080069b4
 80048dc:	080069b8 	.word	0x080069b8

080048e0 <__retarget_lock_acquire_recursive>:
 80048e0:	4770      	bx	lr

080048e2 <__retarget_lock_release_recursive>:
 80048e2:	4770      	bx	lr

080048e4 <quorem>:
 80048e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	6903      	ldr	r3, [r0, #16]
 80048ea:	690c      	ldr	r4, [r1, #16]
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	4607      	mov	r7, r0
 80048f0:	db7e      	blt.n	80049f0 <quorem+0x10c>
 80048f2:	3c01      	subs	r4, #1
 80048f4:	f101 0814 	add.w	r8, r1, #20
 80048f8:	f100 0514 	add.w	r5, r0, #20
 80048fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800490a:	3301      	adds	r3, #1
 800490c:	429a      	cmp	r2, r3
 800490e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004912:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004916:	fbb2 f6f3 	udiv	r6, r2, r3
 800491a:	d331      	bcc.n	8004980 <quorem+0x9c>
 800491c:	f04f 0e00 	mov.w	lr, #0
 8004920:	4640      	mov	r0, r8
 8004922:	46ac      	mov	ip, r5
 8004924:	46f2      	mov	sl, lr
 8004926:	f850 2b04 	ldr.w	r2, [r0], #4
 800492a:	b293      	uxth	r3, r2
 800492c:	fb06 e303 	mla	r3, r6, r3, lr
 8004930:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004934:	0c1a      	lsrs	r2, r3, #16
 8004936:	b29b      	uxth	r3, r3
 8004938:	ebaa 0303 	sub.w	r3, sl, r3
 800493c:	f8dc a000 	ldr.w	sl, [ip]
 8004940:	fa13 f38a 	uxtah	r3, r3, sl
 8004944:	fb06 220e 	mla	r2, r6, lr, r2
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	9b00      	ldr	r3, [sp, #0]
 800494c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004950:	b292      	uxth	r2, r2
 8004952:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004956:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800495a:	f8bd 3000 	ldrh.w	r3, [sp]
 800495e:	4581      	cmp	r9, r0
 8004960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004964:	f84c 3b04 	str.w	r3, [ip], #4
 8004968:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800496c:	d2db      	bcs.n	8004926 <quorem+0x42>
 800496e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004972:	b92b      	cbnz	r3, 8004980 <quorem+0x9c>
 8004974:	9b01      	ldr	r3, [sp, #4]
 8004976:	3b04      	subs	r3, #4
 8004978:	429d      	cmp	r5, r3
 800497a:	461a      	mov	r2, r3
 800497c:	d32c      	bcc.n	80049d8 <quorem+0xf4>
 800497e:	613c      	str	r4, [r7, #16]
 8004980:	4638      	mov	r0, r7
 8004982:	f001 f9a7 	bl	8005cd4 <__mcmp>
 8004986:	2800      	cmp	r0, #0
 8004988:	db22      	blt.n	80049d0 <quorem+0xec>
 800498a:	3601      	adds	r6, #1
 800498c:	4629      	mov	r1, r5
 800498e:	2000      	movs	r0, #0
 8004990:	f858 2b04 	ldr.w	r2, [r8], #4
 8004994:	f8d1 c000 	ldr.w	ip, [r1]
 8004998:	b293      	uxth	r3, r2
 800499a:	1ac3      	subs	r3, r0, r3
 800499c:	0c12      	lsrs	r2, r2, #16
 800499e:	fa13 f38c 	uxtah	r3, r3, ip
 80049a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80049a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049b0:	45c1      	cmp	r9, r8
 80049b2:	f841 3b04 	str.w	r3, [r1], #4
 80049b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80049ba:	d2e9      	bcs.n	8004990 <quorem+0xac>
 80049bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049c4:	b922      	cbnz	r2, 80049d0 <quorem+0xec>
 80049c6:	3b04      	subs	r3, #4
 80049c8:	429d      	cmp	r5, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	d30a      	bcc.n	80049e4 <quorem+0x100>
 80049ce:	613c      	str	r4, [r7, #16]
 80049d0:	4630      	mov	r0, r6
 80049d2:	b003      	add	sp, #12
 80049d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	3b04      	subs	r3, #4
 80049dc:	2a00      	cmp	r2, #0
 80049de:	d1ce      	bne.n	800497e <quorem+0x9a>
 80049e0:	3c01      	subs	r4, #1
 80049e2:	e7c9      	b.n	8004978 <quorem+0x94>
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	3b04      	subs	r3, #4
 80049e8:	2a00      	cmp	r2, #0
 80049ea:	d1f0      	bne.n	80049ce <quorem+0xea>
 80049ec:	3c01      	subs	r4, #1
 80049ee:	e7eb      	b.n	80049c8 <quorem+0xe4>
 80049f0:	2000      	movs	r0, #0
 80049f2:	e7ee      	b.n	80049d2 <quorem+0xee>
 80049f4:	0000      	movs	r0, r0
	...

080049f8 <_dtoa_r>:
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	ed2d 8b04 	vpush	{d8-d9}
 8004a00:	69c5      	ldr	r5, [r0, #28]
 8004a02:	b093      	sub	sp, #76	; 0x4c
 8004a04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004a08:	ec57 6b10 	vmov	r6, r7, d0
 8004a0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a10:	9107      	str	r1, [sp, #28]
 8004a12:	4604      	mov	r4, r0
 8004a14:	920a      	str	r2, [sp, #40]	; 0x28
 8004a16:	930d      	str	r3, [sp, #52]	; 0x34
 8004a18:	b975      	cbnz	r5, 8004a38 <_dtoa_r+0x40>
 8004a1a:	2010      	movs	r0, #16
 8004a1c:	f000 fe2a 	bl	8005674 <malloc>
 8004a20:	4602      	mov	r2, r0
 8004a22:	61e0      	str	r0, [r4, #28]
 8004a24:	b920      	cbnz	r0, 8004a30 <_dtoa_r+0x38>
 8004a26:	4bae      	ldr	r3, [pc, #696]	; (8004ce0 <_dtoa_r+0x2e8>)
 8004a28:	21ef      	movs	r1, #239	; 0xef
 8004a2a:	48ae      	ldr	r0, [pc, #696]	; (8004ce4 <_dtoa_r+0x2ec>)
 8004a2c:	f001 fce6 	bl	80063fc <__assert_func>
 8004a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a34:	6005      	str	r5, [r0, #0]
 8004a36:	60c5      	str	r5, [r0, #12]
 8004a38:	69e3      	ldr	r3, [r4, #28]
 8004a3a:	6819      	ldr	r1, [r3, #0]
 8004a3c:	b151      	cbz	r1, 8004a54 <_dtoa_r+0x5c>
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	604a      	str	r2, [r1, #4]
 8004a42:	2301      	movs	r3, #1
 8004a44:	4093      	lsls	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 ff07 	bl	800585c <_Bfree>
 8004a4e:	69e3      	ldr	r3, [r4, #28]
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	1e3b      	subs	r3, r7, #0
 8004a56:	bfbb      	ittet	lt
 8004a58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a5c:	9303      	strlt	r3, [sp, #12]
 8004a5e:	2300      	movge	r3, #0
 8004a60:	2201      	movlt	r2, #1
 8004a62:	bfac      	ite	ge
 8004a64:	f8c8 3000 	strge.w	r3, [r8]
 8004a68:	f8c8 2000 	strlt.w	r2, [r8]
 8004a6c:	4b9e      	ldr	r3, [pc, #632]	; (8004ce8 <_dtoa_r+0x2f0>)
 8004a6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a72:	ea33 0308 	bics.w	r3, r3, r8
 8004a76:	d11b      	bne.n	8004ab0 <_dtoa_r+0xb8>
 8004a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004a84:	4333      	orrs	r3, r6
 8004a86:	f000 8593 	beq.w	80055b0 <_dtoa_r+0xbb8>
 8004a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a8c:	b963      	cbnz	r3, 8004aa8 <_dtoa_r+0xb0>
 8004a8e:	4b97      	ldr	r3, [pc, #604]	; (8004cec <_dtoa_r+0x2f4>)
 8004a90:	e027      	b.n	8004ae2 <_dtoa_r+0xea>
 8004a92:	4b97      	ldr	r3, [pc, #604]	; (8004cf0 <_dtoa_r+0x2f8>)
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	3308      	adds	r3, #8
 8004a98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	9800      	ldr	r0, [sp, #0]
 8004a9e:	b013      	add	sp, #76	; 0x4c
 8004aa0:	ecbd 8b04 	vpop	{d8-d9}
 8004aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa8:	4b90      	ldr	r3, [pc, #576]	; (8004cec <_dtoa_r+0x2f4>)
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	3303      	adds	r3, #3
 8004aae:	e7f3      	b.n	8004a98 <_dtoa_r+0xa0>
 8004ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	ec51 0b17 	vmov	r0, r1, d7
 8004aba:	eeb0 8a47 	vmov.f32	s16, s14
 8004abe:	eef0 8a67 	vmov.f32	s17, s15
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f7fc f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ac8:	4681      	mov	r9, r0
 8004aca:	b160      	cbz	r0, 8004ae6 <_dtoa_r+0xee>
 8004acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ace:	2301      	movs	r3, #1
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8568 	beq.w	80055aa <_dtoa_r+0xbb2>
 8004ada:	4b86      	ldr	r3, [pc, #536]	; (8004cf4 <_dtoa_r+0x2fc>)
 8004adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	e7da      	b.n	8004a9c <_dtoa_r+0xa4>
 8004ae6:	aa10      	add	r2, sp, #64	; 0x40
 8004ae8:	a911      	add	r1, sp, #68	; 0x44
 8004aea:	4620      	mov	r0, r4
 8004aec:	eeb0 0a48 	vmov.f32	s0, s16
 8004af0:	eef0 0a68 	vmov.f32	s1, s17
 8004af4:	f001 f994 	bl	8005e20 <__d2b>
 8004af8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004afc:	4682      	mov	sl, r0
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	d07f      	beq.n	8004c02 <_dtoa_r+0x20a>
 8004b02:	ee18 3a90 	vmov	r3, s17
 8004b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004b0e:	ec51 0b18 	vmov	r0, r1, d8
 8004b12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004b1e:	4619      	mov	r1, r3
 8004b20:	2200      	movs	r2, #0
 8004b22:	4b75      	ldr	r3, [pc, #468]	; (8004cf8 <_dtoa_r+0x300>)
 8004b24:	f7fb fbb0 	bl	8000288 <__aeabi_dsub>
 8004b28:	a367      	add	r3, pc, #412	; (adr r3, 8004cc8 <_dtoa_r+0x2d0>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fd63 	bl	80005f8 <__aeabi_dmul>
 8004b32:	a367      	add	r3, pc, #412	; (adr r3, 8004cd0 <_dtoa_r+0x2d8>)
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f7fb fba8 	bl	800028c <__adddf3>
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	4628      	mov	r0, r5
 8004b40:	460f      	mov	r7, r1
 8004b42:	f7fb fcef 	bl	8000524 <__aeabi_i2d>
 8004b46:	a364      	add	r3, pc, #400	; (adr r3, 8004cd8 <_dtoa_r+0x2e0>)
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f7fb fd54 	bl	80005f8 <__aeabi_dmul>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4630      	mov	r0, r6
 8004b56:	4639      	mov	r1, r7
 8004b58:	f7fb fb98 	bl	800028c <__adddf3>
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	460f      	mov	r7, r1
 8004b60:	f7fb fffa 	bl	8000b58 <__aeabi_d2iz>
 8004b64:	2200      	movs	r2, #0
 8004b66:	4683      	mov	fp, r0
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb ffb5 	bl	8000adc <__aeabi_dcmplt>
 8004b72:	b148      	cbz	r0, 8004b88 <_dtoa_r+0x190>
 8004b74:	4658      	mov	r0, fp
 8004b76:	f7fb fcd5 	bl	8000524 <__aeabi_i2d>
 8004b7a:	4632      	mov	r2, r6
 8004b7c:	463b      	mov	r3, r7
 8004b7e:	f7fb ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b82:	b908      	cbnz	r0, 8004b88 <_dtoa_r+0x190>
 8004b84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b88:	f1bb 0f16 	cmp.w	fp, #22
 8004b8c:	d857      	bhi.n	8004c3e <_dtoa_r+0x246>
 8004b8e:	4b5b      	ldr	r3, [pc, #364]	; (8004cfc <_dtoa_r+0x304>)
 8004b90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	ec51 0b18 	vmov	r0, r1, d8
 8004b9c:	f7fb ff9e 	bl	8000adc <__aeabi_dcmplt>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d04e      	beq.n	8004c42 <_dtoa_r+0x24a>
 8004ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ba8:	2300      	movs	r3, #0
 8004baa:	930c      	str	r3, [sp, #48]	; 0x30
 8004bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bae:	1b5b      	subs	r3, r3, r5
 8004bb0:	1e5a      	subs	r2, r3, #1
 8004bb2:	bf45      	ittet	mi
 8004bb4:	f1c3 0301 	rsbmi	r3, r3, #1
 8004bb8:	9305      	strmi	r3, [sp, #20]
 8004bba:	2300      	movpl	r3, #0
 8004bbc:	2300      	movmi	r3, #0
 8004bbe:	9206      	str	r2, [sp, #24]
 8004bc0:	bf54      	ite	pl
 8004bc2:	9305      	strpl	r3, [sp, #20]
 8004bc4:	9306      	strmi	r3, [sp, #24]
 8004bc6:	f1bb 0f00 	cmp.w	fp, #0
 8004bca:	db3c      	blt.n	8004c46 <_dtoa_r+0x24e>
 8004bcc:	9b06      	ldr	r3, [sp, #24]
 8004bce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004bd2:	445b      	add	r3, fp
 8004bd4:	9306      	str	r3, [sp, #24]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9308      	str	r3, [sp, #32]
 8004bda:	9b07      	ldr	r3, [sp, #28]
 8004bdc:	2b09      	cmp	r3, #9
 8004bde:	d868      	bhi.n	8004cb2 <_dtoa_r+0x2ba>
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	bfc4      	itt	gt
 8004be4:	3b04      	subgt	r3, #4
 8004be6:	9307      	strgt	r3, [sp, #28]
 8004be8:	9b07      	ldr	r3, [sp, #28]
 8004bea:	f1a3 0302 	sub.w	r3, r3, #2
 8004bee:	bfcc      	ite	gt
 8004bf0:	2500      	movgt	r5, #0
 8004bf2:	2501      	movle	r5, #1
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	f200 8085 	bhi.w	8004d04 <_dtoa_r+0x30c>
 8004bfa:	e8df f003 	tbb	[pc, r3]
 8004bfe:	3b2e      	.short	0x3b2e
 8004c00:	5839      	.short	0x5839
 8004c02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004c06:	441d      	add	r5, r3
 8004c08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	bfc1      	itttt	gt
 8004c10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c14:	fa08 f803 	lslgt.w	r8, r8, r3
 8004c18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004c1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004c20:	bfd6      	itet	le
 8004c22:	f1c3 0320 	rsble	r3, r3, #32
 8004c26:	ea48 0003 	orrgt.w	r0, r8, r3
 8004c2a:	fa06 f003 	lslle.w	r0, r6, r3
 8004c2e:	f7fb fc69 	bl	8000504 <__aeabi_ui2d>
 8004c32:	2201      	movs	r2, #1
 8004c34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004c38:	3d01      	subs	r5, #1
 8004c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8004c3c:	e76f      	b.n	8004b1e <_dtoa_r+0x126>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e7b3      	b.n	8004baa <_dtoa_r+0x1b2>
 8004c42:	900c      	str	r0, [sp, #48]	; 0x30
 8004c44:	e7b2      	b.n	8004bac <_dtoa_r+0x1b4>
 8004c46:	9b05      	ldr	r3, [sp, #20]
 8004c48:	eba3 030b 	sub.w	r3, r3, fp
 8004c4c:	9305      	str	r3, [sp, #20]
 8004c4e:	f1cb 0300 	rsb	r3, fp, #0
 8004c52:	9308      	str	r3, [sp, #32]
 8004c54:	2300      	movs	r3, #0
 8004c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c58:	e7bf      	b.n	8004bda <_dtoa_r+0x1e2>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	dc52      	bgt.n	8004d0a <_dtoa_r+0x312>
 8004c64:	2301      	movs	r3, #1
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8004c6e:	e00b      	b.n	8004c88 <_dtoa_r+0x290>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e7f3      	b.n	8004c5c <_dtoa_r+0x264>
 8004c74:	2300      	movs	r3, #0
 8004c76:	9309      	str	r3, [sp, #36]	; 0x24
 8004c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7a:	445b      	add	r3, fp
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	bfb8      	it	lt
 8004c86:	2301      	movlt	r3, #1
 8004c88:	69e0      	ldr	r0, [r4, #28]
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	f102 0614 	add.w	r6, r2, #20
 8004c92:	429e      	cmp	r6, r3
 8004c94:	d93d      	bls.n	8004d12 <_dtoa_r+0x31a>
 8004c96:	6041      	str	r1, [r0, #4]
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 fd9f 	bl	80057dc <_Balloc>
 8004c9e:	9000      	str	r0, [sp, #0]
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d139      	bne.n	8004d18 <_dtoa_r+0x320>
 8004ca4:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <_dtoa_r+0x308>)
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	f240 11af 	movw	r1, #431	; 0x1af
 8004cac:	e6bd      	b.n	8004a2a <_dtoa_r+0x32>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e7e1      	b.n	8004c76 <_dtoa_r+0x27e>
 8004cb2:	2501      	movs	r5, #1
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9307      	str	r3, [sp, #28]
 8004cb8:	9509      	str	r5, [sp, #36]	; 0x24
 8004cba:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2312      	movs	r3, #18
 8004cc6:	e7d1      	b.n	8004c6c <_dtoa_r+0x274>
 8004cc8:	636f4361 	.word	0x636f4361
 8004ccc:	3fd287a7 	.word	0x3fd287a7
 8004cd0:	8b60c8b3 	.word	0x8b60c8b3
 8004cd4:	3fc68a28 	.word	0x3fc68a28
 8004cd8:	509f79fb 	.word	0x509f79fb
 8004cdc:	3fd34413 	.word	0x3fd34413
 8004ce0:	0800667d 	.word	0x0800667d
 8004ce4:	08006694 	.word	0x08006694
 8004ce8:	7ff00000 	.word	0x7ff00000
 8004cec:	08006679 	.word	0x08006679
 8004cf0:	08006670 	.word	0x08006670
 8004cf4:	0800664d 	.word	0x0800664d
 8004cf8:	3ff80000 	.word	0x3ff80000
 8004cfc:	08006780 	.word	0x08006780
 8004d00:	080066ec 	.word	0x080066ec
 8004d04:	2301      	movs	r3, #1
 8004d06:	9309      	str	r3, [sp, #36]	; 0x24
 8004d08:	e7d7      	b.n	8004cba <_dtoa_r+0x2c2>
 8004d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	9304      	str	r3, [sp, #16]
 8004d10:	e7ba      	b.n	8004c88 <_dtoa_r+0x290>
 8004d12:	3101      	adds	r1, #1
 8004d14:	0052      	lsls	r2, r2, #1
 8004d16:	e7ba      	b.n	8004c8e <_dtoa_r+0x296>
 8004d18:	69e3      	ldr	r3, [r4, #28]
 8004d1a:	9a00      	ldr	r2, [sp, #0]
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	9b04      	ldr	r3, [sp, #16]
 8004d20:	2b0e      	cmp	r3, #14
 8004d22:	f200 80a8 	bhi.w	8004e76 <_dtoa_r+0x47e>
 8004d26:	2d00      	cmp	r5, #0
 8004d28:	f000 80a5 	beq.w	8004e76 <_dtoa_r+0x47e>
 8004d2c:	f1bb 0f00 	cmp.w	fp, #0
 8004d30:	dd38      	ble.n	8004da4 <_dtoa_r+0x3ac>
 8004d32:	4bc0      	ldr	r3, [pc, #768]	; (8005034 <_dtoa_r+0x63c>)
 8004d34:	f00b 020f 	and.w	r2, fp, #15
 8004d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004d40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004d44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004d48:	d019      	beq.n	8004d7e <_dtoa_r+0x386>
 8004d4a:	4bbb      	ldr	r3, [pc, #748]	; (8005038 <_dtoa_r+0x640>)
 8004d4c:	ec51 0b18 	vmov	r0, r1, d8
 8004d50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d54:	f7fb fd7a 	bl	800084c <__aeabi_ddiv>
 8004d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d5c:	f008 080f 	and.w	r8, r8, #15
 8004d60:	2503      	movs	r5, #3
 8004d62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005038 <_dtoa_r+0x640>
 8004d66:	f1b8 0f00 	cmp.w	r8, #0
 8004d6a:	d10a      	bne.n	8004d82 <_dtoa_r+0x38a>
 8004d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d70:	4632      	mov	r2, r6
 8004d72:	463b      	mov	r3, r7
 8004d74:	f7fb fd6a 	bl	800084c <__aeabi_ddiv>
 8004d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d7c:	e02b      	b.n	8004dd6 <_dtoa_r+0x3de>
 8004d7e:	2502      	movs	r5, #2
 8004d80:	e7ef      	b.n	8004d62 <_dtoa_r+0x36a>
 8004d82:	f018 0f01 	tst.w	r8, #1
 8004d86:	d008      	beq.n	8004d9a <_dtoa_r+0x3a2>
 8004d88:	4630      	mov	r0, r6
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004d90:	f7fb fc32 	bl	80005f8 <__aeabi_dmul>
 8004d94:	3501      	adds	r5, #1
 8004d96:	4606      	mov	r6, r0
 8004d98:	460f      	mov	r7, r1
 8004d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004d9e:	f109 0908 	add.w	r9, r9, #8
 8004da2:	e7e0      	b.n	8004d66 <_dtoa_r+0x36e>
 8004da4:	f000 809f 	beq.w	8004ee6 <_dtoa_r+0x4ee>
 8004da8:	f1cb 0600 	rsb	r6, fp, #0
 8004dac:	4ba1      	ldr	r3, [pc, #644]	; (8005034 <_dtoa_r+0x63c>)
 8004dae:	4fa2      	ldr	r7, [pc, #648]	; (8005038 <_dtoa_r+0x640>)
 8004db0:	f006 020f 	and.w	r2, r6, #15
 8004db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	ec51 0b18 	vmov	r0, r1, d8
 8004dc0:	f7fb fc1a 	bl	80005f8 <__aeabi_dmul>
 8004dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dc8:	1136      	asrs	r6, r6, #4
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2502      	movs	r5, #2
 8004dce:	2e00      	cmp	r6, #0
 8004dd0:	d17e      	bne.n	8004ed0 <_dtoa_r+0x4d8>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1d0      	bne.n	8004d78 <_dtoa_r+0x380>
 8004dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8084 	beq.w	8004eea <_dtoa_r+0x4f2>
 8004de2:	4b96      	ldr	r3, [pc, #600]	; (800503c <_dtoa_r+0x644>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	4640      	mov	r0, r8
 8004de8:	4649      	mov	r1, r9
 8004dea:	f7fb fe77 	bl	8000adc <__aeabi_dcmplt>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d07b      	beq.n	8004eea <_dtoa_r+0x4f2>
 8004df2:	9b04      	ldr	r3, [sp, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d078      	beq.n	8004eea <_dtoa_r+0x4f2>
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dd39      	ble.n	8004e72 <_dtoa_r+0x47a>
 8004dfe:	4b90      	ldr	r3, [pc, #576]	; (8005040 <_dtoa_r+0x648>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	4640      	mov	r0, r8
 8004e04:	4649      	mov	r1, r9
 8004e06:	f7fb fbf7 	bl	80005f8 <__aeabi_dmul>
 8004e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e0e:	9e01      	ldr	r6, [sp, #4]
 8004e10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004e14:	3501      	adds	r5, #1
 8004e16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f7fb fb82 	bl	8000524 <__aeabi_i2d>
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	f7fb fbe8 	bl	80005f8 <__aeabi_dmul>
 8004e28:	4b86      	ldr	r3, [pc, #536]	; (8005044 <_dtoa_r+0x64c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f7fb fa2e 	bl	800028c <__adddf3>
 8004e30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	2e00      	cmp	r6, #0
 8004e3c:	d158      	bne.n	8004ef0 <_dtoa_r+0x4f8>
 8004e3e:	4b82      	ldr	r3, [pc, #520]	; (8005048 <_dtoa_r+0x650>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	4640      	mov	r0, r8
 8004e44:	4649      	mov	r1, r9
 8004e46:	f7fb fa1f 	bl	8000288 <__aeabi_dsub>
 8004e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e4e:	4680      	mov	r8, r0
 8004e50:	4689      	mov	r9, r1
 8004e52:	f7fb fe61 	bl	8000b18 <__aeabi_dcmpgt>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	f040 8296 	bne.w	8005388 <_dtoa_r+0x990>
 8004e5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004e60:	4640      	mov	r0, r8
 8004e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e66:	4649      	mov	r1, r9
 8004e68:	f7fb fe38 	bl	8000adc <__aeabi_dcmplt>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	f040 8289 	bne.w	8005384 <_dtoa_r+0x98c>
 8004e72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f2c0 814e 	blt.w	800511a <_dtoa_r+0x722>
 8004e7e:	f1bb 0f0e 	cmp.w	fp, #14
 8004e82:	f300 814a 	bgt.w	800511a <_dtoa_r+0x722>
 8004e86:	4b6b      	ldr	r3, [pc, #428]	; (8005034 <_dtoa_r+0x63c>)
 8004e88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f280 80dc 	bge.w	8005050 <_dtoa_r+0x658>
 8004e98:	9b04      	ldr	r3, [sp, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f300 80d8 	bgt.w	8005050 <_dtoa_r+0x658>
 8004ea0:	f040 826f 	bne.w	8005382 <_dtoa_r+0x98a>
 8004ea4:	4b68      	ldr	r3, [pc, #416]	; (8005048 <_dtoa_r+0x650>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	4649      	mov	r1, r9
 8004eac:	f7fb fba4 	bl	80005f8 <__aeabi_dmul>
 8004eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eb4:	f7fb fe26 	bl	8000b04 <__aeabi_dcmpge>
 8004eb8:	9e04      	ldr	r6, [sp, #16]
 8004eba:	4637      	mov	r7, r6
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f040 8245 	bne.w	800534c <_dtoa_r+0x954>
 8004ec2:	9d00      	ldr	r5, [sp, #0]
 8004ec4:	2331      	movs	r3, #49	; 0x31
 8004ec6:	f805 3b01 	strb.w	r3, [r5], #1
 8004eca:	f10b 0b01 	add.w	fp, fp, #1
 8004ece:	e241      	b.n	8005354 <_dtoa_r+0x95c>
 8004ed0:	07f2      	lsls	r2, r6, #31
 8004ed2:	d505      	bpl.n	8004ee0 <_dtoa_r+0x4e8>
 8004ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed8:	f7fb fb8e 	bl	80005f8 <__aeabi_dmul>
 8004edc:	3501      	adds	r5, #1
 8004ede:	2301      	movs	r3, #1
 8004ee0:	1076      	asrs	r6, r6, #1
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	e773      	b.n	8004dce <_dtoa_r+0x3d6>
 8004ee6:	2502      	movs	r5, #2
 8004ee8:	e775      	b.n	8004dd6 <_dtoa_r+0x3de>
 8004eea:	9e04      	ldr	r6, [sp, #16]
 8004eec:	465f      	mov	r7, fp
 8004eee:	e792      	b.n	8004e16 <_dtoa_r+0x41e>
 8004ef0:	9900      	ldr	r1, [sp, #0]
 8004ef2:	4b50      	ldr	r3, [pc, #320]	; (8005034 <_dtoa_r+0x63c>)
 8004ef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ef8:	4431      	add	r1, r6
 8004efa:	9102      	str	r1, [sp, #8]
 8004efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004efe:	eeb0 9a47 	vmov.f32	s18, s14
 8004f02:	eef0 9a67 	vmov.f32	s19, s15
 8004f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f0e:	2900      	cmp	r1, #0
 8004f10:	d044      	beq.n	8004f9c <_dtoa_r+0x5a4>
 8004f12:	494e      	ldr	r1, [pc, #312]	; (800504c <_dtoa_r+0x654>)
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7fb fc99 	bl	800084c <__aeabi_ddiv>
 8004f1a:	ec53 2b19 	vmov	r2, r3, d9
 8004f1e:	f7fb f9b3 	bl	8000288 <__aeabi_dsub>
 8004f22:	9d00      	ldr	r5, [sp, #0]
 8004f24:	ec41 0b19 	vmov	d9, r0, r1
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f7fb fe14 	bl	8000b58 <__aeabi_d2iz>
 8004f30:	4606      	mov	r6, r0
 8004f32:	f7fb faf7 	bl	8000524 <__aeabi_i2d>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	f7fb f9a3 	bl	8000288 <__aeabi_dsub>
 8004f42:	3630      	adds	r6, #48	; 0x30
 8004f44:	f805 6b01 	strb.w	r6, [r5], #1
 8004f48:	ec53 2b19 	vmov	r2, r3, d9
 8004f4c:	4680      	mov	r8, r0
 8004f4e:	4689      	mov	r9, r1
 8004f50:	f7fb fdc4 	bl	8000adc <__aeabi_dcmplt>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d164      	bne.n	8005022 <_dtoa_r+0x62a>
 8004f58:	4642      	mov	r2, r8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	4937      	ldr	r1, [pc, #220]	; (800503c <_dtoa_r+0x644>)
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7fb f992 	bl	8000288 <__aeabi_dsub>
 8004f64:	ec53 2b19 	vmov	r2, r3, d9
 8004f68:	f7fb fdb8 	bl	8000adc <__aeabi_dcmplt>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f040 80b6 	bne.w	80050de <_dtoa_r+0x6e6>
 8004f72:	9b02      	ldr	r3, [sp, #8]
 8004f74:	429d      	cmp	r5, r3
 8004f76:	f43f af7c 	beq.w	8004e72 <_dtoa_r+0x47a>
 8004f7a:	4b31      	ldr	r3, [pc, #196]	; (8005040 <_dtoa_r+0x648>)
 8004f7c:	ec51 0b19 	vmov	r0, r1, d9
 8004f80:	2200      	movs	r2, #0
 8004f82:	f7fb fb39 	bl	80005f8 <__aeabi_dmul>
 8004f86:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <_dtoa_r+0x648>)
 8004f88:	ec41 0b19 	vmov	d9, r0, r1
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	4640      	mov	r0, r8
 8004f90:	4649      	mov	r1, r9
 8004f92:	f7fb fb31 	bl	80005f8 <__aeabi_dmul>
 8004f96:	4680      	mov	r8, r0
 8004f98:	4689      	mov	r9, r1
 8004f9a:	e7c5      	b.n	8004f28 <_dtoa_r+0x530>
 8004f9c:	ec51 0b17 	vmov	r0, r1, d7
 8004fa0:	f7fb fb2a 	bl	80005f8 <__aeabi_dmul>
 8004fa4:	9b02      	ldr	r3, [sp, #8]
 8004fa6:	9d00      	ldr	r5, [sp, #0]
 8004fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004faa:	ec41 0b19 	vmov	d9, r0, r1
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	f7fb fdd1 	bl	8000b58 <__aeabi_d2iz>
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	f7fb fab4 	bl	8000524 <__aeabi_i2d>
 8004fbc:	3630      	adds	r6, #48	; 0x30
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	f7fb f95f 	bl	8000288 <__aeabi_dsub>
 8004fca:	f805 6b01 	strb.w	r6, [r5], #1
 8004fce:	9b02      	ldr	r3, [sp, #8]
 8004fd0:	429d      	cmp	r5, r3
 8004fd2:	4680      	mov	r8, r0
 8004fd4:	4689      	mov	r9, r1
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	d124      	bne.n	8005026 <_dtoa_r+0x62e>
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	; (800504c <_dtoa_r+0x654>)
 8004fde:	ec51 0b19 	vmov	r0, r1, d9
 8004fe2:	f7fb f953 	bl	800028c <__adddf3>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4640      	mov	r0, r8
 8004fec:	4649      	mov	r1, r9
 8004fee:	f7fb fd93 	bl	8000b18 <__aeabi_dcmpgt>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d173      	bne.n	80050de <_dtoa_r+0x6e6>
 8004ff6:	ec53 2b19 	vmov	r2, r3, d9
 8004ffa:	4914      	ldr	r1, [pc, #80]	; (800504c <_dtoa_r+0x654>)
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7fb f943 	bl	8000288 <__aeabi_dsub>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb fd67 	bl	8000adc <__aeabi_dcmplt>
 800500e:	2800      	cmp	r0, #0
 8005010:	f43f af2f 	beq.w	8004e72 <_dtoa_r+0x47a>
 8005014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005016:	1e6b      	subs	r3, r5, #1
 8005018:	930f      	str	r3, [sp, #60]	; 0x3c
 800501a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800501e:	2b30      	cmp	r3, #48	; 0x30
 8005020:	d0f8      	beq.n	8005014 <_dtoa_r+0x61c>
 8005022:	46bb      	mov	fp, r7
 8005024:	e04a      	b.n	80050bc <_dtoa_r+0x6c4>
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <_dtoa_r+0x648>)
 8005028:	f7fb fae6 	bl	80005f8 <__aeabi_dmul>
 800502c:	4680      	mov	r8, r0
 800502e:	4689      	mov	r9, r1
 8005030:	e7bd      	b.n	8004fae <_dtoa_r+0x5b6>
 8005032:	bf00      	nop
 8005034:	08006780 	.word	0x08006780
 8005038:	08006758 	.word	0x08006758
 800503c:	3ff00000 	.word	0x3ff00000
 8005040:	40240000 	.word	0x40240000
 8005044:	401c0000 	.word	0x401c0000
 8005048:	40140000 	.word	0x40140000
 800504c:	3fe00000 	.word	0x3fe00000
 8005050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005054:	9d00      	ldr	r5, [sp, #0]
 8005056:	4642      	mov	r2, r8
 8005058:	464b      	mov	r3, r9
 800505a:	4630      	mov	r0, r6
 800505c:	4639      	mov	r1, r7
 800505e:	f7fb fbf5 	bl	800084c <__aeabi_ddiv>
 8005062:	f7fb fd79 	bl	8000b58 <__aeabi_d2iz>
 8005066:	9001      	str	r0, [sp, #4]
 8005068:	f7fb fa5c 	bl	8000524 <__aeabi_i2d>
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	f7fb fac2 	bl	80005f8 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4630      	mov	r0, r6
 800507a:	4639      	mov	r1, r7
 800507c:	f7fb f904 	bl	8000288 <__aeabi_dsub>
 8005080:	9e01      	ldr	r6, [sp, #4]
 8005082:	9f04      	ldr	r7, [sp, #16]
 8005084:	3630      	adds	r6, #48	; 0x30
 8005086:	f805 6b01 	strb.w	r6, [r5], #1
 800508a:	9e00      	ldr	r6, [sp, #0]
 800508c:	1bae      	subs	r6, r5, r6
 800508e:	42b7      	cmp	r7, r6
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	d134      	bne.n	8005100 <_dtoa_r+0x708>
 8005096:	f7fb f8f9 	bl	800028c <__adddf3>
 800509a:	4642      	mov	r2, r8
 800509c:	464b      	mov	r3, r9
 800509e:	4606      	mov	r6, r0
 80050a0:	460f      	mov	r7, r1
 80050a2:	f7fb fd39 	bl	8000b18 <__aeabi_dcmpgt>
 80050a6:	b9c8      	cbnz	r0, 80050dc <_dtoa_r+0x6e4>
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	4630      	mov	r0, r6
 80050ae:	4639      	mov	r1, r7
 80050b0:	f7fb fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80050b4:	b110      	cbz	r0, 80050bc <_dtoa_r+0x6c4>
 80050b6:	9b01      	ldr	r3, [sp, #4]
 80050b8:	07db      	lsls	r3, r3, #31
 80050ba:	d40f      	bmi.n	80050dc <_dtoa_r+0x6e4>
 80050bc:	4651      	mov	r1, sl
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 fbcc 	bl	800585c <_Bfree>
 80050c4:	2300      	movs	r3, #0
 80050c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050c8:	702b      	strb	r3, [r5, #0]
 80050ca:	f10b 0301 	add.w	r3, fp, #1
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f43f ace2 	beq.w	8004a9c <_dtoa_r+0xa4>
 80050d8:	601d      	str	r5, [r3, #0]
 80050da:	e4df      	b.n	8004a9c <_dtoa_r+0xa4>
 80050dc:	465f      	mov	r7, fp
 80050de:	462b      	mov	r3, r5
 80050e0:	461d      	mov	r5, r3
 80050e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050e6:	2a39      	cmp	r2, #57	; 0x39
 80050e8:	d106      	bne.n	80050f8 <_dtoa_r+0x700>
 80050ea:	9a00      	ldr	r2, [sp, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d1f7      	bne.n	80050e0 <_dtoa_r+0x6e8>
 80050f0:	9900      	ldr	r1, [sp, #0]
 80050f2:	2230      	movs	r2, #48	; 0x30
 80050f4:	3701      	adds	r7, #1
 80050f6:	700a      	strb	r2, [r1, #0]
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	3201      	adds	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e790      	b.n	8005022 <_dtoa_r+0x62a>
 8005100:	4ba3      	ldr	r3, [pc, #652]	; (8005390 <_dtoa_r+0x998>)
 8005102:	2200      	movs	r2, #0
 8005104:	f7fb fa78 	bl	80005f8 <__aeabi_dmul>
 8005108:	2200      	movs	r2, #0
 800510a:	2300      	movs	r3, #0
 800510c:	4606      	mov	r6, r0
 800510e:	460f      	mov	r7, r1
 8005110:	f7fb fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8005114:	2800      	cmp	r0, #0
 8005116:	d09e      	beq.n	8005056 <_dtoa_r+0x65e>
 8005118:	e7d0      	b.n	80050bc <_dtoa_r+0x6c4>
 800511a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800511c:	2a00      	cmp	r2, #0
 800511e:	f000 80ca 	beq.w	80052b6 <_dtoa_r+0x8be>
 8005122:	9a07      	ldr	r2, [sp, #28]
 8005124:	2a01      	cmp	r2, #1
 8005126:	f300 80ad 	bgt.w	8005284 <_dtoa_r+0x88c>
 800512a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800512c:	2a00      	cmp	r2, #0
 800512e:	f000 80a5 	beq.w	800527c <_dtoa_r+0x884>
 8005132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005136:	9e08      	ldr	r6, [sp, #32]
 8005138:	9d05      	ldr	r5, [sp, #20]
 800513a:	9a05      	ldr	r2, [sp, #20]
 800513c:	441a      	add	r2, r3
 800513e:	9205      	str	r2, [sp, #20]
 8005140:	9a06      	ldr	r2, [sp, #24]
 8005142:	2101      	movs	r1, #1
 8005144:	441a      	add	r2, r3
 8005146:	4620      	mov	r0, r4
 8005148:	9206      	str	r2, [sp, #24]
 800514a:	f000 fc3d 	bl	80059c8 <__i2b>
 800514e:	4607      	mov	r7, r0
 8005150:	b165      	cbz	r5, 800516c <_dtoa_r+0x774>
 8005152:	9b06      	ldr	r3, [sp, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	dd09      	ble.n	800516c <_dtoa_r+0x774>
 8005158:	42ab      	cmp	r3, r5
 800515a:	9a05      	ldr	r2, [sp, #20]
 800515c:	bfa8      	it	ge
 800515e:	462b      	movge	r3, r5
 8005160:	1ad2      	subs	r2, r2, r3
 8005162:	9205      	str	r2, [sp, #20]
 8005164:	9a06      	ldr	r2, [sp, #24]
 8005166:	1aed      	subs	r5, r5, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	9306      	str	r3, [sp, #24]
 800516c:	9b08      	ldr	r3, [sp, #32]
 800516e:	b1f3      	cbz	r3, 80051ae <_dtoa_r+0x7b6>
 8005170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 80a3 	beq.w	80052be <_dtoa_r+0x8c6>
 8005178:	2e00      	cmp	r6, #0
 800517a:	dd10      	ble.n	800519e <_dtoa_r+0x7a6>
 800517c:	4639      	mov	r1, r7
 800517e:	4632      	mov	r2, r6
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fce1 	bl	8005b48 <__pow5mult>
 8005186:	4652      	mov	r2, sl
 8005188:	4601      	mov	r1, r0
 800518a:	4607      	mov	r7, r0
 800518c:	4620      	mov	r0, r4
 800518e:	f000 fc31 	bl	80059f4 <__multiply>
 8005192:	4651      	mov	r1, sl
 8005194:	4680      	mov	r8, r0
 8005196:	4620      	mov	r0, r4
 8005198:	f000 fb60 	bl	800585c <_Bfree>
 800519c:	46c2      	mov	sl, r8
 800519e:	9b08      	ldr	r3, [sp, #32]
 80051a0:	1b9a      	subs	r2, r3, r6
 80051a2:	d004      	beq.n	80051ae <_dtoa_r+0x7b6>
 80051a4:	4651      	mov	r1, sl
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 fcce 	bl	8005b48 <__pow5mult>
 80051ac:	4682      	mov	sl, r0
 80051ae:	2101      	movs	r1, #1
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 fc09 	bl	80059c8 <__i2b>
 80051b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	4606      	mov	r6, r0
 80051bc:	f340 8081 	ble.w	80052c2 <_dtoa_r+0x8ca>
 80051c0:	461a      	mov	r2, r3
 80051c2:	4601      	mov	r1, r0
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 fcbf 	bl	8005b48 <__pow5mult>
 80051ca:	9b07      	ldr	r3, [sp, #28]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	4606      	mov	r6, r0
 80051d0:	dd7a      	ble.n	80052c8 <_dtoa_r+0x8d0>
 80051d2:	f04f 0800 	mov.w	r8, #0
 80051d6:	6933      	ldr	r3, [r6, #16]
 80051d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80051dc:	6918      	ldr	r0, [r3, #16]
 80051de:	f000 fba5 	bl	800592c <__hi0bits>
 80051e2:	f1c0 0020 	rsb	r0, r0, #32
 80051e6:	9b06      	ldr	r3, [sp, #24]
 80051e8:	4418      	add	r0, r3
 80051ea:	f010 001f 	ands.w	r0, r0, #31
 80051ee:	f000 8094 	beq.w	800531a <_dtoa_r+0x922>
 80051f2:	f1c0 0320 	rsb	r3, r0, #32
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	f340 8085 	ble.w	8005306 <_dtoa_r+0x90e>
 80051fc:	9b05      	ldr	r3, [sp, #20]
 80051fe:	f1c0 001c 	rsb	r0, r0, #28
 8005202:	4403      	add	r3, r0
 8005204:	9305      	str	r3, [sp, #20]
 8005206:	9b06      	ldr	r3, [sp, #24]
 8005208:	4403      	add	r3, r0
 800520a:	4405      	add	r5, r0
 800520c:	9306      	str	r3, [sp, #24]
 800520e:	9b05      	ldr	r3, [sp, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dd05      	ble.n	8005220 <_dtoa_r+0x828>
 8005214:	4651      	mov	r1, sl
 8005216:	461a      	mov	r2, r3
 8005218:	4620      	mov	r0, r4
 800521a:	f000 fcef 	bl	8005bfc <__lshift>
 800521e:	4682      	mov	sl, r0
 8005220:	9b06      	ldr	r3, [sp, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	dd05      	ble.n	8005232 <_dtoa_r+0x83a>
 8005226:	4631      	mov	r1, r6
 8005228:	461a      	mov	r2, r3
 800522a:	4620      	mov	r0, r4
 800522c:	f000 fce6 	bl	8005bfc <__lshift>
 8005230:	4606      	mov	r6, r0
 8005232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005234:	2b00      	cmp	r3, #0
 8005236:	d072      	beq.n	800531e <_dtoa_r+0x926>
 8005238:	4631      	mov	r1, r6
 800523a:	4650      	mov	r0, sl
 800523c:	f000 fd4a 	bl	8005cd4 <__mcmp>
 8005240:	2800      	cmp	r0, #0
 8005242:	da6c      	bge.n	800531e <_dtoa_r+0x926>
 8005244:	2300      	movs	r3, #0
 8005246:	4651      	mov	r1, sl
 8005248:	220a      	movs	r2, #10
 800524a:	4620      	mov	r0, r4
 800524c:	f000 fb28 	bl	80058a0 <__multadd>
 8005250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005252:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005256:	4682      	mov	sl, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 81b0 	beq.w	80055be <_dtoa_r+0xbc6>
 800525e:	2300      	movs	r3, #0
 8005260:	4639      	mov	r1, r7
 8005262:	220a      	movs	r2, #10
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fb1b 	bl	80058a0 <__multadd>
 800526a:	9b01      	ldr	r3, [sp, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	4607      	mov	r7, r0
 8005270:	f300 8096 	bgt.w	80053a0 <_dtoa_r+0x9a8>
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	2b02      	cmp	r3, #2
 8005278:	dc59      	bgt.n	800532e <_dtoa_r+0x936>
 800527a:	e091      	b.n	80053a0 <_dtoa_r+0x9a8>
 800527c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800527e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005282:	e758      	b.n	8005136 <_dtoa_r+0x73e>
 8005284:	9b04      	ldr	r3, [sp, #16]
 8005286:	1e5e      	subs	r6, r3, #1
 8005288:	9b08      	ldr	r3, [sp, #32]
 800528a:	42b3      	cmp	r3, r6
 800528c:	bfbf      	itttt	lt
 800528e:	9b08      	ldrlt	r3, [sp, #32]
 8005290:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005292:	9608      	strlt	r6, [sp, #32]
 8005294:	1af3      	sublt	r3, r6, r3
 8005296:	bfb4      	ite	lt
 8005298:	18d2      	addlt	r2, r2, r3
 800529a:	1b9e      	subge	r6, r3, r6
 800529c:	9b04      	ldr	r3, [sp, #16]
 800529e:	bfbc      	itt	lt
 80052a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80052a2:	2600      	movlt	r6, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfb7      	itett	lt
 80052a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80052ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80052b0:	1a9d      	sublt	r5, r3, r2
 80052b2:	2300      	movlt	r3, #0
 80052b4:	e741      	b.n	800513a <_dtoa_r+0x742>
 80052b6:	9e08      	ldr	r6, [sp, #32]
 80052b8:	9d05      	ldr	r5, [sp, #20]
 80052ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80052bc:	e748      	b.n	8005150 <_dtoa_r+0x758>
 80052be:	9a08      	ldr	r2, [sp, #32]
 80052c0:	e770      	b.n	80051a4 <_dtoa_r+0x7ac>
 80052c2:	9b07      	ldr	r3, [sp, #28]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	dc19      	bgt.n	80052fc <_dtoa_r+0x904>
 80052c8:	9b02      	ldr	r3, [sp, #8]
 80052ca:	b9bb      	cbnz	r3, 80052fc <_dtoa_r+0x904>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d2:	b99b      	cbnz	r3, 80052fc <_dtoa_r+0x904>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052da:	0d1b      	lsrs	r3, r3, #20
 80052dc:	051b      	lsls	r3, r3, #20
 80052de:	b183      	cbz	r3, 8005302 <_dtoa_r+0x90a>
 80052e0:	9b05      	ldr	r3, [sp, #20]
 80052e2:	3301      	adds	r3, #1
 80052e4:	9305      	str	r3, [sp, #20]
 80052e6:	9b06      	ldr	r3, [sp, #24]
 80052e8:	3301      	adds	r3, #1
 80052ea:	9306      	str	r3, [sp, #24]
 80052ec:	f04f 0801 	mov.w	r8, #1
 80052f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f47f af6f 	bne.w	80051d6 <_dtoa_r+0x7de>
 80052f8:	2001      	movs	r0, #1
 80052fa:	e774      	b.n	80051e6 <_dtoa_r+0x7ee>
 80052fc:	f04f 0800 	mov.w	r8, #0
 8005300:	e7f6      	b.n	80052f0 <_dtoa_r+0x8f8>
 8005302:	4698      	mov	r8, r3
 8005304:	e7f4      	b.n	80052f0 <_dtoa_r+0x8f8>
 8005306:	d082      	beq.n	800520e <_dtoa_r+0x816>
 8005308:	9a05      	ldr	r2, [sp, #20]
 800530a:	331c      	adds	r3, #28
 800530c:	441a      	add	r2, r3
 800530e:	9205      	str	r2, [sp, #20]
 8005310:	9a06      	ldr	r2, [sp, #24]
 8005312:	441a      	add	r2, r3
 8005314:	441d      	add	r5, r3
 8005316:	9206      	str	r2, [sp, #24]
 8005318:	e779      	b.n	800520e <_dtoa_r+0x816>
 800531a:	4603      	mov	r3, r0
 800531c:	e7f4      	b.n	8005308 <_dtoa_r+0x910>
 800531e:	9b04      	ldr	r3, [sp, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	dc37      	bgt.n	8005394 <_dtoa_r+0x99c>
 8005324:	9b07      	ldr	r3, [sp, #28]
 8005326:	2b02      	cmp	r3, #2
 8005328:	dd34      	ble.n	8005394 <_dtoa_r+0x99c>
 800532a:	9b04      	ldr	r3, [sp, #16]
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	9b01      	ldr	r3, [sp, #4]
 8005330:	b963      	cbnz	r3, 800534c <_dtoa_r+0x954>
 8005332:	4631      	mov	r1, r6
 8005334:	2205      	movs	r2, #5
 8005336:	4620      	mov	r0, r4
 8005338:	f000 fab2 	bl	80058a0 <__multadd>
 800533c:	4601      	mov	r1, r0
 800533e:	4606      	mov	r6, r0
 8005340:	4650      	mov	r0, sl
 8005342:	f000 fcc7 	bl	8005cd4 <__mcmp>
 8005346:	2800      	cmp	r0, #0
 8005348:	f73f adbb 	bgt.w	8004ec2 <_dtoa_r+0x4ca>
 800534c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534e:	9d00      	ldr	r5, [sp, #0]
 8005350:	ea6f 0b03 	mvn.w	fp, r3
 8005354:	f04f 0800 	mov.w	r8, #0
 8005358:	4631      	mov	r1, r6
 800535a:	4620      	mov	r0, r4
 800535c:	f000 fa7e 	bl	800585c <_Bfree>
 8005360:	2f00      	cmp	r7, #0
 8005362:	f43f aeab 	beq.w	80050bc <_dtoa_r+0x6c4>
 8005366:	f1b8 0f00 	cmp.w	r8, #0
 800536a:	d005      	beq.n	8005378 <_dtoa_r+0x980>
 800536c:	45b8      	cmp	r8, r7
 800536e:	d003      	beq.n	8005378 <_dtoa_r+0x980>
 8005370:	4641      	mov	r1, r8
 8005372:	4620      	mov	r0, r4
 8005374:	f000 fa72 	bl	800585c <_Bfree>
 8005378:	4639      	mov	r1, r7
 800537a:	4620      	mov	r0, r4
 800537c:	f000 fa6e 	bl	800585c <_Bfree>
 8005380:	e69c      	b.n	80050bc <_dtoa_r+0x6c4>
 8005382:	2600      	movs	r6, #0
 8005384:	4637      	mov	r7, r6
 8005386:	e7e1      	b.n	800534c <_dtoa_r+0x954>
 8005388:	46bb      	mov	fp, r7
 800538a:	4637      	mov	r7, r6
 800538c:	e599      	b.n	8004ec2 <_dtoa_r+0x4ca>
 800538e:	bf00      	nop
 8005390:	40240000 	.word	0x40240000
 8005394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80c8 	beq.w	800552c <_dtoa_r+0xb34>
 800539c:	9b04      	ldr	r3, [sp, #16]
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	dd05      	ble.n	80053b0 <_dtoa_r+0x9b8>
 80053a4:	4639      	mov	r1, r7
 80053a6:	462a      	mov	r2, r5
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fc27 	bl	8005bfc <__lshift>
 80053ae:	4607      	mov	r7, r0
 80053b0:	f1b8 0f00 	cmp.w	r8, #0
 80053b4:	d05b      	beq.n	800546e <_dtoa_r+0xa76>
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 fa0f 	bl	80057dc <_Balloc>
 80053be:	4605      	mov	r5, r0
 80053c0:	b928      	cbnz	r0, 80053ce <_dtoa_r+0x9d6>
 80053c2:	4b83      	ldr	r3, [pc, #524]	; (80055d0 <_dtoa_r+0xbd8>)
 80053c4:	4602      	mov	r2, r0
 80053c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80053ca:	f7ff bb2e 	b.w	8004a2a <_dtoa_r+0x32>
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	3202      	adds	r2, #2
 80053d2:	0092      	lsls	r2, r2, #2
 80053d4:	f107 010c 	add.w	r1, r7, #12
 80053d8:	300c      	adds	r0, #12
 80053da:	f001 f801 	bl	80063e0 <memcpy>
 80053de:	2201      	movs	r2, #1
 80053e0:	4629      	mov	r1, r5
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 fc0a 	bl	8005bfc <__lshift>
 80053e8:	9b00      	ldr	r3, [sp, #0]
 80053ea:	3301      	adds	r3, #1
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053f2:	4413      	add	r3, r2
 80053f4:	9308      	str	r3, [sp, #32]
 80053f6:	9b02      	ldr	r3, [sp, #8]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	46b8      	mov	r8, r7
 80053fe:	9306      	str	r3, [sp, #24]
 8005400:	4607      	mov	r7, r0
 8005402:	9b04      	ldr	r3, [sp, #16]
 8005404:	4631      	mov	r1, r6
 8005406:	3b01      	subs	r3, #1
 8005408:	4650      	mov	r0, sl
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	f7ff fa6a 	bl	80048e4 <quorem>
 8005410:	4641      	mov	r1, r8
 8005412:	9002      	str	r0, [sp, #8]
 8005414:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005418:	4650      	mov	r0, sl
 800541a:	f000 fc5b 	bl	8005cd4 <__mcmp>
 800541e:	463a      	mov	r2, r7
 8005420:	9005      	str	r0, [sp, #20]
 8005422:	4631      	mov	r1, r6
 8005424:	4620      	mov	r0, r4
 8005426:	f000 fc71 	bl	8005d0c <__mdiff>
 800542a:	68c2      	ldr	r2, [r0, #12]
 800542c:	4605      	mov	r5, r0
 800542e:	bb02      	cbnz	r2, 8005472 <_dtoa_r+0xa7a>
 8005430:	4601      	mov	r1, r0
 8005432:	4650      	mov	r0, sl
 8005434:	f000 fc4e 	bl	8005cd4 <__mcmp>
 8005438:	4602      	mov	r2, r0
 800543a:	4629      	mov	r1, r5
 800543c:	4620      	mov	r0, r4
 800543e:	9209      	str	r2, [sp, #36]	; 0x24
 8005440:	f000 fa0c 	bl	800585c <_Bfree>
 8005444:	9b07      	ldr	r3, [sp, #28]
 8005446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005448:	9d04      	ldr	r5, [sp, #16]
 800544a:	ea43 0102 	orr.w	r1, r3, r2
 800544e:	9b06      	ldr	r3, [sp, #24]
 8005450:	4319      	orrs	r1, r3
 8005452:	d110      	bne.n	8005476 <_dtoa_r+0xa7e>
 8005454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005458:	d029      	beq.n	80054ae <_dtoa_r+0xab6>
 800545a:	9b05      	ldr	r3, [sp, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dd02      	ble.n	8005466 <_dtoa_r+0xa6e>
 8005460:	9b02      	ldr	r3, [sp, #8]
 8005462:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005466:	9b01      	ldr	r3, [sp, #4]
 8005468:	f883 9000 	strb.w	r9, [r3]
 800546c:	e774      	b.n	8005358 <_dtoa_r+0x960>
 800546e:	4638      	mov	r0, r7
 8005470:	e7ba      	b.n	80053e8 <_dtoa_r+0x9f0>
 8005472:	2201      	movs	r2, #1
 8005474:	e7e1      	b.n	800543a <_dtoa_r+0xa42>
 8005476:	9b05      	ldr	r3, [sp, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	db04      	blt.n	8005486 <_dtoa_r+0xa8e>
 800547c:	9907      	ldr	r1, [sp, #28]
 800547e:	430b      	orrs	r3, r1
 8005480:	9906      	ldr	r1, [sp, #24]
 8005482:	430b      	orrs	r3, r1
 8005484:	d120      	bne.n	80054c8 <_dtoa_r+0xad0>
 8005486:	2a00      	cmp	r2, #0
 8005488:	dded      	ble.n	8005466 <_dtoa_r+0xa6e>
 800548a:	4651      	mov	r1, sl
 800548c:	2201      	movs	r2, #1
 800548e:	4620      	mov	r0, r4
 8005490:	f000 fbb4 	bl	8005bfc <__lshift>
 8005494:	4631      	mov	r1, r6
 8005496:	4682      	mov	sl, r0
 8005498:	f000 fc1c 	bl	8005cd4 <__mcmp>
 800549c:	2800      	cmp	r0, #0
 800549e:	dc03      	bgt.n	80054a8 <_dtoa_r+0xab0>
 80054a0:	d1e1      	bne.n	8005466 <_dtoa_r+0xa6e>
 80054a2:	f019 0f01 	tst.w	r9, #1
 80054a6:	d0de      	beq.n	8005466 <_dtoa_r+0xa6e>
 80054a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80054ac:	d1d8      	bne.n	8005460 <_dtoa_r+0xa68>
 80054ae:	9a01      	ldr	r2, [sp, #4]
 80054b0:	2339      	movs	r3, #57	; 0x39
 80054b2:	7013      	strb	r3, [r2, #0]
 80054b4:	462b      	mov	r3, r5
 80054b6:	461d      	mov	r5, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80054be:	2a39      	cmp	r2, #57	; 0x39
 80054c0:	d06c      	beq.n	800559c <_dtoa_r+0xba4>
 80054c2:	3201      	adds	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	e747      	b.n	8005358 <_dtoa_r+0x960>
 80054c8:	2a00      	cmp	r2, #0
 80054ca:	dd07      	ble.n	80054dc <_dtoa_r+0xae4>
 80054cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80054d0:	d0ed      	beq.n	80054ae <_dtoa_r+0xab6>
 80054d2:	9a01      	ldr	r2, [sp, #4]
 80054d4:	f109 0301 	add.w	r3, r9, #1
 80054d8:	7013      	strb	r3, [r2, #0]
 80054da:	e73d      	b.n	8005358 <_dtoa_r+0x960>
 80054dc:	9b04      	ldr	r3, [sp, #16]
 80054de:	9a08      	ldr	r2, [sp, #32]
 80054e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d043      	beq.n	8005570 <_dtoa_r+0xb78>
 80054e8:	4651      	mov	r1, sl
 80054ea:	2300      	movs	r3, #0
 80054ec:	220a      	movs	r2, #10
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f9d6 	bl	80058a0 <__multadd>
 80054f4:	45b8      	cmp	r8, r7
 80054f6:	4682      	mov	sl, r0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	f04f 020a 	mov.w	r2, #10
 8005500:	4641      	mov	r1, r8
 8005502:	4620      	mov	r0, r4
 8005504:	d107      	bne.n	8005516 <_dtoa_r+0xb1e>
 8005506:	f000 f9cb 	bl	80058a0 <__multadd>
 800550a:	4680      	mov	r8, r0
 800550c:	4607      	mov	r7, r0
 800550e:	9b04      	ldr	r3, [sp, #16]
 8005510:	3301      	adds	r3, #1
 8005512:	9304      	str	r3, [sp, #16]
 8005514:	e775      	b.n	8005402 <_dtoa_r+0xa0a>
 8005516:	f000 f9c3 	bl	80058a0 <__multadd>
 800551a:	4639      	mov	r1, r7
 800551c:	4680      	mov	r8, r0
 800551e:	2300      	movs	r3, #0
 8005520:	220a      	movs	r2, #10
 8005522:	4620      	mov	r0, r4
 8005524:	f000 f9bc 	bl	80058a0 <__multadd>
 8005528:	4607      	mov	r7, r0
 800552a:	e7f0      	b.n	800550e <_dtoa_r+0xb16>
 800552c:	9b04      	ldr	r3, [sp, #16]
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	9d00      	ldr	r5, [sp, #0]
 8005532:	4631      	mov	r1, r6
 8005534:	4650      	mov	r0, sl
 8005536:	f7ff f9d5 	bl	80048e4 <quorem>
 800553a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800553e:	9b00      	ldr	r3, [sp, #0]
 8005540:	f805 9b01 	strb.w	r9, [r5], #1
 8005544:	1aea      	subs	r2, r5, r3
 8005546:	9b01      	ldr	r3, [sp, #4]
 8005548:	4293      	cmp	r3, r2
 800554a:	dd07      	ble.n	800555c <_dtoa_r+0xb64>
 800554c:	4651      	mov	r1, sl
 800554e:	2300      	movs	r3, #0
 8005550:	220a      	movs	r2, #10
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f9a4 	bl	80058a0 <__multadd>
 8005558:	4682      	mov	sl, r0
 800555a:	e7ea      	b.n	8005532 <_dtoa_r+0xb3a>
 800555c:	9b01      	ldr	r3, [sp, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	bfc8      	it	gt
 8005562:	461d      	movgt	r5, r3
 8005564:	9b00      	ldr	r3, [sp, #0]
 8005566:	bfd8      	it	le
 8005568:	2501      	movle	r5, #1
 800556a:	441d      	add	r5, r3
 800556c:	f04f 0800 	mov.w	r8, #0
 8005570:	4651      	mov	r1, sl
 8005572:	2201      	movs	r2, #1
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fb41 	bl	8005bfc <__lshift>
 800557a:	4631      	mov	r1, r6
 800557c:	4682      	mov	sl, r0
 800557e:	f000 fba9 	bl	8005cd4 <__mcmp>
 8005582:	2800      	cmp	r0, #0
 8005584:	dc96      	bgt.n	80054b4 <_dtoa_r+0xabc>
 8005586:	d102      	bne.n	800558e <_dtoa_r+0xb96>
 8005588:	f019 0f01 	tst.w	r9, #1
 800558c:	d192      	bne.n	80054b4 <_dtoa_r+0xabc>
 800558e:	462b      	mov	r3, r5
 8005590:	461d      	mov	r5, r3
 8005592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005596:	2a30      	cmp	r2, #48	; 0x30
 8005598:	d0fa      	beq.n	8005590 <_dtoa_r+0xb98>
 800559a:	e6dd      	b.n	8005358 <_dtoa_r+0x960>
 800559c:	9a00      	ldr	r2, [sp, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d189      	bne.n	80054b6 <_dtoa_r+0xabe>
 80055a2:	f10b 0b01 	add.w	fp, fp, #1
 80055a6:	2331      	movs	r3, #49	; 0x31
 80055a8:	e796      	b.n	80054d8 <_dtoa_r+0xae0>
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <_dtoa_r+0xbdc>)
 80055ac:	f7ff ba99 	b.w	8004ae2 <_dtoa_r+0xea>
 80055b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f47f aa6d 	bne.w	8004a92 <_dtoa_r+0x9a>
 80055b8:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <_dtoa_r+0xbe0>)
 80055ba:	f7ff ba92 	b.w	8004ae2 <_dtoa_r+0xea>
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dcb5      	bgt.n	8005530 <_dtoa_r+0xb38>
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	f73f aeb1 	bgt.w	800532e <_dtoa_r+0x936>
 80055cc:	e7b0      	b.n	8005530 <_dtoa_r+0xb38>
 80055ce:	bf00      	nop
 80055d0:	080066ec 	.word	0x080066ec
 80055d4:	0800664c 	.word	0x0800664c
 80055d8:	08006670 	.word	0x08006670

080055dc <_free_r>:
 80055dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055de:	2900      	cmp	r1, #0
 80055e0:	d044      	beq.n	800566c <_free_r+0x90>
 80055e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e6:	9001      	str	r0, [sp, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f1a1 0404 	sub.w	r4, r1, #4
 80055ee:	bfb8      	it	lt
 80055f0:	18e4      	addlt	r4, r4, r3
 80055f2:	f000 f8e7 	bl	80057c4 <__malloc_lock>
 80055f6:	4a1e      	ldr	r2, [pc, #120]	; (8005670 <_free_r+0x94>)
 80055f8:	9801      	ldr	r0, [sp, #4]
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	b933      	cbnz	r3, 800560c <_free_r+0x30>
 80055fe:	6063      	str	r3, [r4, #4]
 8005600:	6014      	str	r4, [r2, #0]
 8005602:	b003      	add	sp, #12
 8005604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005608:	f000 b8e2 	b.w	80057d0 <__malloc_unlock>
 800560c:	42a3      	cmp	r3, r4
 800560e:	d908      	bls.n	8005622 <_free_r+0x46>
 8005610:	6825      	ldr	r5, [r4, #0]
 8005612:	1961      	adds	r1, r4, r5
 8005614:	428b      	cmp	r3, r1
 8005616:	bf01      	itttt	eq
 8005618:	6819      	ldreq	r1, [r3, #0]
 800561a:	685b      	ldreq	r3, [r3, #4]
 800561c:	1949      	addeq	r1, r1, r5
 800561e:	6021      	streq	r1, [r4, #0]
 8005620:	e7ed      	b.n	80055fe <_free_r+0x22>
 8005622:	461a      	mov	r2, r3
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	b10b      	cbz	r3, 800562c <_free_r+0x50>
 8005628:	42a3      	cmp	r3, r4
 800562a:	d9fa      	bls.n	8005622 <_free_r+0x46>
 800562c:	6811      	ldr	r1, [r2, #0]
 800562e:	1855      	adds	r5, r2, r1
 8005630:	42a5      	cmp	r5, r4
 8005632:	d10b      	bne.n	800564c <_free_r+0x70>
 8005634:	6824      	ldr	r4, [r4, #0]
 8005636:	4421      	add	r1, r4
 8005638:	1854      	adds	r4, r2, r1
 800563a:	42a3      	cmp	r3, r4
 800563c:	6011      	str	r1, [r2, #0]
 800563e:	d1e0      	bne.n	8005602 <_free_r+0x26>
 8005640:	681c      	ldr	r4, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	6053      	str	r3, [r2, #4]
 8005646:	440c      	add	r4, r1
 8005648:	6014      	str	r4, [r2, #0]
 800564a:	e7da      	b.n	8005602 <_free_r+0x26>
 800564c:	d902      	bls.n	8005654 <_free_r+0x78>
 800564e:	230c      	movs	r3, #12
 8005650:	6003      	str	r3, [r0, #0]
 8005652:	e7d6      	b.n	8005602 <_free_r+0x26>
 8005654:	6825      	ldr	r5, [r4, #0]
 8005656:	1961      	adds	r1, r4, r5
 8005658:	428b      	cmp	r3, r1
 800565a:	bf04      	itt	eq
 800565c:	6819      	ldreq	r1, [r3, #0]
 800565e:	685b      	ldreq	r3, [r3, #4]
 8005660:	6063      	str	r3, [r4, #4]
 8005662:	bf04      	itt	eq
 8005664:	1949      	addeq	r1, r1, r5
 8005666:	6021      	streq	r1, [r4, #0]
 8005668:	6054      	str	r4, [r2, #4]
 800566a:	e7ca      	b.n	8005602 <_free_r+0x26>
 800566c:	b003      	add	sp, #12
 800566e:	bd30      	pop	{r4, r5, pc}
 8005670:	200003dc 	.word	0x200003dc

08005674 <malloc>:
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <malloc+0xc>)
 8005676:	4601      	mov	r1, r0
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f000 b823 	b.w	80056c4 <_malloc_r>
 800567e:	bf00      	nop
 8005680:	20000064 	.word	0x20000064

08005684 <sbrk_aligned>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4e0e      	ldr	r6, [pc, #56]	; (80056c0 <sbrk_aligned+0x3c>)
 8005688:	460c      	mov	r4, r1
 800568a:	6831      	ldr	r1, [r6, #0]
 800568c:	4605      	mov	r5, r0
 800568e:	b911      	cbnz	r1, 8005696 <sbrk_aligned+0x12>
 8005690:	f000 fe96 	bl	80063c0 <_sbrk_r>
 8005694:	6030      	str	r0, [r6, #0]
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 fe91 	bl	80063c0 <_sbrk_r>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d00a      	beq.n	80056b8 <sbrk_aligned+0x34>
 80056a2:	1cc4      	adds	r4, r0, #3
 80056a4:	f024 0403 	bic.w	r4, r4, #3
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d007      	beq.n	80056bc <sbrk_aligned+0x38>
 80056ac:	1a21      	subs	r1, r4, r0
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 fe86 	bl	80063c0 <_sbrk_r>
 80056b4:	3001      	adds	r0, #1
 80056b6:	d101      	bne.n	80056bc <sbrk_aligned+0x38>
 80056b8:	f04f 34ff 	mov.w	r4, #4294967295
 80056bc:	4620      	mov	r0, r4
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	200003e0 	.word	0x200003e0

080056c4 <_malloc_r>:
 80056c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c8:	1ccd      	adds	r5, r1, #3
 80056ca:	f025 0503 	bic.w	r5, r5, #3
 80056ce:	3508      	adds	r5, #8
 80056d0:	2d0c      	cmp	r5, #12
 80056d2:	bf38      	it	cc
 80056d4:	250c      	movcc	r5, #12
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	4607      	mov	r7, r0
 80056da:	db01      	blt.n	80056e0 <_malloc_r+0x1c>
 80056dc:	42a9      	cmp	r1, r5
 80056de:	d905      	bls.n	80056ec <_malloc_r+0x28>
 80056e0:	230c      	movs	r3, #12
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	2600      	movs	r6, #0
 80056e6:	4630      	mov	r0, r6
 80056e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057c0 <_malloc_r+0xfc>
 80056f0:	f000 f868 	bl	80057c4 <__malloc_lock>
 80056f4:	f8d8 3000 	ldr.w	r3, [r8]
 80056f8:	461c      	mov	r4, r3
 80056fa:	bb5c      	cbnz	r4, 8005754 <_malloc_r+0x90>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4638      	mov	r0, r7
 8005700:	f7ff ffc0 	bl	8005684 <sbrk_aligned>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	4604      	mov	r4, r0
 8005708:	d155      	bne.n	80057b6 <_malloc_r+0xf2>
 800570a:	f8d8 4000 	ldr.w	r4, [r8]
 800570e:	4626      	mov	r6, r4
 8005710:	2e00      	cmp	r6, #0
 8005712:	d145      	bne.n	80057a0 <_malloc_r+0xdc>
 8005714:	2c00      	cmp	r4, #0
 8005716:	d048      	beq.n	80057aa <_malloc_r+0xe6>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	4631      	mov	r1, r6
 800571c:	4638      	mov	r0, r7
 800571e:	eb04 0903 	add.w	r9, r4, r3
 8005722:	f000 fe4d 	bl	80063c0 <_sbrk_r>
 8005726:	4581      	cmp	r9, r0
 8005728:	d13f      	bne.n	80057aa <_malloc_r+0xe6>
 800572a:	6821      	ldr	r1, [r4, #0]
 800572c:	1a6d      	subs	r5, r5, r1
 800572e:	4629      	mov	r1, r5
 8005730:	4638      	mov	r0, r7
 8005732:	f7ff ffa7 	bl	8005684 <sbrk_aligned>
 8005736:	3001      	adds	r0, #1
 8005738:	d037      	beq.n	80057aa <_malloc_r+0xe6>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	442b      	add	r3, r5
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	f8d8 3000 	ldr.w	r3, [r8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d038      	beq.n	80057ba <_malloc_r+0xf6>
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	42a2      	cmp	r2, r4
 800574c:	d12b      	bne.n	80057a6 <_malloc_r+0xe2>
 800574e:	2200      	movs	r2, #0
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	e00f      	b.n	8005774 <_malloc_r+0xb0>
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	1b52      	subs	r2, r2, r5
 8005758:	d41f      	bmi.n	800579a <_malloc_r+0xd6>
 800575a:	2a0b      	cmp	r2, #11
 800575c:	d917      	bls.n	800578e <_malloc_r+0xca>
 800575e:	1961      	adds	r1, r4, r5
 8005760:	42a3      	cmp	r3, r4
 8005762:	6025      	str	r5, [r4, #0]
 8005764:	bf18      	it	ne
 8005766:	6059      	strne	r1, [r3, #4]
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	bf08      	it	eq
 800576c:	f8c8 1000 	streq.w	r1, [r8]
 8005770:	5162      	str	r2, [r4, r5]
 8005772:	604b      	str	r3, [r1, #4]
 8005774:	4638      	mov	r0, r7
 8005776:	f104 060b 	add.w	r6, r4, #11
 800577a:	f000 f829 	bl	80057d0 <__malloc_unlock>
 800577e:	f026 0607 	bic.w	r6, r6, #7
 8005782:	1d23      	adds	r3, r4, #4
 8005784:	1af2      	subs	r2, r6, r3
 8005786:	d0ae      	beq.n	80056e6 <_malloc_r+0x22>
 8005788:	1b9b      	subs	r3, r3, r6
 800578a:	50a3      	str	r3, [r4, r2]
 800578c:	e7ab      	b.n	80056e6 <_malloc_r+0x22>
 800578e:	42a3      	cmp	r3, r4
 8005790:	6862      	ldr	r2, [r4, #4]
 8005792:	d1dd      	bne.n	8005750 <_malloc_r+0x8c>
 8005794:	f8c8 2000 	str.w	r2, [r8]
 8005798:	e7ec      	b.n	8005774 <_malloc_r+0xb0>
 800579a:	4623      	mov	r3, r4
 800579c:	6864      	ldr	r4, [r4, #4]
 800579e:	e7ac      	b.n	80056fa <_malloc_r+0x36>
 80057a0:	4634      	mov	r4, r6
 80057a2:	6876      	ldr	r6, [r6, #4]
 80057a4:	e7b4      	b.n	8005710 <_malloc_r+0x4c>
 80057a6:	4613      	mov	r3, r2
 80057a8:	e7cc      	b.n	8005744 <_malloc_r+0x80>
 80057aa:	230c      	movs	r3, #12
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4638      	mov	r0, r7
 80057b0:	f000 f80e 	bl	80057d0 <__malloc_unlock>
 80057b4:	e797      	b.n	80056e6 <_malloc_r+0x22>
 80057b6:	6025      	str	r5, [r4, #0]
 80057b8:	e7dc      	b.n	8005774 <_malloc_r+0xb0>
 80057ba:	605b      	str	r3, [r3, #4]
 80057bc:	deff      	udf	#255	; 0xff
 80057be:	bf00      	nop
 80057c0:	200003dc 	.word	0x200003dc

080057c4 <__malloc_lock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <__malloc_lock+0x8>)
 80057c6:	f7ff b88b 	b.w	80048e0 <__retarget_lock_acquire_recursive>
 80057ca:	bf00      	nop
 80057cc:	200003d8 	.word	0x200003d8

080057d0 <__malloc_unlock>:
 80057d0:	4801      	ldr	r0, [pc, #4]	; (80057d8 <__malloc_unlock+0x8>)
 80057d2:	f7ff b886 	b.w	80048e2 <__retarget_lock_release_recursive>
 80057d6:	bf00      	nop
 80057d8:	200003d8 	.word	0x200003d8

080057dc <_Balloc>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	69c6      	ldr	r6, [r0, #28]
 80057e0:	4604      	mov	r4, r0
 80057e2:	460d      	mov	r5, r1
 80057e4:	b976      	cbnz	r6, 8005804 <_Balloc+0x28>
 80057e6:	2010      	movs	r0, #16
 80057e8:	f7ff ff44 	bl	8005674 <malloc>
 80057ec:	4602      	mov	r2, r0
 80057ee:	61e0      	str	r0, [r4, #28]
 80057f0:	b920      	cbnz	r0, 80057fc <_Balloc+0x20>
 80057f2:	4b18      	ldr	r3, [pc, #96]	; (8005854 <_Balloc+0x78>)
 80057f4:	4818      	ldr	r0, [pc, #96]	; (8005858 <_Balloc+0x7c>)
 80057f6:	216b      	movs	r1, #107	; 0x6b
 80057f8:	f000 fe00 	bl	80063fc <__assert_func>
 80057fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005800:	6006      	str	r6, [r0, #0]
 8005802:	60c6      	str	r6, [r0, #12]
 8005804:	69e6      	ldr	r6, [r4, #28]
 8005806:	68f3      	ldr	r3, [r6, #12]
 8005808:	b183      	cbz	r3, 800582c <_Balloc+0x50>
 800580a:	69e3      	ldr	r3, [r4, #28]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005812:	b9b8      	cbnz	r0, 8005844 <_Balloc+0x68>
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f605 	lsl.w	r6, r1, r5
 800581a:	1d72      	adds	r2, r6, #5
 800581c:	0092      	lsls	r2, r2, #2
 800581e:	4620      	mov	r0, r4
 8005820:	f000 fe0a 	bl	8006438 <_calloc_r>
 8005824:	b160      	cbz	r0, 8005840 <_Balloc+0x64>
 8005826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800582a:	e00e      	b.n	800584a <_Balloc+0x6e>
 800582c:	2221      	movs	r2, #33	; 0x21
 800582e:	2104      	movs	r1, #4
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fe01 	bl	8006438 <_calloc_r>
 8005836:	69e3      	ldr	r3, [r4, #28]
 8005838:	60f0      	str	r0, [r6, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e4      	bne.n	800580a <_Balloc+0x2e>
 8005840:	2000      	movs	r0, #0
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	6802      	ldr	r2, [r0, #0]
 8005846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800584a:	2300      	movs	r3, #0
 800584c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005850:	e7f7      	b.n	8005842 <_Balloc+0x66>
 8005852:	bf00      	nop
 8005854:	0800667d 	.word	0x0800667d
 8005858:	080066fd 	.word	0x080066fd

0800585c <_Bfree>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	69c6      	ldr	r6, [r0, #28]
 8005860:	4605      	mov	r5, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b976      	cbnz	r6, 8005884 <_Bfree+0x28>
 8005866:	2010      	movs	r0, #16
 8005868:	f7ff ff04 	bl	8005674 <malloc>
 800586c:	4602      	mov	r2, r0
 800586e:	61e8      	str	r0, [r5, #28]
 8005870:	b920      	cbnz	r0, 800587c <_Bfree+0x20>
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <_Bfree+0x3c>)
 8005874:	4809      	ldr	r0, [pc, #36]	; (800589c <_Bfree+0x40>)
 8005876:	218f      	movs	r1, #143	; 0x8f
 8005878:	f000 fdc0 	bl	80063fc <__assert_func>
 800587c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005880:	6006      	str	r6, [r0, #0]
 8005882:	60c6      	str	r6, [r0, #12]
 8005884:	b13c      	cbz	r4, 8005896 <_Bfree+0x3a>
 8005886:	69eb      	ldr	r3, [r5, #28]
 8005888:	6862      	ldr	r2, [r4, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005890:	6021      	str	r1, [r4, #0]
 8005892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	0800667d 	.word	0x0800667d
 800589c:	080066fd 	.word	0x080066fd

080058a0 <__multadd>:
 80058a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a4:	690d      	ldr	r5, [r1, #16]
 80058a6:	4607      	mov	r7, r0
 80058a8:	460c      	mov	r4, r1
 80058aa:	461e      	mov	r6, r3
 80058ac:	f101 0c14 	add.w	ip, r1, #20
 80058b0:	2000      	movs	r0, #0
 80058b2:	f8dc 3000 	ldr.w	r3, [ip]
 80058b6:	b299      	uxth	r1, r3
 80058b8:	fb02 6101 	mla	r1, r2, r1, r6
 80058bc:	0c1e      	lsrs	r6, r3, #16
 80058be:	0c0b      	lsrs	r3, r1, #16
 80058c0:	fb02 3306 	mla	r3, r2, r6, r3
 80058c4:	b289      	uxth	r1, r1
 80058c6:	3001      	adds	r0, #1
 80058c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80058cc:	4285      	cmp	r5, r0
 80058ce:	f84c 1b04 	str.w	r1, [ip], #4
 80058d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80058d6:	dcec      	bgt.n	80058b2 <__multadd+0x12>
 80058d8:	b30e      	cbz	r6, 800591e <__multadd+0x7e>
 80058da:	68a3      	ldr	r3, [r4, #8]
 80058dc:	42ab      	cmp	r3, r5
 80058de:	dc19      	bgt.n	8005914 <__multadd+0x74>
 80058e0:	6861      	ldr	r1, [r4, #4]
 80058e2:	4638      	mov	r0, r7
 80058e4:	3101      	adds	r1, #1
 80058e6:	f7ff ff79 	bl	80057dc <_Balloc>
 80058ea:	4680      	mov	r8, r0
 80058ec:	b928      	cbnz	r0, 80058fa <__multadd+0x5a>
 80058ee:	4602      	mov	r2, r0
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <__multadd+0x84>)
 80058f2:	480d      	ldr	r0, [pc, #52]	; (8005928 <__multadd+0x88>)
 80058f4:	21ba      	movs	r1, #186	; 0xba
 80058f6:	f000 fd81 	bl	80063fc <__assert_func>
 80058fa:	6922      	ldr	r2, [r4, #16]
 80058fc:	3202      	adds	r2, #2
 80058fe:	f104 010c 	add.w	r1, r4, #12
 8005902:	0092      	lsls	r2, r2, #2
 8005904:	300c      	adds	r0, #12
 8005906:	f000 fd6b 	bl	80063e0 <memcpy>
 800590a:	4621      	mov	r1, r4
 800590c:	4638      	mov	r0, r7
 800590e:	f7ff ffa5 	bl	800585c <_Bfree>
 8005912:	4644      	mov	r4, r8
 8005914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005918:	3501      	adds	r5, #1
 800591a:	615e      	str	r6, [r3, #20]
 800591c:	6125      	str	r5, [r4, #16]
 800591e:	4620      	mov	r0, r4
 8005920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005924:	080066ec 	.word	0x080066ec
 8005928:	080066fd 	.word	0x080066fd

0800592c <__hi0bits>:
 800592c:	0c03      	lsrs	r3, r0, #16
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	b9d3      	cbnz	r3, 8005968 <__hi0bits+0x3c>
 8005932:	0400      	lsls	r0, r0, #16
 8005934:	2310      	movs	r3, #16
 8005936:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800593a:	bf04      	itt	eq
 800593c:	0200      	lsleq	r0, r0, #8
 800593e:	3308      	addeq	r3, #8
 8005940:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005944:	bf04      	itt	eq
 8005946:	0100      	lsleq	r0, r0, #4
 8005948:	3304      	addeq	r3, #4
 800594a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800594e:	bf04      	itt	eq
 8005950:	0080      	lsleq	r0, r0, #2
 8005952:	3302      	addeq	r3, #2
 8005954:	2800      	cmp	r0, #0
 8005956:	db05      	blt.n	8005964 <__hi0bits+0x38>
 8005958:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800595c:	f103 0301 	add.w	r3, r3, #1
 8005960:	bf08      	it	eq
 8005962:	2320      	moveq	r3, #32
 8005964:	4618      	mov	r0, r3
 8005966:	4770      	bx	lr
 8005968:	2300      	movs	r3, #0
 800596a:	e7e4      	b.n	8005936 <__hi0bits+0xa>

0800596c <__lo0bits>:
 800596c:	6803      	ldr	r3, [r0, #0]
 800596e:	f013 0207 	ands.w	r2, r3, #7
 8005972:	d00c      	beq.n	800598e <__lo0bits+0x22>
 8005974:	07d9      	lsls	r1, r3, #31
 8005976:	d422      	bmi.n	80059be <__lo0bits+0x52>
 8005978:	079a      	lsls	r2, r3, #30
 800597a:	bf49      	itett	mi
 800597c:	085b      	lsrmi	r3, r3, #1
 800597e:	089b      	lsrpl	r3, r3, #2
 8005980:	6003      	strmi	r3, [r0, #0]
 8005982:	2201      	movmi	r2, #1
 8005984:	bf5c      	itt	pl
 8005986:	6003      	strpl	r3, [r0, #0]
 8005988:	2202      	movpl	r2, #2
 800598a:	4610      	mov	r0, r2
 800598c:	4770      	bx	lr
 800598e:	b299      	uxth	r1, r3
 8005990:	b909      	cbnz	r1, 8005996 <__lo0bits+0x2a>
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	2210      	movs	r2, #16
 8005996:	b2d9      	uxtb	r1, r3
 8005998:	b909      	cbnz	r1, 800599e <__lo0bits+0x32>
 800599a:	3208      	adds	r2, #8
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	0719      	lsls	r1, r3, #28
 80059a0:	bf04      	itt	eq
 80059a2:	091b      	lsreq	r3, r3, #4
 80059a4:	3204      	addeq	r2, #4
 80059a6:	0799      	lsls	r1, r3, #30
 80059a8:	bf04      	itt	eq
 80059aa:	089b      	lsreq	r3, r3, #2
 80059ac:	3202      	addeq	r2, #2
 80059ae:	07d9      	lsls	r1, r3, #31
 80059b0:	d403      	bmi.n	80059ba <__lo0bits+0x4e>
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	f102 0201 	add.w	r2, r2, #1
 80059b8:	d003      	beq.n	80059c2 <__lo0bits+0x56>
 80059ba:	6003      	str	r3, [r0, #0]
 80059bc:	e7e5      	b.n	800598a <__lo0bits+0x1e>
 80059be:	2200      	movs	r2, #0
 80059c0:	e7e3      	b.n	800598a <__lo0bits+0x1e>
 80059c2:	2220      	movs	r2, #32
 80059c4:	e7e1      	b.n	800598a <__lo0bits+0x1e>
	...

080059c8 <__i2b>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	460c      	mov	r4, r1
 80059cc:	2101      	movs	r1, #1
 80059ce:	f7ff ff05 	bl	80057dc <_Balloc>
 80059d2:	4602      	mov	r2, r0
 80059d4:	b928      	cbnz	r0, 80059e2 <__i2b+0x1a>
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <__i2b+0x24>)
 80059d8:	4805      	ldr	r0, [pc, #20]	; (80059f0 <__i2b+0x28>)
 80059da:	f240 1145 	movw	r1, #325	; 0x145
 80059de:	f000 fd0d 	bl	80063fc <__assert_func>
 80059e2:	2301      	movs	r3, #1
 80059e4:	6144      	str	r4, [r0, #20]
 80059e6:	6103      	str	r3, [r0, #16]
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	bf00      	nop
 80059ec:	080066ec 	.word	0x080066ec
 80059f0:	080066fd 	.word	0x080066fd

080059f4 <__multiply>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	4691      	mov	r9, r2
 80059fa:	690a      	ldr	r2, [r1, #16]
 80059fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	bfb8      	it	lt
 8005a04:	460b      	movlt	r3, r1
 8005a06:	460c      	mov	r4, r1
 8005a08:	bfbc      	itt	lt
 8005a0a:	464c      	movlt	r4, r9
 8005a0c:	4699      	movlt	r9, r3
 8005a0e:	6927      	ldr	r7, [r4, #16]
 8005a10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a14:	68a3      	ldr	r3, [r4, #8]
 8005a16:	6861      	ldr	r1, [r4, #4]
 8005a18:	eb07 060a 	add.w	r6, r7, sl
 8005a1c:	42b3      	cmp	r3, r6
 8005a1e:	b085      	sub	sp, #20
 8005a20:	bfb8      	it	lt
 8005a22:	3101      	addlt	r1, #1
 8005a24:	f7ff feda 	bl	80057dc <_Balloc>
 8005a28:	b930      	cbnz	r0, 8005a38 <__multiply+0x44>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	4b44      	ldr	r3, [pc, #272]	; (8005b40 <__multiply+0x14c>)
 8005a2e:	4845      	ldr	r0, [pc, #276]	; (8005b44 <__multiply+0x150>)
 8005a30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005a34:	f000 fce2 	bl	80063fc <__assert_func>
 8005a38:	f100 0514 	add.w	r5, r0, #20
 8005a3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a40:	462b      	mov	r3, r5
 8005a42:	2200      	movs	r2, #0
 8005a44:	4543      	cmp	r3, r8
 8005a46:	d321      	bcc.n	8005a8c <__multiply+0x98>
 8005a48:	f104 0314 	add.w	r3, r4, #20
 8005a4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005a50:	f109 0314 	add.w	r3, r9, #20
 8005a54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005a58:	9202      	str	r2, [sp, #8]
 8005a5a:	1b3a      	subs	r2, r7, r4
 8005a5c:	3a15      	subs	r2, #21
 8005a5e:	f022 0203 	bic.w	r2, r2, #3
 8005a62:	3204      	adds	r2, #4
 8005a64:	f104 0115 	add.w	r1, r4, #21
 8005a68:	428f      	cmp	r7, r1
 8005a6a:	bf38      	it	cc
 8005a6c:	2204      	movcc	r2, #4
 8005a6e:	9201      	str	r2, [sp, #4]
 8005a70:	9a02      	ldr	r2, [sp, #8]
 8005a72:	9303      	str	r3, [sp, #12]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d80c      	bhi.n	8005a92 <__multiply+0x9e>
 8005a78:	2e00      	cmp	r6, #0
 8005a7a:	dd03      	ble.n	8005a84 <__multiply+0x90>
 8005a7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d05b      	beq.n	8005b3c <__multiply+0x148>
 8005a84:	6106      	str	r6, [r0, #16]
 8005a86:	b005      	add	sp, #20
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	f843 2b04 	str.w	r2, [r3], #4
 8005a90:	e7d8      	b.n	8005a44 <__multiply+0x50>
 8005a92:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a96:	f1ba 0f00 	cmp.w	sl, #0
 8005a9a:	d024      	beq.n	8005ae6 <__multiply+0xf2>
 8005a9c:	f104 0e14 	add.w	lr, r4, #20
 8005aa0:	46a9      	mov	r9, r5
 8005aa2:	f04f 0c00 	mov.w	ip, #0
 8005aa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005aaa:	f8d9 1000 	ldr.w	r1, [r9]
 8005aae:	fa1f fb82 	uxth.w	fp, r2
 8005ab2:	b289      	uxth	r1, r1
 8005ab4:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ab8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005abc:	f8d9 2000 	ldr.w	r2, [r9]
 8005ac0:	4461      	add	r1, ip
 8005ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ac6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005aca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ace:	b289      	uxth	r1, r1
 8005ad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ad4:	4577      	cmp	r7, lr
 8005ad6:	f849 1b04 	str.w	r1, [r9], #4
 8005ada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ade:	d8e2      	bhi.n	8005aa6 <__multiply+0xb2>
 8005ae0:	9a01      	ldr	r2, [sp, #4]
 8005ae2:	f845 c002 	str.w	ip, [r5, r2]
 8005ae6:	9a03      	ldr	r2, [sp, #12]
 8005ae8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005aec:	3304      	adds	r3, #4
 8005aee:	f1b9 0f00 	cmp.w	r9, #0
 8005af2:	d021      	beq.n	8005b38 <__multiply+0x144>
 8005af4:	6829      	ldr	r1, [r5, #0]
 8005af6:	f104 0c14 	add.w	ip, r4, #20
 8005afa:	46ae      	mov	lr, r5
 8005afc:	f04f 0a00 	mov.w	sl, #0
 8005b00:	f8bc b000 	ldrh.w	fp, [ip]
 8005b04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b08:	fb09 220b 	mla	r2, r9, fp, r2
 8005b0c:	4452      	add	r2, sl
 8005b0e:	b289      	uxth	r1, r1
 8005b10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b14:	f84e 1b04 	str.w	r1, [lr], #4
 8005b18:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005b1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b20:	f8be 1000 	ldrh.w	r1, [lr]
 8005b24:	fb09 110a 	mla	r1, r9, sl, r1
 8005b28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005b2c:	4567      	cmp	r7, ip
 8005b2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005b32:	d8e5      	bhi.n	8005b00 <__multiply+0x10c>
 8005b34:	9a01      	ldr	r2, [sp, #4]
 8005b36:	50a9      	str	r1, [r5, r2]
 8005b38:	3504      	adds	r5, #4
 8005b3a:	e799      	b.n	8005a70 <__multiply+0x7c>
 8005b3c:	3e01      	subs	r6, #1
 8005b3e:	e79b      	b.n	8005a78 <__multiply+0x84>
 8005b40:	080066ec 	.word	0x080066ec
 8005b44:	080066fd 	.word	0x080066fd

08005b48 <__pow5mult>:
 8005b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b4c:	4615      	mov	r5, r2
 8005b4e:	f012 0203 	ands.w	r2, r2, #3
 8005b52:	4606      	mov	r6, r0
 8005b54:	460f      	mov	r7, r1
 8005b56:	d007      	beq.n	8005b68 <__pow5mult+0x20>
 8005b58:	4c25      	ldr	r4, [pc, #148]	; (8005bf0 <__pow5mult+0xa8>)
 8005b5a:	3a01      	subs	r2, #1
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b62:	f7ff fe9d 	bl	80058a0 <__multadd>
 8005b66:	4607      	mov	r7, r0
 8005b68:	10ad      	asrs	r5, r5, #2
 8005b6a:	d03d      	beq.n	8005be8 <__pow5mult+0xa0>
 8005b6c:	69f4      	ldr	r4, [r6, #28]
 8005b6e:	b97c      	cbnz	r4, 8005b90 <__pow5mult+0x48>
 8005b70:	2010      	movs	r0, #16
 8005b72:	f7ff fd7f 	bl	8005674 <malloc>
 8005b76:	4602      	mov	r2, r0
 8005b78:	61f0      	str	r0, [r6, #28]
 8005b7a:	b928      	cbnz	r0, 8005b88 <__pow5mult+0x40>
 8005b7c:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <__pow5mult+0xac>)
 8005b7e:	481e      	ldr	r0, [pc, #120]	; (8005bf8 <__pow5mult+0xb0>)
 8005b80:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005b84:	f000 fc3a 	bl	80063fc <__assert_func>
 8005b88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b8c:	6004      	str	r4, [r0, #0]
 8005b8e:	60c4      	str	r4, [r0, #12]
 8005b90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005b94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b98:	b94c      	cbnz	r4, 8005bae <__pow5mult+0x66>
 8005b9a:	f240 2171 	movw	r1, #625	; 0x271
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f7ff ff12 	bl	80059c8 <__i2b>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005baa:	4604      	mov	r4, r0
 8005bac:	6003      	str	r3, [r0, #0]
 8005bae:	f04f 0900 	mov.w	r9, #0
 8005bb2:	07eb      	lsls	r3, r5, #31
 8005bb4:	d50a      	bpl.n	8005bcc <__pow5mult+0x84>
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	4622      	mov	r2, r4
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7ff ff1a 	bl	80059f4 <__multiply>
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4680      	mov	r8, r0
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f7ff fe49 	bl	800585c <_Bfree>
 8005bca:	4647      	mov	r7, r8
 8005bcc:	106d      	asrs	r5, r5, #1
 8005bce:	d00b      	beq.n	8005be8 <__pow5mult+0xa0>
 8005bd0:	6820      	ldr	r0, [r4, #0]
 8005bd2:	b938      	cbnz	r0, 8005be4 <__pow5mult+0x9c>
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7ff ff0b 	bl	80059f4 <__multiply>
 8005bde:	6020      	str	r0, [r4, #0]
 8005be0:	f8c0 9000 	str.w	r9, [r0]
 8005be4:	4604      	mov	r4, r0
 8005be6:	e7e4      	b.n	8005bb2 <__pow5mult+0x6a>
 8005be8:	4638      	mov	r0, r7
 8005bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bee:	bf00      	nop
 8005bf0:	08006848 	.word	0x08006848
 8005bf4:	0800667d 	.word	0x0800667d
 8005bf8:	080066fd 	.word	0x080066fd

08005bfc <__lshift>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	460c      	mov	r4, r1
 8005c02:	6849      	ldr	r1, [r1, #4]
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	4691      	mov	r9, r2
 8005c10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c14:	f108 0601 	add.w	r6, r8, #1
 8005c18:	42b3      	cmp	r3, r6
 8005c1a:	db0b      	blt.n	8005c34 <__lshift+0x38>
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	f7ff fddd 	bl	80057dc <_Balloc>
 8005c22:	4605      	mov	r5, r0
 8005c24:	b948      	cbnz	r0, 8005c3a <__lshift+0x3e>
 8005c26:	4602      	mov	r2, r0
 8005c28:	4b28      	ldr	r3, [pc, #160]	; (8005ccc <__lshift+0xd0>)
 8005c2a:	4829      	ldr	r0, [pc, #164]	; (8005cd0 <__lshift+0xd4>)
 8005c2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005c30:	f000 fbe4 	bl	80063fc <__assert_func>
 8005c34:	3101      	adds	r1, #1
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	e7ee      	b.n	8005c18 <__lshift+0x1c>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f100 0114 	add.w	r1, r0, #20
 8005c40:	f100 0210 	add.w	r2, r0, #16
 8005c44:	4618      	mov	r0, r3
 8005c46:	4553      	cmp	r3, sl
 8005c48:	db33      	blt.n	8005cb2 <__lshift+0xb6>
 8005c4a:	6920      	ldr	r0, [r4, #16]
 8005c4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c50:	f104 0314 	add.w	r3, r4, #20
 8005c54:	f019 091f 	ands.w	r9, r9, #31
 8005c58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c60:	d02b      	beq.n	8005cba <__lshift+0xbe>
 8005c62:	f1c9 0e20 	rsb	lr, r9, #32
 8005c66:	468a      	mov	sl, r1
 8005c68:	2200      	movs	r2, #0
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	fa00 f009 	lsl.w	r0, r0, r9
 8005c70:	4310      	orrs	r0, r2
 8005c72:	f84a 0b04 	str.w	r0, [sl], #4
 8005c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c7a:	459c      	cmp	ip, r3
 8005c7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c80:	d8f3      	bhi.n	8005c6a <__lshift+0x6e>
 8005c82:	ebac 0304 	sub.w	r3, ip, r4
 8005c86:	3b15      	subs	r3, #21
 8005c88:	f023 0303 	bic.w	r3, r3, #3
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	f104 0015 	add.w	r0, r4, #21
 8005c92:	4584      	cmp	ip, r0
 8005c94:	bf38      	it	cc
 8005c96:	2304      	movcc	r3, #4
 8005c98:	50ca      	str	r2, [r1, r3]
 8005c9a:	b10a      	cbz	r2, 8005ca0 <__lshift+0xa4>
 8005c9c:	f108 0602 	add.w	r6, r8, #2
 8005ca0:	3e01      	subs	r6, #1
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	612e      	str	r6, [r5, #16]
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	f7ff fdd8 	bl	800585c <_Bfree>
 8005cac:	4628      	mov	r0, r5
 8005cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	e7c5      	b.n	8005c46 <__lshift+0x4a>
 8005cba:	3904      	subs	r1, #4
 8005cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cc4:	459c      	cmp	ip, r3
 8005cc6:	d8f9      	bhi.n	8005cbc <__lshift+0xc0>
 8005cc8:	e7ea      	b.n	8005ca0 <__lshift+0xa4>
 8005cca:	bf00      	nop
 8005ccc:	080066ec 	.word	0x080066ec
 8005cd0:	080066fd 	.word	0x080066fd

08005cd4 <__mcmp>:
 8005cd4:	b530      	push	{r4, r5, lr}
 8005cd6:	6902      	ldr	r2, [r0, #16]
 8005cd8:	690c      	ldr	r4, [r1, #16]
 8005cda:	1b12      	subs	r2, r2, r4
 8005cdc:	d10e      	bne.n	8005cfc <__mcmp+0x28>
 8005cde:	f100 0314 	add.w	r3, r0, #20
 8005ce2:	3114      	adds	r1, #20
 8005ce4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ce8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005cec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005cf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005cf4:	42a5      	cmp	r5, r4
 8005cf6:	d003      	beq.n	8005d00 <__mcmp+0x2c>
 8005cf8:	d305      	bcc.n	8005d06 <__mcmp+0x32>
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	bd30      	pop	{r4, r5, pc}
 8005d00:	4283      	cmp	r3, r0
 8005d02:	d3f3      	bcc.n	8005cec <__mcmp+0x18>
 8005d04:	e7fa      	b.n	8005cfc <__mcmp+0x28>
 8005d06:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0a:	e7f7      	b.n	8005cfc <__mcmp+0x28>

08005d0c <__mdiff>:
 8005d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	460c      	mov	r4, r1
 8005d12:	4606      	mov	r6, r0
 8005d14:	4611      	mov	r1, r2
 8005d16:	4620      	mov	r0, r4
 8005d18:	4690      	mov	r8, r2
 8005d1a:	f7ff ffdb 	bl	8005cd4 <__mcmp>
 8005d1e:	1e05      	subs	r5, r0, #0
 8005d20:	d110      	bne.n	8005d44 <__mdiff+0x38>
 8005d22:	4629      	mov	r1, r5
 8005d24:	4630      	mov	r0, r6
 8005d26:	f7ff fd59 	bl	80057dc <_Balloc>
 8005d2a:	b930      	cbnz	r0, 8005d3a <__mdiff+0x2e>
 8005d2c:	4b3a      	ldr	r3, [pc, #232]	; (8005e18 <__mdiff+0x10c>)
 8005d2e:	4602      	mov	r2, r0
 8005d30:	f240 2137 	movw	r1, #567	; 0x237
 8005d34:	4839      	ldr	r0, [pc, #228]	; (8005e1c <__mdiff+0x110>)
 8005d36:	f000 fb61 	bl	80063fc <__assert_func>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d44:	bfa4      	itt	ge
 8005d46:	4643      	movge	r3, r8
 8005d48:	46a0      	movge	r8, r4
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d50:	bfa6      	itte	ge
 8005d52:	461c      	movge	r4, r3
 8005d54:	2500      	movge	r5, #0
 8005d56:	2501      	movlt	r5, #1
 8005d58:	f7ff fd40 	bl	80057dc <_Balloc>
 8005d5c:	b920      	cbnz	r0, 8005d68 <__mdiff+0x5c>
 8005d5e:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <__mdiff+0x10c>)
 8005d60:	4602      	mov	r2, r0
 8005d62:	f240 2145 	movw	r1, #581	; 0x245
 8005d66:	e7e5      	b.n	8005d34 <__mdiff+0x28>
 8005d68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d6c:	6926      	ldr	r6, [r4, #16]
 8005d6e:	60c5      	str	r5, [r0, #12]
 8005d70:	f104 0914 	add.w	r9, r4, #20
 8005d74:	f108 0514 	add.w	r5, r8, #20
 8005d78:	f100 0e14 	add.w	lr, r0, #20
 8005d7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005d80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005d84:	f108 0210 	add.w	r2, r8, #16
 8005d88:	46f2      	mov	sl, lr
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d94:	fa11 f88b 	uxtah	r8, r1, fp
 8005d98:	b299      	uxth	r1, r3
 8005d9a:	0c1b      	lsrs	r3, r3, #16
 8005d9c:	eba8 0801 	sub.w	r8, r8, r1
 8005da0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005da4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005da8:	fa1f f888 	uxth.w	r8, r8
 8005dac:	1419      	asrs	r1, r3, #16
 8005dae:	454e      	cmp	r6, r9
 8005db0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005db4:	f84a 3b04 	str.w	r3, [sl], #4
 8005db8:	d8e8      	bhi.n	8005d8c <__mdiff+0x80>
 8005dba:	1b33      	subs	r3, r6, r4
 8005dbc:	3b15      	subs	r3, #21
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	3415      	adds	r4, #21
 8005dc6:	42a6      	cmp	r6, r4
 8005dc8:	bf38      	it	cc
 8005dca:	2304      	movcc	r3, #4
 8005dcc:	441d      	add	r5, r3
 8005dce:	4473      	add	r3, lr
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	462e      	mov	r6, r5
 8005dd4:	4566      	cmp	r6, ip
 8005dd6:	d30e      	bcc.n	8005df6 <__mdiff+0xea>
 8005dd8:	f10c 0203 	add.w	r2, ip, #3
 8005ddc:	1b52      	subs	r2, r2, r5
 8005dde:	f022 0203 	bic.w	r2, r2, #3
 8005de2:	3d03      	subs	r5, #3
 8005de4:	45ac      	cmp	ip, r5
 8005de6:	bf38      	it	cc
 8005de8:	2200      	movcc	r2, #0
 8005dea:	4413      	add	r3, r2
 8005dec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005df0:	b17a      	cbz	r2, 8005e12 <__mdiff+0x106>
 8005df2:	6107      	str	r7, [r0, #16]
 8005df4:	e7a4      	b.n	8005d40 <__mdiff+0x34>
 8005df6:	f856 8b04 	ldr.w	r8, [r6], #4
 8005dfa:	fa11 f288 	uxtah	r2, r1, r8
 8005dfe:	1414      	asrs	r4, r2, #16
 8005e00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e04:	b292      	uxth	r2, r2
 8005e06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005e0a:	f84e 2b04 	str.w	r2, [lr], #4
 8005e0e:	1421      	asrs	r1, r4, #16
 8005e10:	e7e0      	b.n	8005dd4 <__mdiff+0xc8>
 8005e12:	3f01      	subs	r7, #1
 8005e14:	e7ea      	b.n	8005dec <__mdiff+0xe0>
 8005e16:	bf00      	nop
 8005e18:	080066ec 	.word	0x080066ec
 8005e1c:	080066fd 	.word	0x080066fd

08005e20 <__d2b>:
 8005e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e24:	460f      	mov	r7, r1
 8005e26:	2101      	movs	r1, #1
 8005e28:	ec59 8b10 	vmov	r8, r9, d0
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	f7ff fcd5 	bl	80057dc <_Balloc>
 8005e32:	4604      	mov	r4, r0
 8005e34:	b930      	cbnz	r0, 8005e44 <__d2b+0x24>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <__d2b+0xac>)
 8005e3a:	4825      	ldr	r0, [pc, #148]	; (8005ed0 <__d2b+0xb0>)
 8005e3c:	f240 310f 	movw	r1, #783	; 0x30f
 8005e40:	f000 fadc 	bl	80063fc <__assert_func>
 8005e44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e4c:	bb2d      	cbnz	r5, 8005e9a <__d2b+0x7a>
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	f1b8 0300 	subs.w	r3, r8, #0
 8005e54:	d026      	beq.n	8005ea4 <__d2b+0x84>
 8005e56:	4668      	mov	r0, sp
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	f7ff fd87 	bl	800596c <__lo0bits>
 8005e5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e62:	b1e8      	cbz	r0, 8005ea0 <__d2b+0x80>
 8005e64:	f1c0 0320 	rsb	r3, r0, #32
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	40c2      	lsrs	r2, r0
 8005e70:	6163      	str	r3, [r4, #20]
 8005e72:	9201      	str	r2, [sp, #4]
 8005e74:	9b01      	ldr	r3, [sp, #4]
 8005e76:	61a3      	str	r3, [r4, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf14      	ite	ne
 8005e7c:	2202      	movne	r2, #2
 8005e7e:	2201      	moveq	r2, #1
 8005e80:	6122      	str	r2, [r4, #16]
 8005e82:	b1bd      	cbz	r5, 8005eb4 <__d2b+0x94>
 8005e84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005e88:	4405      	add	r5, r0
 8005e8a:	603d      	str	r5, [r7, #0]
 8005e8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e90:	6030      	str	r0, [r6, #0]
 8005e92:	4620      	mov	r0, r4
 8005e94:	b003      	add	sp, #12
 8005e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e9e:	e7d6      	b.n	8005e4e <__d2b+0x2e>
 8005ea0:	6161      	str	r1, [r4, #20]
 8005ea2:	e7e7      	b.n	8005e74 <__d2b+0x54>
 8005ea4:	a801      	add	r0, sp, #4
 8005ea6:	f7ff fd61 	bl	800596c <__lo0bits>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	6163      	str	r3, [r4, #20]
 8005eae:	3020      	adds	r0, #32
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	e7e5      	b.n	8005e80 <__d2b+0x60>
 8005eb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005eb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ebc:	6038      	str	r0, [r7, #0]
 8005ebe:	6918      	ldr	r0, [r3, #16]
 8005ec0:	f7ff fd34 	bl	800592c <__hi0bits>
 8005ec4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ec8:	e7e2      	b.n	8005e90 <__d2b+0x70>
 8005eca:	bf00      	nop
 8005ecc:	080066ec 	.word	0x080066ec
 8005ed0:	080066fd 	.word	0x080066fd

08005ed4 <__sfputc_r>:
 8005ed4:	6893      	ldr	r3, [r2, #8]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	b410      	push	{r4}
 8005edc:	6093      	str	r3, [r2, #8]
 8005ede:	da08      	bge.n	8005ef2 <__sfputc_r+0x1e>
 8005ee0:	6994      	ldr	r4, [r2, #24]
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	db01      	blt.n	8005eea <__sfputc_r+0x16>
 8005ee6:	290a      	cmp	r1, #10
 8005ee8:	d103      	bne.n	8005ef2 <__sfputc_r+0x1e>
 8005eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eee:	f7fe bbe6 	b.w	80046be <__swbuf_r>
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	1c58      	adds	r0, r3, #1
 8005ef6:	6010      	str	r0, [r2, #0]
 8005ef8:	7019      	strb	r1, [r3, #0]
 8005efa:	4608      	mov	r0, r1
 8005efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <__sfputs_r>:
 8005f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f04:	4606      	mov	r6, r0
 8005f06:	460f      	mov	r7, r1
 8005f08:	4614      	mov	r4, r2
 8005f0a:	18d5      	adds	r5, r2, r3
 8005f0c:	42ac      	cmp	r4, r5
 8005f0e:	d101      	bne.n	8005f14 <__sfputs_r+0x12>
 8005f10:	2000      	movs	r0, #0
 8005f12:	e007      	b.n	8005f24 <__sfputs_r+0x22>
 8005f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f18:	463a      	mov	r2, r7
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f7ff ffda 	bl	8005ed4 <__sfputc_r>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d1f3      	bne.n	8005f0c <__sfputs_r+0xa>
 8005f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f28 <_vfiprintf_r>:
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	460d      	mov	r5, r1
 8005f2e:	b09d      	sub	sp, #116	; 0x74
 8005f30:	4614      	mov	r4, r2
 8005f32:	4698      	mov	r8, r3
 8005f34:	4606      	mov	r6, r0
 8005f36:	b118      	cbz	r0, 8005f40 <_vfiprintf_r+0x18>
 8005f38:	6a03      	ldr	r3, [r0, #32]
 8005f3a:	b90b      	cbnz	r3, 8005f40 <_vfiprintf_r+0x18>
 8005f3c:	f7fe fad8 	bl	80044f0 <__sinit>
 8005f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f42:	07d9      	lsls	r1, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_vfiprintf_r+0x2a>
 8005f46:	89ab      	ldrh	r3, [r5, #12]
 8005f48:	059a      	lsls	r2, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_vfiprintf_r+0x2a>
 8005f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f4e:	f7fe fcc7 	bl	80048e0 <__retarget_lock_acquire_recursive>
 8005f52:	89ab      	ldrh	r3, [r5, #12]
 8005f54:	071b      	lsls	r3, r3, #28
 8005f56:	d501      	bpl.n	8005f5c <_vfiprintf_r+0x34>
 8005f58:	692b      	ldr	r3, [r5, #16]
 8005f5a:	b99b      	cbnz	r3, 8005f84 <_vfiprintf_r+0x5c>
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f7fe fbea 	bl	8004738 <__swsetup_r>
 8005f64:	b170      	cbz	r0, 8005f84 <_vfiprintf_r+0x5c>
 8005f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f68:	07dc      	lsls	r4, r3, #31
 8005f6a:	d504      	bpl.n	8005f76 <_vfiprintf_r+0x4e>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	b01d      	add	sp, #116	; 0x74
 8005f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f76:	89ab      	ldrh	r3, [r5, #12]
 8005f78:	0598      	lsls	r0, r3, #22
 8005f7a:	d4f7      	bmi.n	8005f6c <_vfiprintf_r+0x44>
 8005f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f7e:	f7fe fcb0 	bl	80048e2 <__retarget_lock_release_recursive>
 8005f82:	e7f3      	b.n	8005f6c <_vfiprintf_r+0x44>
 8005f84:	2300      	movs	r3, #0
 8005f86:	9309      	str	r3, [sp, #36]	; 0x24
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f92:	2330      	movs	r3, #48	; 0x30
 8005f94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006148 <_vfiprintf_r+0x220>
 8005f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f9c:	f04f 0901 	mov.w	r9, #1
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	469a      	mov	sl, r3
 8005fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fa8:	b10a      	cbz	r2, 8005fae <_vfiprintf_r+0x86>
 8005faa:	2a25      	cmp	r2, #37	; 0x25
 8005fac:	d1f9      	bne.n	8005fa2 <_vfiprintf_r+0x7a>
 8005fae:	ebba 0b04 	subs.w	fp, sl, r4
 8005fb2:	d00b      	beq.n	8005fcc <_vfiprintf_r+0xa4>
 8005fb4:	465b      	mov	r3, fp
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f7ff ffa1 	bl	8005f02 <__sfputs_r>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f000 80a9 	beq.w	8006118 <_vfiprintf_r+0x1f0>
 8005fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc8:	445a      	add	r2, fp
 8005fca:	9209      	str	r2, [sp, #36]	; 0x24
 8005fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80a1 	beq.w	8006118 <_vfiprintf_r+0x1f0>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fe0:	f10a 0a01 	add.w	sl, sl, #1
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	9307      	str	r3, [sp, #28]
 8005fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fec:	931a      	str	r3, [sp, #104]	; 0x68
 8005fee:	4654      	mov	r4, sl
 8005ff0:	2205      	movs	r2, #5
 8005ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff6:	4854      	ldr	r0, [pc, #336]	; (8006148 <_vfiprintf_r+0x220>)
 8005ff8:	f7fa f8ea 	bl	80001d0 <memchr>
 8005ffc:	9a04      	ldr	r2, [sp, #16]
 8005ffe:	b9d8      	cbnz	r0, 8006038 <_vfiprintf_r+0x110>
 8006000:	06d1      	lsls	r1, r2, #27
 8006002:	bf44      	itt	mi
 8006004:	2320      	movmi	r3, #32
 8006006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800600a:	0713      	lsls	r3, r2, #28
 800600c:	bf44      	itt	mi
 800600e:	232b      	movmi	r3, #43	; 0x2b
 8006010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006014:	f89a 3000 	ldrb.w	r3, [sl]
 8006018:	2b2a      	cmp	r3, #42	; 0x2a
 800601a:	d015      	beq.n	8006048 <_vfiprintf_r+0x120>
 800601c:	9a07      	ldr	r2, [sp, #28]
 800601e:	4654      	mov	r4, sl
 8006020:	2000      	movs	r0, #0
 8006022:	f04f 0c0a 	mov.w	ip, #10
 8006026:	4621      	mov	r1, r4
 8006028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800602c:	3b30      	subs	r3, #48	; 0x30
 800602e:	2b09      	cmp	r3, #9
 8006030:	d94d      	bls.n	80060ce <_vfiprintf_r+0x1a6>
 8006032:	b1b0      	cbz	r0, 8006062 <_vfiprintf_r+0x13a>
 8006034:	9207      	str	r2, [sp, #28]
 8006036:	e014      	b.n	8006062 <_vfiprintf_r+0x13a>
 8006038:	eba0 0308 	sub.w	r3, r0, r8
 800603c:	fa09 f303 	lsl.w	r3, r9, r3
 8006040:	4313      	orrs	r3, r2
 8006042:	9304      	str	r3, [sp, #16]
 8006044:	46a2      	mov	sl, r4
 8006046:	e7d2      	b.n	8005fee <_vfiprintf_r+0xc6>
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	1d19      	adds	r1, r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	9103      	str	r1, [sp, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	bfbb      	ittet	lt
 8006054:	425b      	neglt	r3, r3
 8006056:	f042 0202 	orrlt.w	r2, r2, #2
 800605a:	9307      	strge	r3, [sp, #28]
 800605c:	9307      	strlt	r3, [sp, #28]
 800605e:	bfb8      	it	lt
 8006060:	9204      	strlt	r2, [sp, #16]
 8006062:	7823      	ldrb	r3, [r4, #0]
 8006064:	2b2e      	cmp	r3, #46	; 0x2e
 8006066:	d10c      	bne.n	8006082 <_vfiprintf_r+0x15a>
 8006068:	7863      	ldrb	r3, [r4, #1]
 800606a:	2b2a      	cmp	r3, #42	; 0x2a
 800606c:	d134      	bne.n	80060d8 <_vfiprintf_r+0x1b0>
 800606e:	9b03      	ldr	r3, [sp, #12]
 8006070:	1d1a      	adds	r2, r3, #4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	9203      	str	r2, [sp, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfb8      	it	lt
 800607a:	f04f 33ff 	movlt.w	r3, #4294967295
 800607e:	3402      	adds	r4, #2
 8006080:	9305      	str	r3, [sp, #20]
 8006082:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006158 <_vfiprintf_r+0x230>
 8006086:	7821      	ldrb	r1, [r4, #0]
 8006088:	2203      	movs	r2, #3
 800608a:	4650      	mov	r0, sl
 800608c:	f7fa f8a0 	bl	80001d0 <memchr>
 8006090:	b138      	cbz	r0, 80060a2 <_vfiprintf_r+0x17a>
 8006092:	9b04      	ldr	r3, [sp, #16]
 8006094:	eba0 000a 	sub.w	r0, r0, sl
 8006098:	2240      	movs	r2, #64	; 0x40
 800609a:	4082      	lsls	r2, r0
 800609c:	4313      	orrs	r3, r2
 800609e:	3401      	adds	r4, #1
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a6:	4829      	ldr	r0, [pc, #164]	; (800614c <_vfiprintf_r+0x224>)
 80060a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ac:	2206      	movs	r2, #6
 80060ae:	f7fa f88f 	bl	80001d0 <memchr>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d03f      	beq.n	8006136 <_vfiprintf_r+0x20e>
 80060b6:	4b26      	ldr	r3, [pc, #152]	; (8006150 <_vfiprintf_r+0x228>)
 80060b8:	bb1b      	cbnz	r3, 8006102 <_vfiprintf_r+0x1da>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	3307      	adds	r3, #7
 80060be:	f023 0307 	bic.w	r3, r3, #7
 80060c2:	3308      	adds	r3, #8
 80060c4:	9303      	str	r3, [sp, #12]
 80060c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c8:	443b      	add	r3, r7
 80060ca:	9309      	str	r3, [sp, #36]	; 0x24
 80060cc:	e768      	b.n	8005fa0 <_vfiprintf_r+0x78>
 80060ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80060d2:	460c      	mov	r4, r1
 80060d4:	2001      	movs	r0, #1
 80060d6:	e7a6      	b.n	8006026 <_vfiprintf_r+0xfe>
 80060d8:	2300      	movs	r3, #0
 80060da:	3401      	adds	r4, #1
 80060dc:	9305      	str	r3, [sp, #20]
 80060de:	4619      	mov	r1, r3
 80060e0:	f04f 0c0a 	mov.w	ip, #10
 80060e4:	4620      	mov	r0, r4
 80060e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ea:	3a30      	subs	r2, #48	; 0x30
 80060ec:	2a09      	cmp	r2, #9
 80060ee:	d903      	bls.n	80060f8 <_vfiprintf_r+0x1d0>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0c6      	beq.n	8006082 <_vfiprintf_r+0x15a>
 80060f4:	9105      	str	r1, [sp, #20]
 80060f6:	e7c4      	b.n	8006082 <_vfiprintf_r+0x15a>
 80060f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80060fc:	4604      	mov	r4, r0
 80060fe:	2301      	movs	r3, #1
 8006100:	e7f0      	b.n	80060e4 <_vfiprintf_r+0x1bc>
 8006102:	ab03      	add	r3, sp, #12
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	462a      	mov	r2, r5
 8006108:	4b12      	ldr	r3, [pc, #72]	; (8006154 <_vfiprintf_r+0x22c>)
 800610a:	a904      	add	r1, sp, #16
 800610c:	4630      	mov	r0, r6
 800610e:	f7fd fdaf 	bl	8003c70 <_printf_float>
 8006112:	4607      	mov	r7, r0
 8006114:	1c78      	adds	r0, r7, #1
 8006116:	d1d6      	bne.n	80060c6 <_vfiprintf_r+0x19e>
 8006118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800611a:	07d9      	lsls	r1, r3, #31
 800611c:	d405      	bmi.n	800612a <_vfiprintf_r+0x202>
 800611e:	89ab      	ldrh	r3, [r5, #12]
 8006120:	059a      	lsls	r2, r3, #22
 8006122:	d402      	bmi.n	800612a <_vfiprintf_r+0x202>
 8006124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006126:	f7fe fbdc 	bl	80048e2 <__retarget_lock_release_recursive>
 800612a:	89ab      	ldrh	r3, [r5, #12]
 800612c:	065b      	lsls	r3, r3, #25
 800612e:	f53f af1d 	bmi.w	8005f6c <_vfiprintf_r+0x44>
 8006132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006134:	e71c      	b.n	8005f70 <_vfiprintf_r+0x48>
 8006136:	ab03      	add	r3, sp, #12
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	462a      	mov	r2, r5
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <_vfiprintf_r+0x22c>)
 800613e:	a904      	add	r1, sp, #16
 8006140:	4630      	mov	r0, r6
 8006142:	f7fe f839 	bl	80041b8 <_printf_i>
 8006146:	e7e4      	b.n	8006112 <_vfiprintf_r+0x1ea>
 8006148:	08006854 	.word	0x08006854
 800614c:	0800685e 	.word	0x0800685e
 8006150:	08003c71 	.word	0x08003c71
 8006154:	08005f03 	.word	0x08005f03
 8006158:	0800685a 	.word	0x0800685a

0800615c <__sflush_r>:
 800615c:	898a      	ldrh	r2, [r1, #12]
 800615e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	4605      	mov	r5, r0
 8006164:	0710      	lsls	r0, r2, #28
 8006166:	460c      	mov	r4, r1
 8006168:	d458      	bmi.n	800621c <__sflush_r+0xc0>
 800616a:	684b      	ldr	r3, [r1, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dc05      	bgt.n	800617c <__sflush_r+0x20>
 8006170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	dc02      	bgt.n	800617c <__sflush_r+0x20>
 8006176:	2000      	movs	r0, #0
 8006178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800617c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800617e:	2e00      	cmp	r6, #0
 8006180:	d0f9      	beq.n	8006176 <__sflush_r+0x1a>
 8006182:	2300      	movs	r3, #0
 8006184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006188:	682f      	ldr	r7, [r5, #0]
 800618a:	6a21      	ldr	r1, [r4, #32]
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	d032      	beq.n	80061f6 <__sflush_r+0x9a>
 8006190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	075a      	lsls	r2, r3, #29
 8006196:	d505      	bpl.n	80061a4 <__sflush_r+0x48>
 8006198:	6863      	ldr	r3, [r4, #4]
 800619a:	1ac0      	subs	r0, r0, r3
 800619c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800619e:	b10b      	cbz	r3, 80061a4 <__sflush_r+0x48>
 80061a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061a2:	1ac0      	subs	r0, r0, r3
 80061a4:	2300      	movs	r3, #0
 80061a6:	4602      	mov	r2, r0
 80061a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061aa:	6a21      	ldr	r1, [r4, #32]
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b0      	blx	r6
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	d106      	bne.n	80061c4 <__sflush_r+0x68>
 80061b6:	6829      	ldr	r1, [r5, #0]
 80061b8:	291d      	cmp	r1, #29
 80061ba:	d82b      	bhi.n	8006214 <__sflush_r+0xb8>
 80061bc:	4a29      	ldr	r2, [pc, #164]	; (8006264 <__sflush_r+0x108>)
 80061be:	410a      	asrs	r2, r1
 80061c0:	07d6      	lsls	r6, r2, #31
 80061c2:	d427      	bmi.n	8006214 <__sflush_r+0xb8>
 80061c4:	2200      	movs	r2, #0
 80061c6:	6062      	str	r2, [r4, #4]
 80061c8:	04d9      	lsls	r1, r3, #19
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	6022      	str	r2, [r4, #0]
 80061ce:	d504      	bpl.n	80061da <__sflush_r+0x7e>
 80061d0:	1c42      	adds	r2, r0, #1
 80061d2:	d101      	bne.n	80061d8 <__sflush_r+0x7c>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b903      	cbnz	r3, 80061da <__sflush_r+0x7e>
 80061d8:	6560      	str	r0, [r4, #84]	; 0x54
 80061da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061dc:	602f      	str	r7, [r5, #0]
 80061de:	2900      	cmp	r1, #0
 80061e0:	d0c9      	beq.n	8006176 <__sflush_r+0x1a>
 80061e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e6:	4299      	cmp	r1, r3
 80061e8:	d002      	beq.n	80061f0 <__sflush_r+0x94>
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7ff f9f6 	bl	80055dc <_free_r>
 80061f0:	2000      	movs	r0, #0
 80061f2:	6360      	str	r0, [r4, #52]	; 0x34
 80061f4:	e7c0      	b.n	8006178 <__sflush_r+0x1c>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b0      	blx	r6
 80061fc:	1c41      	adds	r1, r0, #1
 80061fe:	d1c8      	bne.n	8006192 <__sflush_r+0x36>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c5      	beq.n	8006192 <__sflush_r+0x36>
 8006206:	2b1d      	cmp	r3, #29
 8006208:	d001      	beq.n	800620e <__sflush_r+0xb2>
 800620a:	2b16      	cmp	r3, #22
 800620c:	d101      	bne.n	8006212 <__sflush_r+0xb6>
 800620e:	602f      	str	r7, [r5, #0]
 8006210:	e7b1      	b.n	8006176 <__sflush_r+0x1a>
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	e7ad      	b.n	8006178 <__sflush_r+0x1c>
 800621c:	690f      	ldr	r7, [r1, #16]
 800621e:	2f00      	cmp	r7, #0
 8006220:	d0a9      	beq.n	8006176 <__sflush_r+0x1a>
 8006222:	0793      	lsls	r3, r2, #30
 8006224:	680e      	ldr	r6, [r1, #0]
 8006226:	bf08      	it	eq
 8006228:	694b      	ldreq	r3, [r1, #20]
 800622a:	600f      	str	r7, [r1, #0]
 800622c:	bf18      	it	ne
 800622e:	2300      	movne	r3, #0
 8006230:	eba6 0807 	sub.w	r8, r6, r7
 8006234:	608b      	str	r3, [r1, #8]
 8006236:	f1b8 0f00 	cmp.w	r8, #0
 800623a:	dd9c      	ble.n	8006176 <__sflush_r+0x1a>
 800623c:	6a21      	ldr	r1, [r4, #32]
 800623e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006240:	4643      	mov	r3, r8
 8006242:	463a      	mov	r2, r7
 8006244:	4628      	mov	r0, r5
 8006246:	47b0      	blx	r6
 8006248:	2800      	cmp	r0, #0
 800624a:	dc06      	bgt.n	800625a <__sflush_r+0xfe>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006252:	81a3      	strh	r3, [r4, #12]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	e78e      	b.n	8006178 <__sflush_r+0x1c>
 800625a:	4407      	add	r7, r0
 800625c:	eba8 0800 	sub.w	r8, r8, r0
 8006260:	e7e9      	b.n	8006236 <__sflush_r+0xda>
 8006262:	bf00      	nop
 8006264:	dfbffffe 	.word	0xdfbffffe

08006268 <_fflush_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	690b      	ldr	r3, [r1, #16]
 800626c:	4605      	mov	r5, r0
 800626e:	460c      	mov	r4, r1
 8006270:	b913      	cbnz	r3, 8006278 <_fflush_r+0x10>
 8006272:	2500      	movs	r5, #0
 8006274:	4628      	mov	r0, r5
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	b118      	cbz	r0, 8006282 <_fflush_r+0x1a>
 800627a:	6a03      	ldr	r3, [r0, #32]
 800627c:	b90b      	cbnz	r3, 8006282 <_fflush_r+0x1a>
 800627e:	f7fe f937 	bl	80044f0 <__sinit>
 8006282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f3      	beq.n	8006272 <_fflush_r+0xa>
 800628a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800628c:	07d0      	lsls	r0, r2, #31
 800628e:	d404      	bmi.n	800629a <_fflush_r+0x32>
 8006290:	0599      	lsls	r1, r3, #22
 8006292:	d402      	bmi.n	800629a <_fflush_r+0x32>
 8006294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006296:	f7fe fb23 	bl	80048e0 <__retarget_lock_acquire_recursive>
 800629a:	4628      	mov	r0, r5
 800629c:	4621      	mov	r1, r4
 800629e:	f7ff ff5d 	bl	800615c <__sflush_r>
 80062a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062a4:	07da      	lsls	r2, r3, #31
 80062a6:	4605      	mov	r5, r0
 80062a8:	d4e4      	bmi.n	8006274 <_fflush_r+0xc>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	059b      	lsls	r3, r3, #22
 80062ae:	d4e1      	bmi.n	8006274 <_fflush_r+0xc>
 80062b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b2:	f7fe fb16 	bl	80048e2 <__retarget_lock_release_recursive>
 80062b6:	e7dd      	b.n	8006274 <_fflush_r+0xc>

080062b8 <__swhatbuf_r>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	460c      	mov	r4, r1
 80062bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c0:	2900      	cmp	r1, #0
 80062c2:	b096      	sub	sp, #88	; 0x58
 80062c4:	4615      	mov	r5, r2
 80062c6:	461e      	mov	r6, r3
 80062c8:	da0d      	bge.n	80062e6 <__swhatbuf_r+0x2e>
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062d0:	f04f 0100 	mov.w	r1, #0
 80062d4:	bf0c      	ite	eq
 80062d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80062da:	2340      	movne	r3, #64	; 0x40
 80062dc:	2000      	movs	r0, #0
 80062de:	6031      	str	r1, [r6, #0]
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	b016      	add	sp, #88	; 0x58
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	466a      	mov	r2, sp
 80062e8:	f000 f848 	bl	800637c <_fstat_r>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	dbec      	blt.n	80062ca <__swhatbuf_r+0x12>
 80062f0:	9901      	ldr	r1, [sp, #4]
 80062f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80062f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80062fa:	4259      	negs	r1, r3
 80062fc:	4159      	adcs	r1, r3
 80062fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006302:	e7eb      	b.n	80062dc <__swhatbuf_r+0x24>

08006304 <__smakebuf_r>:
 8006304:	898b      	ldrh	r3, [r1, #12]
 8006306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006308:	079d      	lsls	r5, r3, #30
 800630a:	4606      	mov	r6, r0
 800630c:	460c      	mov	r4, r1
 800630e:	d507      	bpl.n	8006320 <__smakebuf_r+0x1c>
 8006310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	2301      	movs	r3, #1
 800631a:	6163      	str	r3, [r4, #20]
 800631c:	b002      	add	sp, #8
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	ab01      	add	r3, sp, #4
 8006322:	466a      	mov	r2, sp
 8006324:	f7ff ffc8 	bl	80062b8 <__swhatbuf_r>
 8006328:	9900      	ldr	r1, [sp, #0]
 800632a:	4605      	mov	r5, r0
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff f9c9 	bl	80056c4 <_malloc_r>
 8006332:	b948      	cbnz	r0, 8006348 <__smakebuf_r+0x44>
 8006334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006338:	059a      	lsls	r2, r3, #22
 800633a:	d4ef      	bmi.n	800631c <__smakebuf_r+0x18>
 800633c:	f023 0303 	bic.w	r3, r3, #3
 8006340:	f043 0302 	orr.w	r3, r3, #2
 8006344:	81a3      	strh	r3, [r4, #12]
 8006346:	e7e3      	b.n	8006310 <__smakebuf_r+0xc>
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	6020      	str	r0, [r4, #0]
 800634c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006350:	81a3      	strh	r3, [r4, #12]
 8006352:	9b00      	ldr	r3, [sp, #0]
 8006354:	6163      	str	r3, [r4, #20]
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	6120      	str	r0, [r4, #16]
 800635a:	b15b      	cbz	r3, 8006374 <__smakebuf_r+0x70>
 800635c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006360:	4630      	mov	r0, r6
 8006362:	f000 f81d 	bl	80063a0 <_isatty_r>
 8006366:	b128      	cbz	r0, 8006374 <__smakebuf_r+0x70>
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	f023 0303 	bic.w	r3, r3, #3
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	81a3      	strh	r3, [r4, #12]
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	431d      	orrs	r5, r3
 8006378:	81a5      	strh	r5, [r4, #12]
 800637a:	e7cf      	b.n	800631c <__smakebuf_r+0x18>

0800637c <_fstat_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d07      	ldr	r5, [pc, #28]	; (800639c <_fstat_r+0x20>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	4611      	mov	r1, r2
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	f7fb fa28 	bl	80017de <_fstat>
 800638e:	1c43      	adds	r3, r0, #1
 8006390:	d102      	bne.n	8006398 <_fstat_r+0x1c>
 8006392:	682b      	ldr	r3, [r5, #0]
 8006394:	b103      	cbz	r3, 8006398 <_fstat_r+0x1c>
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	bd38      	pop	{r3, r4, r5, pc}
 800639a:	bf00      	nop
 800639c:	200003d4 	.word	0x200003d4

080063a0 <_isatty_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	; (80063bc <_isatty_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fb fa27 	bl	80017fe <_isatty>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_isatty_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_isatty_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	200003d4 	.word	0x200003d4

080063c0 <_sbrk_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d06      	ldr	r5, [pc, #24]	; (80063dc <_sbrk_r+0x1c>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fb fa30 	bl	8001830 <_sbrk>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_sbrk_r+0x1a>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_sbrk_r+0x1a>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	200003d4 	.word	0x200003d4

080063e0 <memcpy>:
 80063e0:	440a      	add	r2, r1
 80063e2:	4291      	cmp	r1, r2
 80063e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e8:	d100      	bne.n	80063ec <memcpy+0xc>
 80063ea:	4770      	bx	lr
 80063ec:	b510      	push	{r4, lr}
 80063ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f6:	4291      	cmp	r1, r2
 80063f8:	d1f9      	bne.n	80063ee <memcpy+0xe>
 80063fa:	bd10      	pop	{r4, pc}

080063fc <__assert_func>:
 80063fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063fe:	4614      	mov	r4, r2
 8006400:	461a      	mov	r2, r3
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <__assert_func+0x2c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4605      	mov	r5, r0
 8006408:	68d8      	ldr	r0, [r3, #12]
 800640a:	b14c      	cbz	r4, 8006420 <__assert_func+0x24>
 800640c:	4b07      	ldr	r3, [pc, #28]	; (800642c <__assert_func+0x30>)
 800640e:	9100      	str	r1, [sp, #0]
 8006410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006414:	4906      	ldr	r1, [pc, #24]	; (8006430 <__assert_func+0x34>)
 8006416:	462b      	mov	r3, r5
 8006418:	f000 f844 	bl	80064a4 <fiprintf>
 800641c:	f000 f854 	bl	80064c8 <abort>
 8006420:	4b04      	ldr	r3, [pc, #16]	; (8006434 <__assert_func+0x38>)
 8006422:	461c      	mov	r4, r3
 8006424:	e7f3      	b.n	800640e <__assert_func+0x12>
 8006426:	bf00      	nop
 8006428:	20000064 	.word	0x20000064
 800642c:	0800686f 	.word	0x0800686f
 8006430:	0800687c 	.word	0x0800687c
 8006434:	080068aa 	.word	0x080068aa

08006438 <_calloc_r>:
 8006438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800643a:	fba1 2402 	umull	r2, r4, r1, r2
 800643e:	b94c      	cbnz	r4, 8006454 <_calloc_r+0x1c>
 8006440:	4611      	mov	r1, r2
 8006442:	9201      	str	r2, [sp, #4]
 8006444:	f7ff f93e 	bl	80056c4 <_malloc_r>
 8006448:	9a01      	ldr	r2, [sp, #4]
 800644a:	4605      	mov	r5, r0
 800644c:	b930      	cbnz	r0, 800645c <_calloc_r+0x24>
 800644e:	4628      	mov	r0, r5
 8006450:	b003      	add	sp, #12
 8006452:	bd30      	pop	{r4, r5, pc}
 8006454:	220c      	movs	r2, #12
 8006456:	6002      	str	r2, [r0, #0]
 8006458:	2500      	movs	r5, #0
 800645a:	e7f8      	b.n	800644e <_calloc_r+0x16>
 800645c:	4621      	mov	r1, r4
 800645e:	f7fe f9c3 	bl	80047e8 <memset>
 8006462:	e7f4      	b.n	800644e <_calloc_r+0x16>

08006464 <__ascii_mbtowc>:
 8006464:	b082      	sub	sp, #8
 8006466:	b901      	cbnz	r1, 800646a <__ascii_mbtowc+0x6>
 8006468:	a901      	add	r1, sp, #4
 800646a:	b142      	cbz	r2, 800647e <__ascii_mbtowc+0x1a>
 800646c:	b14b      	cbz	r3, 8006482 <__ascii_mbtowc+0x1e>
 800646e:	7813      	ldrb	r3, [r2, #0]
 8006470:	600b      	str	r3, [r1, #0]
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	1e10      	subs	r0, r2, #0
 8006476:	bf18      	it	ne
 8006478:	2001      	movne	r0, #1
 800647a:	b002      	add	sp, #8
 800647c:	4770      	bx	lr
 800647e:	4610      	mov	r0, r2
 8006480:	e7fb      	b.n	800647a <__ascii_mbtowc+0x16>
 8006482:	f06f 0001 	mvn.w	r0, #1
 8006486:	e7f8      	b.n	800647a <__ascii_mbtowc+0x16>

08006488 <__ascii_wctomb>:
 8006488:	b149      	cbz	r1, 800649e <__ascii_wctomb+0x16>
 800648a:	2aff      	cmp	r2, #255	; 0xff
 800648c:	bf85      	ittet	hi
 800648e:	238a      	movhi	r3, #138	; 0x8a
 8006490:	6003      	strhi	r3, [r0, #0]
 8006492:	700a      	strbls	r2, [r1, #0]
 8006494:	f04f 30ff 	movhi.w	r0, #4294967295
 8006498:	bf98      	it	ls
 800649a:	2001      	movls	r0, #1
 800649c:	4770      	bx	lr
 800649e:	4608      	mov	r0, r1
 80064a0:	4770      	bx	lr
	...

080064a4 <fiprintf>:
 80064a4:	b40e      	push	{r1, r2, r3}
 80064a6:	b503      	push	{r0, r1, lr}
 80064a8:	4601      	mov	r1, r0
 80064aa:	ab03      	add	r3, sp, #12
 80064ac:	4805      	ldr	r0, [pc, #20]	; (80064c4 <fiprintf+0x20>)
 80064ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b2:	6800      	ldr	r0, [r0, #0]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	f7ff fd37 	bl	8005f28 <_vfiprintf_r>
 80064ba:	b002      	add	sp, #8
 80064bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064c0:	b003      	add	sp, #12
 80064c2:	4770      	bx	lr
 80064c4:	20000064 	.word	0x20000064

080064c8 <abort>:
 80064c8:	b508      	push	{r3, lr}
 80064ca:	2006      	movs	r0, #6
 80064cc:	f000 f82c 	bl	8006528 <raise>
 80064d0:	2001      	movs	r0, #1
 80064d2:	f7fb f951 	bl	8001778 <_exit>

080064d6 <_raise_r>:
 80064d6:	291f      	cmp	r1, #31
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4604      	mov	r4, r0
 80064dc:	460d      	mov	r5, r1
 80064de:	d904      	bls.n	80064ea <_raise_r+0x14>
 80064e0:	2316      	movs	r3, #22
 80064e2:	6003      	str	r3, [r0, #0]
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295
 80064e8:	bd38      	pop	{r3, r4, r5, pc}
 80064ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80064ec:	b112      	cbz	r2, 80064f4 <_raise_r+0x1e>
 80064ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064f2:	b94b      	cbnz	r3, 8006508 <_raise_r+0x32>
 80064f4:	4620      	mov	r0, r4
 80064f6:	f000 f831 	bl	800655c <_getpid_r>
 80064fa:	462a      	mov	r2, r5
 80064fc:	4601      	mov	r1, r0
 80064fe:	4620      	mov	r0, r4
 8006500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006504:	f000 b818 	b.w	8006538 <_kill_r>
 8006508:	2b01      	cmp	r3, #1
 800650a:	d00a      	beq.n	8006522 <_raise_r+0x4c>
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	d103      	bne.n	8006518 <_raise_r+0x42>
 8006510:	2316      	movs	r3, #22
 8006512:	6003      	str	r3, [r0, #0]
 8006514:	2001      	movs	r0, #1
 8006516:	e7e7      	b.n	80064e8 <_raise_r+0x12>
 8006518:	2400      	movs	r4, #0
 800651a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800651e:	4628      	mov	r0, r5
 8006520:	4798      	blx	r3
 8006522:	2000      	movs	r0, #0
 8006524:	e7e0      	b.n	80064e8 <_raise_r+0x12>
	...

08006528 <raise>:
 8006528:	4b02      	ldr	r3, [pc, #8]	; (8006534 <raise+0xc>)
 800652a:	4601      	mov	r1, r0
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	f7ff bfd2 	b.w	80064d6 <_raise_r>
 8006532:	bf00      	nop
 8006534:	20000064 	.word	0x20000064

08006538 <_kill_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d07      	ldr	r5, [pc, #28]	; (8006558 <_kill_r+0x20>)
 800653c:	2300      	movs	r3, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	f7fb f907 	bl	8001758 <_kill>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	d102      	bne.n	8006554 <_kill_r+0x1c>
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	b103      	cbz	r3, 8006554 <_kill_r+0x1c>
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	bd38      	pop	{r3, r4, r5, pc}
 8006556:	bf00      	nop
 8006558:	200003d4 	.word	0x200003d4

0800655c <_getpid_r>:
 800655c:	f7fb b8f4 	b.w	8001748 <_getpid>

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr
