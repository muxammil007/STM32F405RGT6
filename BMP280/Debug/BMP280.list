
BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800424c  0800424c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004254  08004254  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800425c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000230  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000097b9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001832  00000000  00000000  00029894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008f8  00000000  00000000  0002b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006de  00000000  00000000  0002b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f441  00000000  00000000  0002c09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a9da  00000000  00000000  0004b4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bb0b6  00000000  00000000  00055eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002bc4  00000000  00000000  00110f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00113b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004160 	.word	0x08004160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004160 	.word	0x08004160

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f002 fb53 	bl	8002c2e <HAL_UART_Transmit>
	return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000dc 	.word	0x200000dc

08000598 <BMP280_ReadRegister8.0>:
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_SPI2_Init();

  /* USER CODE BEGIN 2.0 */
    uint8_t BMP280_ReadRegister8(uint8_t reg) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	f8c7 c000 	str.w	ip, [r7]
      uint8_t value;
      uint8_t addr = reg | 0x80; // Set MSB to 1 for read operation
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	73bb      	strb	r3, [r7, #14]

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // CS pin low
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	480f      	ldr	r0, [pc, #60]	; (80005f4 <BMP280_ReadRegister8.0+0x5c>)
 80005b8:	f001 f8b8 	bl	800172c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 80005bc:	f107 010e 	add.w	r1, r7, #14
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	2201      	movs	r2, #1
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <BMP280_ReadRegister8.0+0x60>)
 80005c8:	f001 fdc5 	bl	8002156 <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi2, &value, 1, HAL_MAX_DELAY);
 80005cc:	f107 010f 	add.w	r1, r7, #15
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2201      	movs	r2, #1
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <BMP280_ReadRegister8.0+0x60>)
 80005d8:	f001 fef9 	bl	80023ce <HAL_SPI_Receive>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // CS pin high
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <BMP280_ReadRegister8.0+0x5c>)
 80005e4:	f001 f8a2 	bl	800172c <HAL_GPIO_WritePin>

        return value;
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
    }
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020400 	.word	0x40020400
 80005f8:	20000084 	.word	0x20000084

080005fc <main>:
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
int main(void)
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000608:	f000 fd78 	bl	80010fc <HAL_Init>
  SystemClock_Config();
 800060c:	f000 fa8a 	bl	8000b24 <SystemClock_Config>
  MX_GPIO_Init();
 8000610:	f000 fb52 	bl	8000cb8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000614:	f000 fb26 	bl	8000c64 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8000618:	f000 faee 	bl	8000bf8 <MX_SPI2_Init>
        return p;
    }
    /* USER CODE END 2.0 */

  /* USER CODE BEGIN 2 */
  bmp280_id = BMP280_ReadRegister8(BMP280_REG_ID);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	469c      	mov	ip, r3
 8000620:	20d0      	movs	r0, #208	; 0xd0
 8000622:	f7ff ffb9 	bl	8000598 <BMP280_ReadRegister8.0>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <main+0xfc>)
 800062c:	701a      	strb	r2, [r3, #0]
  if (bmp280_id != 0x58) {
 800062e:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <main+0xfc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b58      	cmp	r3, #88	; 0x58
 8000634:	d008      	beq.n	8000648 <main+0x4c>
    printf("BMP280 not found! ID = 0x%02X\r\n", bmp280_id);
 8000636:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <main+0xfc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	482f      	ldr	r0, [pc, #188]	; (80006fc <main+0x100>)
 800063e:	f002 ff1b 	bl	8003478 <iprintf>
    Error_Handler();
 8000642:	f000 fbaf 	bl	8000da4 <Error_Handler>
 8000646:	e005      	b.n	8000654 <main+0x58>
  } else {
    printf("Happy BMP280 found! ID = 0x%02X\r\n", bmp280_id);
 8000648:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <main+0xfc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	482c      	ldr	r0, [pc, #176]	; (8000700 <main+0x104>)
 8000650:	f002 ff12 	bl	8003478 <iprintf>
  }

  BMP280_WriteRegister8(BMP280_REG_CTRL_MEAS, 0x27); // Normal mode, temp and press oversampling 1
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	469c      	mov	ip, r3
 8000658:	2127      	movs	r1, #39	; 0x27
 800065a:	20f4      	movs	r0, #244	; 0xf4
 800065c:	f000 f862 	bl	8000724 <BMP280_WriteRegister8.1>
  BMP280_WriteRegister8(BMP280_REG_CONFIG, 0xA0);    // Standby time 1000ms
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	469c      	mov	ip, r3
 8000664:	21a0      	movs	r1, #160	; 0xa0
 8000666:	20f5      	movs	r0, #245	; 0xf5
 8000668:	f000 f85c 	bl	8000724 <BMP280_WriteRegister8.1>

  BMP280_ReadCalibrationData();
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	469c      	mov	ip, r3
 8000670:	f000 f8be 	bl	80007f0 <BMP280_ReadCalibrationData.2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    temperature = BMP280_ReadTemperature();
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	469c      	mov	ip, r3
 8000678:	f000 f93c 	bl	80008f4 <BMP280_ReadTemperature.5>
 800067c:	4603      	mov	r3, r0
 800067e:	4a21      	ldr	r2, [pc, #132]	; (8000704 <main+0x108>)
 8000680:	6013      	str	r3, [r2, #0]
	    pressure = BMP280_ReadPressure();
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	469c      	mov	ip, r3
 8000686:	f000 f987 	bl	8000998 <BMP280_ReadPressure.6>
 800068a:	4603      	mov	r3, r0
 800068c:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <main+0x10c>)
 800068e:	6013      	str	r3, [r2, #0]
	    printf("Temperature: %ld.%02ld°C\r\n", temperature / 100, temperature % 100);
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <main+0x108>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <main+0x110>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1152      	asrs	r2, r2, #5
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad0      	subs	r0, r2, r3
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <main+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a19      	ldr	r2, [pc, #100]	; (800070c <main+0x110>)
 80006a6:	fb82 1203 	smull	r1, r2, r2, r3
 80006aa:	1151      	asrs	r1, r2, #5
 80006ac:	17da      	asrs	r2, r3, #31
 80006ae:	1a8a      	subs	r2, r1, r2
 80006b0:	2164      	movs	r1, #100	; 0x64
 80006b2:	fb01 f202 	mul.w	r2, r1, r2
 80006b6:	1a9a      	subs	r2, r3, r2
 80006b8:	4601      	mov	r1, r0
 80006ba:	4815      	ldr	r0, [pc, #84]	; (8000710 <main+0x114>)
 80006bc:	f002 fedc 	bl	8003478 <iprintf>
	    printf("Pressure: %lu \r\n", pressure);
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <main+0x10c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4813      	ldr	r0, [pc, #76]	; (8000714 <main+0x118>)
 80006c8:	f002 fed6 	bl	8003478 <iprintf>
	    printf("Counter value %d \r\n",counter);
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <main+0x11c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <main+0x120>)
 80006d4:	f002 fed0 	bl	8003478 <iprintf>
	    counter++;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <main+0x11c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <main+0x11c>)
 80006e2:	701a      	strb	r2, [r3, #0]
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80006e4:	2102      	movs	r1, #2
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <main+0x124>)
 80006e8:	f001 f839 	bl	800175e <HAL_GPIO_TogglePin>
	    HAL_Delay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f0:	f000 fd76 	bl	80011e0 <HAL_Delay>
	    temperature = BMP280_ReadTemperature();
 80006f4:	e7be      	b.n	8000674 <main+0x78>
 80006f6:	bf00      	nop
 80006f8:	20000139 	.word	0x20000139
 80006fc:	08004178 	.word	0x08004178
 8000700:	08004198 	.word	0x08004198
 8000704:	2000013c 	.word	0x2000013c
 8000708:	20000140 	.word	0x20000140
 800070c:	51eb851f 	.word	0x51eb851f
 8000710:	080041bc 	.word	0x080041bc
 8000714:	080041d8 	.word	0x080041d8
 8000718:	20000138 	.word	0x20000138
 800071c:	080041ec 	.word	0x080041ec
 8000720:	40020800 	.word	0x40020800

08000724 <BMP280_WriteRegister8.1>:
  void BMP280_WriteRegister8(uint8_t reg, uint8_t value) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
 8000734:	f8c7 c000 	str.w	ip, [r7]
        uint8_t addr = reg & 0x7F; // Set MSB to 0 for write operation
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CS pin low
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <BMP280_WriteRegister8.1+0x5c>)
 800074a:	f000 ffef 	bl	800172c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 800074e:	f107 010f 	add.w	r1, r7, #15
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	2201      	movs	r2, #1
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <BMP280_WriteRegister8.1+0x60>)
 800075a:	f001 fcfc 	bl	8002156 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&hspi2, &value, 1, HAL_MAX_DELAY);
 800075e:	1db9      	adds	r1, r7, #6
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	2201      	movs	r2, #1
 8000766:	4807      	ldr	r0, [pc, #28]	; (8000784 <BMP280_WriteRegister8.1+0x60>)
 8000768:	f001 fcf5 	bl	8002156 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // CS pin high
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <BMP280_WriteRegister8.1+0x5c>)
 8000774:	f000 ffda 	bl	800172c <HAL_GPIO_WritePin>
    }
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40020400 	.word	0x40020400
 8000784:	20000084 	.word	0x20000084

08000788 <BMP280_Read16_LE.3>:
    uint16_t BMP280_Read16_LE(uint8_t reg) {
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4664      	mov	r4, ip
 8000794:	f8c7 c000 	str.w	ip, [r7]
        return (BMP280_ReadRegister8(reg) | (BMP280_ReadRegister8(reg + 1) << 8));
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	46a4      	mov	ip, r4
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fefb 	bl	8000598 <BMP280_ReadRegister8.0>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b21d      	sxth	r5, r3
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	3301      	adds	r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	46a4      	mov	ip, r4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fef2 	bl	8000598 <BMP280_ReadRegister8.0>
 80007b4:	4603      	mov	r3, r0
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	432b      	orrs	r3, r5
 80007bc:	b21b      	sxth	r3, r3
 80007be:	b29b      	uxth	r3, r3
    }
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bdb0      	pop	{r4, r5, r7, pc}

080007c8 <BMP280_ReadS16_LE.4>:
    int16_t BMP280_ReadS16_LE(uint8_t reg) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	4662      	mov	r2, ip
 80007d4:	f8c7 c000 	str.w	ip, [r7]
        return (int16_t)BMP280_Read16_LE(reg);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4694      	mov	ip, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ffd3 	bl	8000788 <BMP280_Read16_LE.3>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b21b      	sxth	r3, r3
    }
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <BMP280_ReadCalibrationData.2>:
  void BMP280_ReadCalibrationData(void) {
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4664      	mov	r4, ip
 80007f8:	f8c7 c004 	str.w	ip, [r7, #4]
        dig_T1 = BMP280_Read16_LE(0x88);
 80007fc:	46a4      	mov	ip, r4
 80007fe:	2088      	movs	r0, #136	; 0x88
 8000800:	f7ff ffc2 	bl	8000788 <BMP280_Read16_LE.3>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <BMP280_ReadCalibrationData.2+0xd4>)
 800080a:	801a      	strh	r2, [r3, #0]
        dig_T2 = BMP280_ReadS16_LE(0x8A);
 800080c:	46a4      	mov	ip, r4
 800080e:	208a      	movs	r0, #138	; 0x8a
 8000810:	f7ff ffda 	bl	80007c8 <BMP280_ReadS16_LE.4>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <BMP280_ReadCalibrationData.2+0xd8>)
 800081a:	801a      	strh	r2, [r3, #0]
        dig_T3 = BMP280_ReadS16_LE(0x8C);
 800081c:	46a4      	mov	ip, r4
 800081e:	208c      	movs	r0, #140	; 0x8c
 8000820:	f7ff ffd2 	bl	80007c8 <BMP280_ReadS16_LE.4>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <BMP280_ReadCalibrationData.2+0xdc>)
 800082a:	801a      	strh	r2, [r3, #0]
        dig_P1 = BMP280_Read16_LE(0x8E);
 800082c:	46a4      	mov	ip, r4
 800082e:	208e      	movs	r0, #142	; 0x8e
 8000830:	f7ff ffaa 	bl	8000788 <BMP280_Read16_LE.3>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <BMP280_ReadCalibrationData.2+0xe0>)
 800083a:	801a      	strh	r2, [r3, #0]
        dig_P2 = BMP280_ReadS16_LE(0x90);
 800083c:	46a4      	mov	ip, r4
 800083e:	2090      	movs	r0, #144	; 0x90
 8000840:	f7ff ffc2 	bl	80007c8 <BMP280_ReadS16_LE.4>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <BMP280_ReadCalibrationData.2+0xe4>)
 800084a:	801a      	strh	r2, [r3, #0]
        dig_P3 = BMP280_ReadS16_LE(0x92);
 800084c:	46a4      	mov	ip, r4
 800084e:	2092      	movs	r0, #146	; 0x92
 8000850:	f7ff ffba 	bl	80007c8 <BMP280_ReadS16_LE.4>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <BMP280_ReadCalibrationData.2+0xe8>)
 800085a:	801a      	strh	r2, [r3, #0]
        dig_P4 = BMP280_ReadS16_LE(0x94);
 800085c:	46a4      	mov	ip, r4
 800085e:	2094      	movs	r0, #148	; 0x94
 8000860:	f7ff ffb2 	bl	80007c8 <BMP280_ReadS16_LE.4>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <BMP280_ReadCalibrationData.2+0xec>)
 800086a:	801a      	strh	r2, [r3, #0]
        dig_P5 = BMP280_ReadS16_LE(0x96);
 800086c:	46a4      	mov	ip, r4
 800086e:	2096      	movs	r0, #150	; 0x96
 8000870:	f7ff ffaa 	bl	80007c8 <BMP280_ReadS16_LE.4>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <BMP280_ReadCalibrationData.2+0xf0>)
 800087a:	801a      	strh	r2, [r3, #0]
        dig_P6 = BMP280_ReadS16_LE(0x98);
 800087c:	46a4      	mov	ip, r4
 800087e:	2098      	movs	r0, #152	; 0x98
 8000880:	f7ff ffa2 	bl	80007c8 <BMP280_ReadS16_LE.4>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <BMP280_ReadCalibrationData.2+0xf4>)
 800088a:	801a      	strh	r2, [r3, #0]
        dig_P7 = BMP280_ReadS16_LE(0x9A);
 800088c:	46a4      	mov	ip, r4
 800088e:	209a      	movs	r0, #154	; 0x9a
 8000890:	f7ff ff9a 	bl	80007c8 <BMP280_ReadS16_LE.4>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <BMP280_ReadCalibrationData.2+0xf8>)
 800089a:	801a      	strh	r2, [r3, #0]
        dig_P8 = BMP280_ReadS16_LE(0x9C);
 800089c:	46a4      	mov	ip, r4
 800089e:	209c      	movs	r0, #156	; 0x9c
 80008a0:	f7ff ff92 	bl	80007c8 <BMP280_ReadS16_LE.4>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <BMP280_ReadCalibrationData.2+0xfc>)
 80008aa:	801a      	strh	r2, [r3, #0]
        dig_P9 = BMP280_ReadS16_LE(0x9E);
 80008ac:	46a4      	mov	ip, r4
 80008ae:	209e      	movs	r0, #158	; 0x9e
 80008b0:	f7ff ff8a 	bl	80007c8 <BMP280_ReadS16_LE.4>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <BMP280_ReadCalibrationData.2+0x100>)
 80008ba:	801a      	strh	r2, [r3, #0]
    }
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	20000120 	.word	0x20000120
 80008c8:	20000122 	.word	0x20000122
 80008cc:	20000124 	.word	0x20000124
 80008d0:	20000126 	.word	0x20000126
 80008d4:	20000128 	.word	0x20000128
 80008d8:	2000012a 	.word	0x2000012a
 80008dc:	2000012c 	.word	0x2000012c
 80008e0:	2000012e 	.word	0x2000012e
 80008e4:	20000130 	.word	0x20000130
 80008e8:	20000132 	.word	0x20000132
 80008ec:	20000134 	.word	0x20000134
 80008f0:	20000136 	.word	0x20000136

080008f4 <BMP280_ReadTemperature.5>:
    int32_t BMP280_ReadTemperature(void) {
 80008f4:	b5b0      	push	{r4, r5, r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4664      	mov	r4, ip
 80008fc:	f8c7 c004 	str.w	ip, [r7, #4]
        int32_t adc_T = (BMP280_ReadRegister8(BMP280_REG_TEMP_MSB) << 12) | (BMP280_ReadRegister8(BMP280_REG_TEMP_LSB) << 4) | (BMP280_ReadRegister8(BMP280_REG_TEMP_XLSB) >> 4);
 8000900:	46a4      	mov	ip, r4
 8000902:	20fa      	movs	r0, #250	; 0xfa
 8000904:	f7ff fe48 	bl	8000598 <BMP280_ReadRegister8.0>
 8000908:	4603      	mov	r3, r0
 800090a:	031d      	lsls	r5, r3, #12
 800090c:	46a4      	mov	ip, r4
 800090e:	20fb      	movs	r0, #251	; 0xfb
 8000910:	f7ff fe42 	bl	8000598 <BMP280_ReadRegister8.0>
 8000914:	4603      	mov	r3, r0
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	431d      	orrs	r5, r3
 800091a:	46a4      	mov	ip, r4
 800091c:	20fc      	movs	r0, #252	; 0xfc
 800091e:	f7ff fe3b 	bl	8000598 <BMP280_ReadRegister8.0>
 8000922:	4603      	mov	r3, r0
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	b2db      	uxtb	r3, r3
 8000928:	432b      	orrs	r3, r5
 800092a:	617b      	str	r3, [r7, #20]
        var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	10da      	asrs	r2, r3, #3
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <BMP280_ReadTemperature.5+0x98>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	4a15      	ldr	r2, [pc, #84]	; (8000990 <BMP280_ReadTemperature.5+0x9c>)
 800093a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800093e:	fb02 f303 	mul.w	r3, r2, r3
 8000942:	12db      	asrs	r3, r3, #11
 8000944:	613b      	str	r3, [r7, #16]
        var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	111b      	asrs	r3, r3, #4
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <BMP280_ReadTemperature.5+0x98>)
 800094c:	8812      	ldrh	r2, [r2, #0]
 800094e:	1a9b      	subs	r3, r3, r2
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	1112      	asrs	r2, r2, #4
 8000954:	490d      	ldr	r1, [pc, #52]	; (800098c <BMP280_ReadTemperature.5+0x98>)
 8000956:	8809      	ldrh	r1, [r1, #0]
 8000958:	1a52      	subs	r2, r2, r1
 800095a:	fb02 f303 	mul.w	r3, r2, r3
 800095e:	131b      	asrs	r3, r3, #12
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <BMP280_ReadTemperature.5+0xa0>)
 8000962:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000966:	fb02 f303 	mul.w	r3, r2, r3
 800096a:	139b      	asrs	r3, r3, #14
 800096c:	60fb      	str	r3, [r7, #12]
        int32_t t_fine = var1 + var2;
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60bb      	str	r3, [r7, #8]
        return (t_fine * 5 + 128) >> 8;
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	3380      	adds	r3, #128	; 0x80
 8000980:	121b      	asrs	r3, r3, #8
    }
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bdb0      	pop	{r4, r5, r7, pc}
 800098a:	bf00      	nop
 800098c:	20000120 	.word	0x20000120
 8000990:	20000122 	.word	0x20000122
 8000994:	20000124 	.word	0x20000124

08000998 <BMP280_ReadPressure.6>:
    uint32_t BMP280_ReadPressure(void) {
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	4664      	mov	r4, ip
 80009a0:	f8c7 c004 	str.w	ip, [r7, #4]
        int32_t adc_P = (BMP280_ReadRegister8(BMP280_REG_PRESS_MSB) << 12) | (BMP280_ReadRegister8(BMP280_REG_PRESS_LSB) << 4) | (BMP280_ReadRegister8(BMP280_REG_PRESS_XLSB) >> 4);
 80009a4:	46a4      	mov	ip, r4
 80009a6:	20f7      	movs	r0, #247	; 0xf7
 80009a8:	f7ff fdf6 	bl	8000598 <BMP280_ReadRegister8.0>
 80009ac:	4603      	mov	r3, r0
 80009ae:	031d      	lsls	r5, r3, #12
 80009b0:	46a4      	mov	ip, r4
 80009b2:	20f8      	movs	r0, #248	; 0xf8
 80009b4:	f7ff fdf0 	bl	8000598 <BMP280_ReadRegister8.0>
 80009b8:	4603      	mov	r3, r0
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	431d      	orrs	r5, r3
 80009be:	46a4      	mov	ip, r4
 80009c0:	20f9      	movs	r0, #249	; 0xf9
 80009c2:	f7ff fde9 	bl	8000598 <BMP280_ReadRegister8.0>
 80009c6:	4603      	mov	r3, r0
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	432b      	orrs	r3, r5
 80009ce:	61bb      	str	r3, [r7, #24]
        int32_t t_fine = BMP280_ReadTemperature(); // call readTemperature to get t_fine value
 80009d0:	46a4      	mov	ip, r4
 80009d2:	f7ff ff8f 	bl	80008f4 <BMP280_ReadTemperature.5>
 80009d6:	6178      	str	r0, [r7, #20]
        var1 = (((int32_t)t_fine) >> 1) - (int32_t)64000;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	105b      	asrs	r3, r3, #1
 80009dc:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80009e0:	613b      	str	r3, [r7, #16]
        var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((int32_t)dig_P6);
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	109b      	asrs	r3, r3, #2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	1092      	asrs	r2, r2, #2
 80009ea:	fb02 f303 	mul.w	r3, r2, r3
 80009ee:	12db      	asrs	r3, r3, #11
 80009f0:	4a42      	ldr	r2, [pc, #264]	; (8000afc <BMP280_ReadPressure.6+0x164>)
 80009f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
 80009fa:	60fb      	str	r3, [r7, #12]
        var2 = var2 + ((var1 * ((int32_t)dig_P5)) << 1);
 80009fc:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <BMP280_ReadPressure.6+0x168>)
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	461a      	mov	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	fb02 f303 	mul.w	r3, r2, r3
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
        var2 = (var2 >> 2) + (((int32_t)dig_P4) << 16);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	109a      	asrs	r2, r3, #2
 8000a16:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <BMP280_ReadPressure.6+0x16c>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	4413      	add	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
        var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((((int32_t)dig_P2) * var1) >> 1)) >> 18;
 8000a22:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <BMP280_ReadPressure.6+0x170>)
 8000a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	109b      	asrs	r3, r3, #2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	1092      	asrs	r2, r2, #2
 8000a32:	fb02 f303 	mul.w	r3, r2, r3
 8000a36:	135b      	asrs	r3, r3, #13
 8000a38:	fb01 f303 	mul.w	r3, r1, r3
 8000a3c:	10da      	asrs	r2, r3, #3
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <BMP280_ReadPressure.6+0x174>)
 8000a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a44:	4619      	mov	r1, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	fb01 f303 	mul.w	r3, r1, r3
 8000a4c:	105b      	asrs	r3, r3, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	149b      	asrs	r3, r3, #18
 8000a52:	613b      	str	r3, [r7, #16]
        var1 = ((((32768 + var1)) * ((int32_t)dig_P1)) >> 15);
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000a5a:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <BMP280_ReadPressure.6+0x178>)
 8000a5c:	8812      	ldrh	r2, [r2, #0]
 8000a5e:	fb02 f303 	mul.w	r3, r2, r3
 8000a62:	13db      	asrs	r3, r3, #15
 8000a64:	613b      	str	r3, [r7, #16]
        if (var1 == 0) {
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d101      	bne.n	8000a70 <BMP280_ReadPressure.6+0xd8>
            return 0; // avoid exception caused by division by zero
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e041      	b.n	8000af4 <BMP280_ReadPressure.6+0x15c>
        uint32_t p = (((uint32_t)(((int32_t)1048576) - adc_P) - (var2 >> 12))) * 3125;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	131b      	asrs	r3, r3, #12
 8000a74:	461a      	mov	r2, r3
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <BMP280_ReadPressure.6+0x17c>)
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000a84:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8000a88:	61fb      	str	r3, [r7, #28]
        if (p < 0x80000000) {
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db06      	blt.n	8000a9e <BMP280_ReadPressure.6+0x106>
            p = (p << 1) / ((uint32_t)var1);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	005a      	lsls	r2, r3, #1
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	e005      	b.n	8000aaa <BMP280_ReadPressure.6+0x112>
            p = (p / (uint32_t)var1) * 2;
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
        var1 = (((int32_t)dig_P9) * ((int32_t)(((p >> 3) * (p >> 3)) >> 13))) >> 12;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <BMP280_ReadPressure.6+0x180>)
 8000aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	08d2      	lsrs	r2, r2, #3
 8000aba:	fb02 f303 	mul.w	r3, r2, r3
 8000abe:	0b5b      	lsrs	r3, r3, #13
 8000ac0:	fb01 f303 	mul.w	r3, r1, r3
 8000ac4:	131b      	asrs	r3, r3, #12
 8000ac6:	613b      	str	r3, [r7, #16]
        var2 = (((int32_t)(p >> 2)) * ((int32_t)dig_P8)) >> 13;
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <BMP280_ReadPressure.6+0x184>)
 8000ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad4:	fb02 f303 	mul.w	r3, r2, r3
 8000ad8:	135b      	asrs	r3, r3, #13
 8000ada:	60fb      	str	r3, [r7, #12]
        p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <BMP280_ReadPressure.6+0x188>)
 8000ae4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ae8:	4413      	add	r3, r2
 8000aea:	111a      	asrs	r2, r3, #4
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	4413      	add	r3, r2
 8000af0:	61fb      	str	r3, [r7, #28]
        return p;
 8000af2:	69fb      	ldr	r3, [r7, #28]
    }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bdb0      	pop	{r4, r5, r7, pc}
 8000afc:	20000130 	.word	0x20000130
 8000b00:	2000012e 	.word	0x2000012e
 8000b04:	2000012c 	.word	0x2000012c
 8000b08:	2000012a 	.word	0x2000012a
 8000b0c:	20000128 	.word	0x20000128
 8000b10:	20000126 	.word	0x20000126
 8000b14:	fffff3cb 	.word	0xfffff3cb
 8000b18:	20000136 	.word	0x20000136
 8000b1c:	20000134 	.word	0x20000134
 8000b20:	20000132 	.word	0x20000132

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2230      	movs	r2, #48	; 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 fcf5 	bl	8003522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a27      	ldr	r2, [pc, #156]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000b94:	2306      	movs	r3, #6
 8000b96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b98:	23a8      	movs	r3, #168	; 0xa8
 8000b9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fdf3 	bl	8001794 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb4:	f000 f8f6 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2105      	movs	r1, #5
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 f854 	bl	8001c84 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000be2:	f000 f8df 	bl	8000da4 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	; 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c44:	220a      	movs	r2, #10
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_SPI2_Init+0x64>)
 8000c4a:	f001 f9fb 	bl	8002044 <HAL_SPI_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c54:	f000 f8a6 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000084 	.word	0x20000084
 8000c60:	40003800 	.word	0x40003800

08000c64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_USART6_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c9c:	f001 ff7a 	bl	8002b94 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f87d 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000dc 	.word	0x200000dc
 8000cb4:	40011400 	.word	0x40011400

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a30      	ldr	r2, [pc, #192]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a29      	ldr	r2, [pc, #164]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_GPIO_Init+0xe0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2102      	movs	r1, #2
 8000d42:	4816      	ldr	r0, [pc, #88]	; (8000d9c <MX_GPIO_Init+0xe4>)
 8000d44:	f000 fcf2 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4e:	4814      	ldr	r0, [pc, #80]	; (8000da0 <MX_GPIO_Init+0xe8>)
 8000d50:	f000 fcec 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d54:	2302      	movs	r3, #2
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_GPIO_Init+0xe4>)
 8000d6c:	f000 fb42 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_GPIO_Init+0xe8>)
 8000d8a:	f000 fb33 	bl	80013f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020400 	.word	0x40020400

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_MspInit+0x4c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_SPI_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12c      	bne.n	8000e7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_SPI_MspInit+0x8c>)
 8000e78:	f000 fabc 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40003800 	.word	0x40003800
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <HAL_UART_MspInit+0x84>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d12b      	bne.n	8000f0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_UART_MspInit+0x88>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <HAL_UART_MspInit+0x88>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_UART_MspInit+0x88>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_UART_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_UART_MspInit+0x88>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_UART_MspInit+0x88>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eea:	23c0      	movs	r3, #192	; 0xc0
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000efa:	2308      	movs	r3, #8
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_UART_MspInit+0x8c>)
 8000f06:	f000 fa75 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	; 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40011400 	.word	0x40011400
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020800 	.word	0x40020800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f918 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
  }

  return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_isatty>:

int _isatty(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f002 faba 	bl	80035c0 <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20020000 	.word	0x20020000
 8001078:	00000400 	.word	0x00000400
 800107c:	20000144 	.word	0x20000144
 8001080:	20000298 	.word	0x20000298

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c4:	4c0b      	ldr	r4, [pc, #44]	; (80010f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d2:	f7ff ffd7 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f002 fa79 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fa8f 	bl	80005fc <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010ec:	0800425c 	.word	0x0800425c
  ldr r2, =_sbss
 80010f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010f4:	20000298 	.word	0x20000298

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f931 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe3e 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f93b 	bl	80013da <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f911 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000148 	.word	0x20000148

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000148 	.word	0x20000148

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff47 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff5c 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffb0 	bl	8001348 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e16b      	b.n	80016e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 815a 	bne.w	80016e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80b4 	beq.w	80016e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b60      	ldr	r3, [pc, #384]	; (8001700 <HAL_GPIO_Init+0x30c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a5f      	ldr	r2, [pc, #380]	; (8001700 <HAL_GPIO_Init+0x30c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_GPIO_Init+0x30c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <HAL_GPIO_Init+0x310>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x314>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d02b      	beq.n	800161a <HAL_GPIO_Init+0x226>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_GPIO_Init+0x318>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d025      	beq.n	8001616 <HAL_GPIO_Init+0x222>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <HAL_GPIO_Init+0x31c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x21e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x320>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x324>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_GPIO_Init+0x328>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x32c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x330>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x20a>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00e      	b.n	800161c <HAL_GPIO_Init+0x228>
 80015fe:	2308      	movs	r3, #8
 8001600:	e00c      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001602:	2306      	movs	r3, #6
 8001604:	e00a      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001606:	2305      	movs	r3, #5
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x228>
 800160a:	2304      	movs	r3, #4
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x228>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x228>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x310>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <HAL_GPIO_Init+0x334>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a32      	ldr	r2, [pc, #200]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_GPIO_Init+0x334>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f ae90 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40021400 	.word	0x40021400
 8001720:	40021800 	.word	0x40021800
 8001724:	40021c00 	.word	0x40021c00
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	619a      	str	r2, [r3, #24]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4013      	ands	r3, r2
 8001776:	041a      	lsls	r2, r3, #16
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43d9      	mvns	r1, r3
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	400b      	ands	r3, r1
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e267      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d075      	beq.n	800189e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017b2:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b85      	ldr	r3, [pc, #532]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d112      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4b82      	ldr	r3, [pc, #520]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d6:	d10b      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4b7e      	ldr	r3, [pc, #504]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d05b      	beq.n	800189c <HAL_RCC_OscConfig+0x108>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d157      	bne.n	800189c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e242      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x74>
 80017fa:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a75      	ldr	r2, [pc, #468]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xb0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x98>
 8001812:	4b70      	ldr	r3, [pc, #448]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6f      	ldr	r2, [pc, #444]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b6d      	ldr	r3, [pc, #436]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6c      	ldr	r2, [pc, #432]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xb0>
 800182c:	4b69      	ldr	r3, [pc, #420]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a68      	ldr	r2, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a65      	ldr	r2, [pc, #404]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fcbc 	bl	80011c8 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fcb8 	bl	80011c8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e207      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xc0>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fca8 	bl	80011c8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fca4 	bl	80011c8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1f3      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0xe8>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d063      	beq.n	8001972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018aa:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d11c      	bne.n	80018fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c2:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d116      	bne.n	80018fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x152>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e1c7      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4937      	ldr	r1, [pc, #220]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	e03a      	b.n	8001972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001904:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_RCC_OscConfig+0x244>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fc5d 	bl	80011c8 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fc59 	bl	80011c8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1a8      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4925      	ldr	r1, [pc, #148]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_RCC_OscConfig+0x244>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff fc3c 	bl	80011c8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff fc38 	bl	80011c8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e187      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d036      	beq.n	80019ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d016      	beq.n	80019b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_RCC_OscConfig+0x248>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fc1c 	bl	80011c8 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fc18 	bl	80011c8 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e167      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80019a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x200>
 80019b2:	e01b      	b.n	80019ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_OscConfig+0x248>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fc05 	bl	80011c8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	e00e      	b.n	80019e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff fc01 	bl	80011c8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d907      	bls.n	80019e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e150      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
 80019d4:	40023800 	.word	0x40023800
 80019d8:	42470000 	.word	0x42470000
 80019dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b88      	ldr	r3, [pc, #544]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ea      	bne.n	80019c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8097 	beq.w	8001b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b81      	ldr	r3, [pc, #516]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b7d      	ldr	r3, [pc, #500]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a7c      	ldr	r2, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b77      	ldr	r3, [pc, #476]	; (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b74      	ldr	r3, [pc, #464]	; (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a73      	ldr	r2, [pc, #460]	; (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fbc1 	bl	80011c8 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7ff fbbd 	bl	80011c8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e10c      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2ea>
 8001a70:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a63      	ldr	r2, [pc, #396]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	e01c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x324>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x30c>
 8001a86:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a5e      	ldr	r2, [pc, #376]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x324>
 8001aa0:	4b58      	ldr	r3, [pc, #352]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	4b55      	ldr	r3, [pc, #340]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f023 0304 	bic.w	r3, r3, #4
 8001ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d015      	beq.n	8001aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fb82 	bl	80011c8 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fb7e 	bl	80011c8 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0cb      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ade:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0ee      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x334>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fb6c 	bl	80011c8 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff fb68 	bl	80011c8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0b5      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ee      	bne.n	8001af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d105      	bne.n	8001b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a38      	ldr	r2, [pc, #224]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a1 	beq.w	8001c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d05c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d141      	bne.n	8001bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb3c 	bl	80011c8 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fb38 	bl	80011c8 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e087      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	491b      	ldr	r1, [pc, #108]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fb11 	bl	80011c8 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff fb0d 	bl	80011c8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e05c      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x416>
 8001bc8:	e054      	b.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fafa 	bl	80011c8 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff faf6 	bl	80011c8 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e045      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x444>
 8001bf6:	e03d      	b.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e038      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x4ec>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d028      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d121      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d11a      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d111      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0cc      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d90c      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b8      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	494d      	ldr	r1, [pc, #308]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d044      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d119      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e067      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 0203 	bic.w	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4934      	ldr	r1, [pc, #208]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d74:	f7ff fa28 	bl	80011c8 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7ff fa24 	bl	80011c8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e04f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 020c 	and.w	r2, r3, #12
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1eb      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d20c      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4916      	ldr	r1, [pc, #88]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e0a:	f000 f821 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	490a      	ldr	r1, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f988 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08004200 	.word	0x08004200
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e54:	b090      	sub	sp, #64	; 0x40
 8001e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e60:	2300      	movs	r3, #0
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e68:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d00d      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x40>
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	f200 80a1 	bhi.w	8001fbc <HAL_RCC_GetSysClockFreq+0x16c>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x34>
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e82:	e09b      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e88:	e09b      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e8a:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e8e:	e098      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e90:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d028      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	2200      	movs	r2, #0
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	627a      	str	r2, [r7, #36]	; 0x24
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ebc:	fb03 f201 	mul.w	r2, r3, r1
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	fb00 f303 	mul.w	r3, r0, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a43      	ldr	r2, [pc, #268]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eca:	fba0 1202 	umull	r1, r2, r0, r2
 8001ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed6:	4413      	add	r3, r2
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	2200      	movs	r2, #0
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	61fa      	str	r2, [r7, #28]
 8001ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001eea:	f7fe f9c1 	bl	8000270 <__aeabi_uldivmod>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef6:	e053      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	2200      	movs	r2, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	617a      	str	r2, [r7, #20]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f0a:	f04f 0b00 	mov.w	fp, #0
 8001f0e:	4652      	mov	r2, sl
 8001f10:	465b      	mov	r3, fp
 8001f12:	f04f 0000 	mov.w	r0, #0
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	0159      	lsls	r1, r3, #5
 8001f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f20:	0150      	lsls	r0, r2, #5
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ebb2 080a 	subs.w	r8, r2, sl
 8001f2a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f42:	ebb2 0408 	subs.w	r4, r2, r8
 8001f46:	eb63 0509 	sbc.w	r5, r3, r9
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	00eb      	lsls	r3, r5, #3
 8001f54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f58:	00e2      	lsls	r2, r4, #3
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	eb14 030a 	adds.w	r3, r4, sl
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	eb45 030b 	adc.w	r3, r5, fp
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f76:	4629      	mov	r1, r5
 8001f78:	028b      	lsls	r3, r1, #10
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f80:	4621      	mov	r1, r4
 8001f82:	028a      	lsls	r2, r1, #10
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	60fa      	str	r2, [r7, #12]
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe f96c 	bl	8000270 <__aeabi_uldivmod>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fba:	e002      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3740      	adds	r7, #64	; 0x40
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	00b71b00 	.word	0x00b71b00

08001fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	f7ff fff0 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	08004210 	.word	0x08004210

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002020:	f7ff ffdc 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0b5b      	lsrs	r3, r3, #13
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4903      	ldr	r1, [pc, #12]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	08004210 	.word	0x08004210

08002044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07b      	b.n	800214e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	d108      	bne.n	8002070 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002066:	d009      	beq.n	800207c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
 800206e:	e005      	b.n	800207c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe feb2 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	ea42 0103 	orr.w	r1, r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0104 	and.w	r1, r3, #4
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	f003 0210 	and.w	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_SPI_Transmit+0x22>
 8002174:	2302      	movs	r3, #2
 8002176:	e126      	b.n	80023c6 <HAL_SPI_Transmit+0x270>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002180:	f7ff f822 	bl	80011c8 <HAL_GetTick>
 8002184:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d002      	beq.n	800219c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002196:	2302      	movs	r3, #2
 8002198:	77fb      	strb	r3, [r7, #31]
    goto error;
 800219a:	e10b      	b.n	80023b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_SPI_Transmit+0x52>
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021ac:	e102      	b.n	80023b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2203      	movs	r2, #3
 80021b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f4:	d10f      	bne.n	8002216 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002204:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002214:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002220:	2b40      	cmp	r3, #64	; 0x40
 8002222:	d007      	beq.n	8002234 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800223c:	d14b      	bne.n	80022d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <HAL_SPI_Transmit+0xf6>
 8002246:	8afb      	ldrh	r3, [r7, #22]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d13e      	bne.n	80022ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	881a      	ldrh	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	1c9a      	adds	r2, r3, #2
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002270:	e02b      	b.n	80022ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b02      	cmp	r3, #2
 800227e:	d112      	bne.n	80022a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	1c9a      	adds	r2, r3, #2
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80022a4:	e011      	b.n	80022ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022a6:	f7fe ff8f 	bl	80011c8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d803      	bhi.n	80022be <HAL_SPI_Transmit+0x168>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d102      	bne.n	80022c4 <HAL_SPI_Transmit+0x16e>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022c8:	e074      	b.n	80023b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ce      	bne.n	8002272 <HAL_SPI_Transmit+0x11c>
 80022d4:	e04c      	b.n	8002370 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_SPI_Transmit+0x18e>
 80022de:	8afb      	ldrh	r3, [r7, #22]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d140      	bne.n	8002366 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	330c      	adds	r3, #12
 80022ee:	7812      	ldrb	r2, [r2, #0]
 80022f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800230a:	e02c      	b.n	8002366 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d113      	bne.n	8002342 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	330c      	adds	r3, #12
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002340:	e011      	b.n	8002366 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002342:	f7fe ff41 	bl	80011c8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d803      	bhi.n	800235a <HAL_SPI_Transmit+0x204>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d102      	bne.n	8002360 <HAL_SPI_Transmit+0x20a>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002364:	e026      	b.n	80023b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1cd      	bne.n	800230c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fbcb 	bl	8002b10 <SPI_EndRxTxTransaction>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	77fb      	strb	r3, [r7, #31]
 80023b0:	e000      	b.n	80023b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80023b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b088      	sub	sp, #32
 80023d2:	af02      	add	r7, sp, #8
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ea:	d112      	bne.n	8002412 <HAL_SPI_Receive+0x44>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10e      	bne.n	8002412 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2204      	movs	r2, #4
 80023f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023fc:	88fa      	ldrh	r2, [r7, #6]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f8f1 	bl	80025f0 <HAL_SPI_TransmitReceive>
 800240e:	4603      	mov	r3, r0
 8002410:	e0ea      	b.n	80025e8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_SPI_Receive+0x52>
 800241c:	2302      	movs	r3, #2
 800241e:	e0e3      	b.n	80025e8 <HAL_SPI_Receive+0x21a>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002428:	f7fe fece 	bl	80011c8 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d002      	beq.n	8002440 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800243a:	2302      	movs	r3, #2
 800243c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800243e:	e0ca      	b.n	80025d6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_SPI_Receive+0x7e>
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002450:	e0c1      	b.n	80025d6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2204      	movs	r2, #4
 8002456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002498:	d10f      	bne.n	80024ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d007      	beq.n	80024d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d162      	bne.n	80025a6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024e0:	e02e      	b.n	8002540 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d115      	bne.n	800251c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f103 020c 	add.w	r2, r3, #12
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	87da      	strh	r2, [r3, #62]	; 0x3e
 800251a:	e011      	b.n	8002540 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800251c:	f7fe fe54 	bl	80011c8 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d803      	bhi.n	8002534 <HAL_SPI_Receive+0x166>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d102      	bne.n	800253a <HAL_SPI_Receive+0x16c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800253e:	e04a      	b.n	80025d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1cb      	bne.n	80024e2 <HAL_SPI_Receive+0x114>
 800254a:	e031      	b.n	80025b0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d113      	bne.n	8002582 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	b292      	uxth	r2, r2
 8002566:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	1c9a      	adds	r2, r3, #2
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002580:	e011      	b.n	80025a6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002582:	f7fe fe21 	bl	80011c8 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d803      	bhi.n	800259a <HAL_SPI_Receive+0x1cc>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d102      	bne.n	80025a0 <HAL_SPI_Receive+0x1d2>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025a4:	e017      	b.n	80025d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1cd      	bne.n	800254c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fa45 	bl	8002a44 <SPI_EndRxTransaction>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
 80025d2:	e000      	b.n	80025d6 <HAL_SPI_Receive+0x208>
  }

error :
 80025d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025fe:	2301      	movs	r3, #1
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x26>
 8002612:	2302      	movs	r3, #2
 8002614:	e18a      	b.n	800292c <HAL_SPI_TransmitReceive+0x33c>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800261e:	f7fe fdd3 	bl	80011c8 <HAL_GetTick>
 8002622:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002638:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800263c:	2b01      	cmp	r3, #1
 800263e:	d00f      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x70>
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002646:	d107      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x68>
 8002650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002654:	2b04      	cmp	r3, #4
 8002656:	d003      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002658:	2302      	movs	r3, #2
 800265a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800265e:	e15b      	b.n	8002918 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x82>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x82>
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002678:	e14e      	b.n	8002918 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b04      	cmp	r3, #4
 8002684:	d003      	beq.n	800268e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2205      	movs	r2, #5
 800268a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	887a      	ldrh	r2, [r7, #2]
 800269e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d007      	beq.n	80026e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ea:	d178      	bne.n	80027de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x10a>
 80026f4:	8b7b      	ldrh	r3, [r7, #26]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d166      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	881a      	ldrh	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	1c9a      	adds	r2, r3, #2
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800271e:	e053      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d11b      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x176>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d016      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x176>
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	2b01      	cmp	r3, #1
 800273c:	d113      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	881a      	ldrh	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	1c9a      	adds	r2, r3, #2
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d119      	bne.n	80027a8 <HAL_SPI_TransmitReceive+0x1b8>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d014      	beq.n	80027a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	b292      	uxth	r2, r2
 800278a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027a4:	2301      	movs	r3, #1
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027a8:	f7fe fd0e 	bl	80011c8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d807      	bhi.n	80027c8 <HAL_SPI_TransmitReceive+0x1d8>
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d003      	beq.n	80027c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027c6:	e0a7      	b.n	8002918 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1a6      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x130>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1a1      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x130>
 80027dc:	e07c      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x1fc>
 80027e6:	8b7b      	ldrh	r3, [r7, #26]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d16b      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002812:	e057      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d11c      	bne.n	800285c <HAL_SPI_TransmitReceive+0x26c>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d017      	beq.n	800285c <HAL_SPI_TransmitReceive+0x26c>
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d114      	bne.n	800285c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d119      	bne.n	800289e <HAL_SPI_TransmitReceive+0x2ae>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d014      	beq.n	800289e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800289a:	2301      	movs	r3, #1
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800289e:	f7fe fc93 	bl	80011c8 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d803      	bhi.n	80028b6 <HAL_SPI_TransmitReceive+0x2c6>
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d102      	bne.n	80028bc <HAL_SPI_TransmitReceive+0x2cc>
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028c2:	e029      	b.n	8002918 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1a2      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x224>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d19d      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f917 	bl	8002b10 <SPI_EndRxTxTransaction>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028f4:	e010      	b.n	8002918 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	e000      	b.n	8002918 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002916:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800292c:	4618      	mov	r0, r3
 800292e:	3730      	adds	r7, #48	; 0x30
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002944:	f7fe fc40 	bl	80011c8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	4413      	add	r3, r2
 8002952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002954:	f7fe fc38 	bl	80011c8 <HAL_GetTick>
 8002958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	0d1b      	lsrs	r3, r3, #20
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296a:	e054      	b.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d050      	beq.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002974:	f7fe fc28 	bl	80011c8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	429a      	cmp	r2, r3
 8002982:	d902      	bls.n	800298a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d13d      	bne.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a2:	d111      	bne.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ac:	d004      	beq.n	80029b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b6:	d107      	bne.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d0:	d10f      	bne.n	80029f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e017      	b.n	8002a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	bf0c      	ite	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	2300      	movne	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d19b      	bne.n	800296c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a58:	d111      	bne.n	8002a7e <SPI_EndRxTransaction+0x3a>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a62:	d004      	beq.n	8002a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6c:	d107      	bne.n	8002a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a86:	d12a      	bne.n	8002ade <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a90:	d012      	beq.n	8002ab8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff ff49 	bl	8002934 <SPI_WaitFlagStateUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02d      	beq.n	8002b04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e026      	b.n	8002b06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff ff36 	bl	8002934 <SPI_WaitFlagStateUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01a      	beq.n	8002b04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f043 0220 	orr.w	r2, r3, #32
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e013      	b.n	8002b06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff23 	bl	8002934 <SPI_WaitFlagStateUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e000      	b.n	8002b06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <SPI_EndRxTxTransaction+0x7c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <SPI_EndRxTxTransaction+0x80>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0d5b      	lsrs	r3, r3, #21
 8002b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b3a:	d112      	bne.n	8002b62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2200      	movs	r2, #0
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff fef4 	bl	8002934 <SPI_WaitFlagStateUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f043 0220 	orr.w	r2, r3, #32
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e00f      	b.n	8002b82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d0f2      	beq.n	8002b62 <SPI_EndRxTxTransaction+0x52>
 8002b7c:	e000      	b.n	8002b80 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b7e:	bf00      	nop
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	165e9f81 	.word	0x165e9f81

08002b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e03f      	b.n	8002c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe f968 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f929 	bl	8002e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b08a      	sub	sp, #40	; 0x28
 8002c32:	af02      	add	r7, sp, #8
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d17c      	bne.n	8002d48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_UART_Transmit+0x2c>
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e075      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_UART_Transmit+0x3e>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e06e      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2221      	movs	r2, #33	; 0x21
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c82:	f7fe faa1 	bl	80011c8 <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	88fa      	ldrh	r2, [r7, #6]
 8002c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9c:	d108      	bne.n	8002cb0 <HAL_UART_Transmit+0x82>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	e003      	b.n	8002cb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cc0:	e02a      	b.n	8002d18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f840 	bl	8002d52 <UART_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e036      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	e007      	b.n	8002d0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3301      	adds	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1cf      	bne.n	8002cc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2140      	movs	r1, #64	; 0x40
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f810 	bl	8002d52 <UART_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e006      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b090      	sub	sp, #64	; 0x40
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d62:	e050      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d04c      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d72:	f7fe fa29 	bl	80011c8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d241      	bcs.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	330c      	adds	r3, #12
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002da2:	637a      	str	r2, [r7, #52]	; 0x34
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e5      	bne.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dd6:	623a      	str	r2, [r7, #32]
 8002dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	69f9      	ldr	r1, [r7, #28]
 8002ddc:	6a3a      	ldr	r2, [r7, #32]
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e5      	bne.n	8002db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e00f      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d09f      	beq.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3740      	adds	r7, #64	; 0x40
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b0c0      	sub	sp, #256	; 0x100
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	68d9      	ldr	r1, [r3, #12]
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	ea40 0301 	orr.w	r3, r0, r1
 8002e58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e88:	f021 010c 	bic.w	r1, r1, #12
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e96:	430b      	orrs	r3, r1
 8002e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	6999      	ldr	r1, [r3, #24]
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	ea40 0301 	orr.w	r3, r0, r1
 8002eb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4b8f      	ldr	r3, [pc, #572]	; (80030fc <UART_SetConfig+0x2cc>)
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d005      	beq.n	8002ed0 <UART_SetConfig+0xa0>
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b8d      	ldr	r3, [pc, #564]	; (8003100 <UART_SetConfig+0x2d0>)
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d104      	bne.n	8002eda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ed0:	f7ff f8a4 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8002ed4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ed8:	e003      	b.n	8002ee2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eda:	f7ff f88b 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8002ede:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	f040 810c 	bne.w	8003108 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002efa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002efe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f02:	4622      	mov	r2, r4
 8002f04:	462b      	mov	r3, r5
 8002f06:	1891      	adds	r1, r2, r2
 8002f08:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f0a:	415b      	adcs	r3, r3
 8002f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f12:	4621      	mov	r1, r4
 8002f14:	eb12 0801 	adds.w	r8, r2, r1
 8002f18:	4629      	mov	r1, r5
 8002f1a:	eb43 0901 	adc.w	r9, r3, r1
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f32:	4690      	mov	r8, r2
 8002f34:	4699      	mov	r9, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	eb18 0303 	adds.w	r3, r8, r3
 8002f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f40:	462b      	mov	r3, r5
 8002f42:	eb49 0303 	adc.w	r3, r9, r3
 8002f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f5e:	460b      	mov	r3, r1
 8002f60:	18db      	adds	r3, r3, r3
 8002f62:	653b      	str	r3, [r7, #80]	; 0x50
 8002f64:	4613      	mov	r3, r2
 8002f66:	eb42 0303 	adc.w	r3, r2, r3
 8002f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f74:	f7fd f97c 	bl	8000270 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <UART_SetConfig+0x2d4>)
 8002f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	011c      	lsls	r4, r3, #4
 8002f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	1891      	adds	r1, r2, r2
 8002f9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fa0:	415b      	adcs	r3, r3
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fa8:	4641      	mov	r1, r8
 8002faa:	eb12 0a01 	adds.w	sl, r2, r1
 8002fae:	4649      	mov	r1, r9
 8002fb0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fc8:	4692      	mov	sl, r2
 8002fca:	469b      	mov	fp, r3
 8002fcc:	4643      	mov	r3, r8
 8002fce:	eb1a 0303 	adds.w	r3, sl, r3
 8002fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ff0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	18db      	adds	r3, r3, r3
 8002ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	eb42 0303 	adc.w	r3, r2, r3
 8003000:	647b      	str	r3, [r7, #68]	; 0x44
 8003002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003006:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800300a:	f7fd f931 	bl	8000270 <__aeabi_uldivmod>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4611      	mov	r1, r2
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <UART_SetConfig+0x2d4>)
 8003016:	fba3 2301 	umull	r2, r3, r3, r1
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2264      	movs	r2, #100	; 0x64
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	1acb      	subs	r3, r1, r3
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800302a:	4b36      	ldr	r3, [pc, #216]	; (8003104 <UART_SetConfig+0x2d4>)
 800302c:	fba3 2302 	umull	r2, r3, r3, r2
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003038:	441c      	add	r4, r3
 800303a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003044:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003048:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	63b9      	str	r1, [r7, #56]	; 0x38
 8003054:	415b      	adcs	r3, r3
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800305c:	4641      	mov	r1, r8
 800305e:	1851      	adds	r1, r2, r1
 8003060:	6339      	str	r1, [r7, #48]	; 0x30
 8003062:	4649      	mov	r1, r9
 8003064:	414b      	adcs	r3, r1
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003074:	4659      	mov	r1, fp
 8003076:	00cb      	lsls	r3, r1, #3
 8003078:	4651      	mov	r1, sl
 800307a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307e:	4651      	mov	r1, sl
 8003080:	00ca      	lsls	r2, r1, #3
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	4603      	mov	r3, r0
 8003088:	4642      	mov	r2, r8
 800308a:	189b      	adds	r3, r3, r2
 800308c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003090:	464b      	mov	r3, r9
 8003092:	460a      	mov	r2, r1
 8003094:	eb42 0303 	adc.w	r3, r2, r3
 8003098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030b0:	460b      	mov	r3, r1
 80030b2:	18db      	adds	r3, r3, r3
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b6:	4613      	mov	r3, r2
 80030b8:	eb42 0303 	adc.w	r3, r2, r3
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030c6:	f7fd f8d3 	bl	8000270 <__aeabi_uldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <UART_SetConfig+0x2d4>)
 80030d0:	fba3 1302 	umull	r1, r3, r3, r2
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	2164      	movs	r1, #100	; 0x64
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	3332      	adds	r3, #50	; 0x32
 80030e2:	4a08      	ldr	r2, [pc, #32]	; (8003104 <UART_SetConfig+0x2d4>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	f003 0207 	and.w	r2, r3, #7
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4422      	add	r2, r4
 80030f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030f8:	e106      	b.n	8003308 <UART_SetConfig+0x4d8>
 80030fa:	bf00      	nop
 80030fc:	40011000 	.word	0x40011000
 8003100:	40011400 	.word	0x40011400
 8003104:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800310c:	2200      	movs	r2, #0
 800310e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003112:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003116:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800311a:	4642      	mov	r2, r8
 800311c:	464b      	mov	r3, r9
 800311e:	1891      	adds	r1, r2, r2
 8003120:	6239      	str	r1, [r7, #32]
 8003122:	415b      	adcs	r3, r3
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
 8003126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800312a:	4641      	mov	r1, r8
 800312c:	1854      	adds	r4, r2, r1
 800312e:	4649      	mov	r1, r9
 8003130:	eb43 0501 	adc.w	r5, r3, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	00eb      	lsls	r3, r5, #3
 800313e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003142:	00e2      	lsls	r2, r4, #3
 8003144:	4614      	mov	r4, r2
 8003146:	461d      	mov	r5, r3
 8003148:	4643      	mov	r3, r8
 800314a:	18e3      	adds	r3, r4, r3
 800314c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003150:	464b      	mov	r3, r9
 8003152:	eb45 0303 	adc.w	r3, r5, r3
 8003156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003176:	4629      	mov	r1, r5
 8003178:	008b      	lsls	r3, r1, #2
 800317a:	4621      	mov	r1, r4
 800317c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003180:	4621      	mov	r1, r4
 8003182:	008a      	lsls	r2, r1, #2
 8003184:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003188:	f7fd f872 	bl	8000270 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4b60      	ldr	r3, [pc, #384]	; (8003314 <UART_SetConfig+0x4e4>)
 8003192:	fba3 2302 	umull	r2, r3, r3, r2
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	011c      	lsls	r4, r3, #4
 800319a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031ac:	4642      	mov	r2, r8
 80031ae:	464b      	mov	r3, r9
 80031b0:	1891      	adds	r1, r2, r2
 80031b2:	61b9      	str	r1, [r7, #24]
 80031b4:	415b      	adcs	r3, r3
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031bc:	4641      	mov	r1, r8
 80031be:	1851      	adds	r1, r2, r1
 80031c0:	6139      	str	r1, [r7, #16]
 80031c2:	4649      	mov	r1, r9
 80031c4:	414b      	adcs	r3, r1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031d4:	4659      	mov	r1, fp
 80031d6:	00cb      	lsls	r3, r1, #3
 80031d8:	4651      	mov	r1, sl
 80031da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031de:	4651      	mov	r1, sl
 80031e0:	00ca      	lsls	r2, r1, #3
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	4642      	mov	r2, r8
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031f0:	464b      	mov	r3, r9
 80031f2:	460a      	mov	r2, r1
 80031f4:	eb42 0303 	adc.w	r3, r2, r3
 80031f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	67bb      	str	r3, [r7, #120]	; 0x78
 8003206:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003214:	4649      	mov	r1, r9
 8003216:	008b      	lsls	r3, r1, #2
 8003218:	4641      	mov	r1, r8
 800321a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800321e:	4641      	mov	r1, r8
 8003220:	008a      	lsls	r2, r1, #2
 8003222:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003226:	f7fd f823 	bl	8000270 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4611      	mov	r1, r2
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <UART_SetConfig+0x4e4>)
 8003232:	fba3 2301 	umull	r2, r3, r3, r1
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2264      	movs	r2, #100	; 0x64
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	1acb      	subs	r3, r1, r3
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	3332      	adds	r3, #50	; 0x32
 8003244:	4a33      	ldr	r2, [pc, #204]	; (8003314 <UART_SetConfig+0x4e4>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003250:	441c      	add	r4, r3
 8003252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003256:	2200      	movs	r2, #0
 8003258:	673b      	str	r3, [r7, #112]	; 0x70
 800325a:	677a      	str	r2, [r7, #116]	; 0x74
 800325c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	415b      	adcs	r3, r3
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032a2:	464b      	mov	r3, r9
 80032a4:	460a      	mov	r2, r1
 80032a6:	eb42 0303 	adc.w	r3, r2, r3
 80032aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	663b      	str	r3, [r7, #96]	; 0x60
 80032b6:	667a      	str	r2, [r7, #100]	; 0x64
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032c4:	4649      	mov	r1, r9
 80032c6:	008b      	lsls	r3, r1, #2
 80032c8:	4641      	mov	r1, r8
 80032ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ce:	4641      	mov	r1, r8
 80032d0:	008a      	lsls	r2, r1, #2
 80032d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032d6:	f7fc ffcb 	bl	8000270 <__aeabi_uldivmod>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <UART_SetConfig+0x4e4>)
 80032e0:	fba3 1302 	umull	r1, r3, r3, r2
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	2164      	movs	r1, #100	; 0x64
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	3332      	adds	r3, #50	; 0x32
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <UART_SetConfig+0x4e4>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4422      	add	r2, r4
 8003306:	609a      	str	r2, [r3, #8]
}
 8003308:	bf00      	nop
 800330a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800330e:	46bd      	mov	sp, r7
 8003310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003314:	51eb851f 	.word	0x51eb851f

08003318 <std>:
 8003318:	2300      	movs	r3, #0
 800331a:	b510      	push	{r4, lr}
 800331c:	4604      	mov	r4, r0
 800331e:	e9c0 3300 	strd	r3, r3, [r0]
 8003322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003326:	6083      	str	r3, [r0, #8]
 8003328:	8181      	strh	r1, [r0, #12]
 800332a:	6643      	str	r3, [r0, #100]	; 0x64
 800332c:	81c2      	strh	r2, [r0, #14]
 800332e:	6183      	str	r3, [r0, #24]
 8003330:	4619      	mov	r1, r3
 8003332:	2208      	movs	r2, #8
 8003334:	305c      	adds	r0, #92	; 0x5c
 8003336:	f000 f8f4 	bl	8003522 <memset>
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <std+0x38>)
 800333c:	6263      	str	r3, [r4, #36]	; 0x24
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <std+0x3c>)
 8003340:	62a3      	str	r3, [r4, #40]	; 0x28
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <std+0x40>)
 8003344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <std+0x44>)
 8003348:	6224      	str	r4, [r4, #32]
 800334a:	6323      	str	r3, [r4, #48]	; 0x30
 800334c:	bd10      	pop	{r4, pc}
 800334e:	bf00      	nop
 8003350:	0800349d 	.word	0x0800349d
 8003354:	080034bf 	.word	0x080034bf
 8003358:	080034f7 	.word	0x080034f7
 800335c:	0800351b 	.word	0x0800351b

08003360 <stdio_exit_handler>:
 8003360:	4a02      	ldr	r2, [pc, #8]	; (800336c <stdio_exit_handler+0xc>)
 8003362:	4903      	ldr	r1, [pc, #12]	; (8003370 <stdio_exit_handler+0x10>)
 8003364:	4803      	ldr	r0, [pc, #12]	; (8003374 <stdio_exit_handler+0x14>)
 8003366:	f000 b869 	b.w	800343c <_fwalk_sglue>
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c
 8003370:	08003ebd 	.word	0x08003ebd
 8003374:	20000018 	.word	0x20000018

08003378 <cleanup_stdio>:
 8003378:	6841      	ldr	r1, [r0, #4]
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <cleanup_stdio+0x34>)
 800337c:	4299      	cmp	r1, r3
 800337e:	b510      	push	{r4, lr}
 8003380:	4604      	mov	r4, r0
 8003382:	d001      	beq.n	8003388 <cleanup_stdio+0x10>
 8003384:	f000 fd9a 	bl	8003ebc <_fflush_r>
 8003388:	68a1      	ldr	r1, [r4, #8]
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <cleanup_stdio+0x38>)
 800338c:	4299      	cmp	r1, r3
 800338e:	d002      	beq.n	8003396 <cleanup_stdio+0x1e>
 8003390:	4620      	mov	r0, r4
 8003392:	f000 fd93 	bl	8003ebc <_fflush_r>
 8003396:	68e1      	ldr	r1, [r4, #12]
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <cleanup_stdio+0x3c>)
 800339a:	4299      	cmp	r1, r3
 800339c:	d004      	beq.n	80033a8 <cleanup_stdio+0x30>
 800339e:	4620      	mov	r0, r4
 80033a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a4:	f000 bd8a 	b.w	8003ebc <_fflush_r>
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	bf00      	nop
 80033ac:	2000014c 	.word	0x2000014c
 80033b0:	200001b4 	.word	0x200001b4
 80033b4:	2000021c 	.word	0x2000021c

080033b8 <global_stdio_init.part.0>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <global_stdio_init.part.0+0x30>)
 80033bc:	4c0b      	ldr	r4, [pc, #44]	; (80033ec <global_stdio_init.part.0+0x34>)
 80033be:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <global_stdio_init.part.0+0x38>)
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	4620      	mov	r0, r4
 80033c4:	2200      	movs	r2, #0
 80033c6:	2104      	movs	r1, #4
 80033c8:	f7ff ffa6 	bl	8003318 <std>
 80033cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80033d0:	2201      	movs	r2, #1
 80033d2:	2109      	movs	r1, #9
 80033d4:	f7ff ffa0 	bl	8003318 <std>
 80033d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80033dc:	2202      	movs	r2, #2
 80033de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e2:	2112      	movs	r1, #18
 80033e4:	f7ff bf98 	b.w	8003318 <std>
 80033e8:	20000284 	.word	0x20000284
 80033ec:	2000014c 	.word	0x2000014c
 80033f0:	08003361 	.word	0x08003361

080033f4 <__sfp_lock_acquire>:
 80033f4:	4801      	ldr	r0, [pc, #4]	; (80033fc <__sfp_lock_acquire+0x8>)
 80033f6:	f000 b90d 	b.w	8003614 <__retarget_lock_acquire_recursive>
 80033fa:	bf00      	nop
 80033fc:	2000028d 	.word	0x2000028d

08003400 <__sfp_lock_release>:
 8003400:	4801      	ldr	r0, [pc, #4]	; (8003408 <__sfp_lock_release+0x8>)
 8003402:	f000 b908 	b.w	8003616 <__retarget_lock_release_recursive>
 8003406:	bf00      	nop
 8003408:	2000028d 	.word	0x2000028d

0800340c <__sinit>:
 800340c:	b510      	push	{r4, lr}
 800340e:	4604      	mov	r4, r0
 8003410:	f7ff fff0 	bl	80033f4 <__sfp_lock_acquire>
 8003414:	6a23      	ldr	r3, [r4, #32]
 8003416:	b11b      	cbz	r3, 8003420 <__sinit+0x14>
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f7ff bff0 	b.w	8003400 <__sfp_lock_release>
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <__sinit+0x28>)
 8003422:	6223      	str	r3, [r4, #32]
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <__sinit+0x2c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f5      	bne.n	8003418 <__sinit+0xc>
 800342c:	f7ff ffc4 	bl	80033b8 <global_stdio_init.part.0>
 8003430:	e7f2      	b.n	8003418 <__sinit+0xc>
 8003432:	bf00      	nop
 8003434:	08003379 	.word	0x08003379
 8003438:	20000284 	.word	0x20000284

0800343c <_fwalk_sglue>:
 800343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003440:	4607      	mov	r7, r0
 8003442:	4688      	mov	r8, r1
 8003444:	4614      	mov	r4, r2
 8003446:	2600      	movs	r6, #0
 8003448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800344c:	f1b9 0901 	subs.w	r9, r9, #1
 8003450:	d505      	bpl.n	800345e <_fwalk_sglue+0x22>
 8003452:	6824      	ldr	r4, [r4, #0]
 8003454:	2c00      	cmp	r4, #0
 8003456:	d1f7      	bne.n	8003448 <_fwalk_sglue+0xc>
 8003458:	4630      	mov	r0, r6
 800345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800345e:	89ab      	ldrh	r3, [r5, #12]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d907      	bls.n	8003474 <_fwalk_sglue+0x38>
 8003464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003468:	3301      	adds	r3, #1
 800346a:	d003      	beq.n	8003474 <_fwalk_sglue+0x38>
 800346c:	4629      	mov	r1, r5
 800346e:	4638      	mov	r0, r7
 8003470:	47c0      	blx	r8
 8003472:	4306      	orrs	r6, r0
 8003474:	3568      	adds	r5, #104	; 0x68
 8003476:	e7e9      	b.n	800344c <_fwalk_sglue+0x10>

08003478 <iprintf>:
 8003478:	b40f      	push	{r0, r1, r2, r3}
 800347a:	b507      	push	{r0, r1, r2, lr}
 800347c:	4906      	ldr	r1, [pc, #24]	; (8003498 <iprintf+0x20>)
 800347e:	ab04      	add	r3, sp, #16
 8003480:	6808      	ldr	r0, [r1, #0]
 8003482:	f853 2b04 	ldr.w	r2, [r3], #4
 8003486:	6881      	ldr	r1, [r0, #8]
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	f000 f9e7 	bl	800385c <_vfiprintf_r>
 800348e:	b003      	add	sp, #12
 8003490:	f85d eb04 	ldr.w	lr, [sp], #4
 8003494:	b004      	add	sp, #16
 8003496:	4770      	bx	lr
 8003498:	20000064 	.word	0x20000064

0800349c <__sread>:
 800349c:	b510      	push	{r4, lr}
 800349e:	460c      	mov	r4, r1
 80034a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a4:	f000 f868 	bl	8003578 <_read_r>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	bfab      	itete	ge
 80034ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034ae:	89a3      	ldrhlt	r3, [r4, #12]
 80034b0:	181b      	addge	r3, r3, r0
 80034b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034b6:	bfac      	ite	ge
 80034b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80034ba:	81a3      	strhlt	r3, [r4, #12]
 80034bc:	bd10      	pop	{r4, pc}

080034be <__swrite>:
 80034be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c2:	461f      	mov	r7, r3
 80034c4:	898b      	ldrh	r3, [r1, #12]
 80034c6:	05db      	lsls	r3, r3, #23
 80034c8:	4605      	mov	r5, r0
 80034ca:	460c      	mov	r4, r1
 80034cc:	4616      	mov	r6, r2
 80034ce:	d505      	bpl.n	80034dc <__swrite+0x1e>
 80034d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d4:	2302      	movs	r3, #2
 80034d6:	2200      	movs	r2, #0
 80034d8:	f000 f83c 	bl	8003554 <_lseek_r>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	4632      	mov	r2, r6
 80034ea:	463b      	mov	r3, r7
 80034ec:	4628      	mov	r0, r5
 80034ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034f2:	f000 b853 	b.w	800359c <_write_r>

080034f6 <__sseek>:
 80034f6:	b510      	push	{r4, lr}
 80034f8:	460c      	mov	r4, r1
 80034fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fe:	f000 f829 	bl	8003554 <_lseek_r>
 8003502:	1c43      	adds	r3, r0, #1
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	bf15      	itete	ne
 8003508:	6560      	strne	r0, [r4, #84]	; 0x54
 800350a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800350e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003512:	81a3      	strheq	r3, [r4, #12]
 8003514:	bf18      	it	ne
 8003516:	81a3      	strhne	r3, [r4, #12]
 8003518:	bd10      	pop	{r4, pc}

0800351a <__sclose>:
 800351a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351e:	f000 b809 	b.w	8003534 <_close_r>

08003522 <memset>:
 8003522:	4402      	add	r2, r0
 8003524:	4603      	mov	r3, r0
 8003526:	4293      	cmp	r3, r2
 8003528:	d100      	bne.n	800352c <memset+0xa>
 800352a:	4770      	bx	lr
 800352c:	f803 1b01 	strb.w	r1, [r3], #1
 8003530:	e7f9      	b.n	8003526 <memset+0x4>
	...

08003534 <_close_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4d06      	ldr	r5, [pc, #24]	; (8003550 <_close_r+0x1c>)
 8003538:	2300      	movs	r3, #0
 800353a:	4604      	mov	r4, r0
 800353c:	4608      	mov	r0, r1
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	f7fd fd35 	bl	8000fae <_close>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d102      	bne.n	800354e <_close_r+0x1a>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	b103      	cbz	r3, 800354e <_close_r+0x1a>
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	20000288 	.word	0x20000288

08003554 <_lseek_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4d07      	ldr	r5, [pc, #28]	; (8003574 <_lseek_r+0x20>)
 8003558:	4604      	mov	r4, r0
 800355a:	4608      	mov	r0, r1
 800355c:	4611      	mov	r1, r2
 800355e:	2200      	movs	r2, #0
 8003560:	602a      	str	r2, [r5, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	f7fd fd4a 	bl	8000ffc <_lseek>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_lseek_r+0x1e>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_lseek_r+0x1e>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000288 	.word	0x20000288

08003578 <_read_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4d07      	ldr	r5, [pc, #28]	; (8003598 <_read_r+0x20>)
 800357c:	4604      	mov	r4, r0
 800357e:	4608      	mov	r0, r1
 8003580:	4611      	mov	r1, r2
 8003582:	2200      	movs	r2, #0
 8003584:	602a      	str	r2, [r5, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	f7fd fcf4 	bl	8000f74 <_read>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_read_r+0x1e>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_read_r+0x1e>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	20000288 	.word	0x20000288

0800359c <_write_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4d07      	ldr	r5, [pc, #28]	; (80035bc <_write_r+0x20>)
 80035a0:	4604      	mov	r4, r0
 80035a2:	4608      	mov	r0, r1
 80035a4:	4611      	mov	r1, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	602a      	str	r2, [r5, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7fc ffde 	bl	800056c <_write>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_write_r+0x1e>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_write_r+0x1e>
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20000288 	.word	0x20000288

080035c0 <__errno>:
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <__errno+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000064 	.word	0x20000064

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	4d0d      	ldr	r5, [pc, #52]	; (8003604 <__libc_init_array+0x38>)
 80035d0:	4c0d      	ldr	r4, [pc, #52]	; (8003608 <__libc_init_array+0x3c>)
 80035d2:	1b64      	subs	r4, r4, r5
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	2600      	movs	r6, #0
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	4d0b      	ldr	r5, [pc, #44]	; (800360c <__libc_init_array+0x40>)
 80035de:	4c0c      	ldr	r4, [pc, #48]	; (8003610 <__libc_init_array+0x44>)
 80035e0:	f000 fdbe 	bl	8004160 <_init>
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	2600      	movs	r6, #0
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	08004254 	.word	0x08004254
 8003608:	08004254 	.word	0x08004254
 800360c:	08004254 	.word	0x08004254
 8003610:	08004258 	.word	0x08004258

08003614 <__retarget_lock_acquire_recursive>:
 8003614:	4770      	bx	lr

08003616 <__retarget_lock_release_recursive>:
 8003616:	4770      	bx	lr

08003618 <_free_r>:
 8003618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800361a:	2900      	cmp	r1, #0
 800361c:	d044      	beq.n	80036a8 <_free_r+0x90>
 800361e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003622:	9001      	str	r0, [sp, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f1a1 0404 	sub.w	r4, r1, #4
 800362a:	bfb8      	it	lt
 800362c:	18e4      	addlt	r4, r4, r3
 800362e:	f000 f8df 	bl	80037f0 <__malloc_lock>
 8003632:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <_free_r+0x94>)
 8003634:	9801      	ldr	r0, [sp, #4]
 8003636:	6813      	ldr	r3, [r2, #0]
 8003638:	b933      	cbnz	r3, 8003648 <_free_r+0x30>
 800363a:	6063      	str	r3, [r4, #4]
 800363c:	6014      	str	r4, [r2, #0]
 800363e:	b003      	add	sp, #12
 8003640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003644:	f000 b8da 	b.w	80037fc <__malloc_unlock>
 8003648:	42a3      	cmp	r3, r4
 800364a:	d908      	bls.n	800365e <_free_r+0x46>
 800364c:	6825      	ldr	r5, [r4, #0]
 800364e:	1961      	adds	r1, r4, r5
 8003650:	428b      	cmp	r3, r1
 8003652:	bf01      	itttt	eq
 8003654:	6819      	ldreq	r1, [r3, #0]
 8003656:	685b      	ldreq	r3, [r3, #4]
 8003658:	1949      	addeq	r1, r1, r5
 800365a:	6021      	streq	r1, [r4, #0]
 800365c:	e7ed      	b.n	800363a <_free_r+0x22>
 800365e:	461a      	mov	r2, r3
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	b10b      	cbz	r3, 8003668 <_free_r+0x50>
 8003664:	42a3      	cmp	r3, r4
 8003666:	d9fa      	bls.n	800365e <_free_r+0x46>
 8003668:	6811      	ldr	r1, [r2, #0]
 800366a:	1855      	adds	r5, r2, r1
 800366c:	42a5      	cmp	r5, r4
 800366e:	d10b      	bne.n	8003688 <_free_r+0x70>
 8003670:	6824      	ldr	r4, [r4, #0]
 8003672:	4421      	add	r1, r4
 8003674:	1854      	adds	r4, r2, r1
 8003676:	42a3      	cmp	r3, r4
 8003678:	6011      	str	r1, [r2, #0]
 800367a:	d1e0      	bne.n	800363e <_free_r+0x26>
 800367c:	681c      	ldr	r4, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	6053      	str	r3, [r2, #4]
 8003682:	440c      	add	r4, r1
 8003684:	6014      	str	r4, [r2, #0]
 8003686:	e7da      	b.n	800363e <_free_r+0x26>
 8003688:	d902      	bls.n	8003690 <_free_r+0x78>
 800368a:	230c      	movs	r3, #12
 800368c:	6003      	str	r3, [r0, #0]
 800368e:	e7d6      	b.n	800363e <_free_r+0x26>
 8003690:	6825      	ldr	r5, [r4, #0]
 8003692:	1961      	adds	r1, r4, r5
 8003694:	428b      	cmp	r3, r1
 8003696:	bf04      	itt	eq
 8003698:	6819      	ldreq	r1, [r3, #0]
 800369a:	685b      	ldreq	r3, [r3, #4]
 800369c:	6063      	str	r3, [r4, #4]
 800369e:	bf04      	itt	eq
 80036a0:	1949      	addeq	r1, r1, r5
 80036a2:	6021      	streq	r1, [r4, #0]
 80036a4:	6054      	str	r4, [r2, #4]
 80036a6:	e7ca      	b.n	800363e <_free_r+0x26>
 80036a8:	b003      	add	sp, #12
 80036aa:	bd30      	pop	{r4, r5, pc}
 80036ac:	20000290 	.word	0x20000290

080036b0 <sbrk_aligned>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4e0e      	ldr	r6, [pc, #56]	; (80036ec <sbrk_aligned+0x3c>)
 80036b4:	460c      	mov	r4, r1
 80036b6:	6831      	ldr	r1, [r6, #0]
 80036b8:	4605      	mov	r5, r0
 80036ba:	b911      	cbnz	r1, 80036c2 <sbrk_aligned+0x12>
 80036bc:	f000 fcbc 	bl	8004038 <_sbrk_r>
 80036c0:	6030      	str	r0, [r6, #0]
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 fcb7 	bl	8004038 <_sbrk_r>
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	d00a      	beq.n	80036e4 <sbrk_aligned+0x34>
 80036ce:	1cc4      	adds	r4, r0, #3
 80036d0:	f024 0403 	bic.w	r4, r4, #3
 80036d4:	42a0      	cmp	r0, r4
 80036d6:	d007      	beq.n	80036e8 <sbrk_aligned+0x38>
 80036d8:	1a21      	subs	r1, r4, r0
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 fcac 	bl	8004038 <_sbrk_r>
 80036e0:	3001      	adds	r0, #1
 80036e2:	d101      	bne.n	80036e8 <sbrk_aligned+0x38>
 80036e4:	f04f 34ff 	mov.w	r4, #4294967295
 80036e8:	4620      	mov	r0, r4
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	20000294 	.word	0x20000294

080036f0 <_malloc_r>:
 80036f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f4:	1ccd      	adds	r5, r1, #3
 80036f6:	f025 0503 	bic.w	r5, r5, #3
 80036fa:	3508      	adds	r5, #8
 80036fc:	2d0c      	cmp	r5, #12
 80036fe:	bf38      	it	cc
 8003700:	250c      	movcc	r5, #12
 8003702:	2d00      	cmp	r5, #0
 8003704:	4607      	mov	r7, r0
 8003706:	db01      	blt.n	800370c <_malloc_r+0x1c>
 8003708:	42a9      	cmp	r1, r5
 800370a:	d905      	bls.n	8003718 <_malloc_r+0x28>
 800370c:	230c      	movs	r3, #12
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	2600      	movs	r6, #0
 8003712:	4630      	mov	r0, r6
 8003714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037ec <_malloc_r+0xfc>
 800371c:	f000 f868 	bl	80037f0 <__malloc_lock>
 8003720:	f8d8 3000 	ldr.w	r3, [r8]
 8003724:	461c      	mov	r4, r3
 8003726:	bb5c      	cbnz	r4, 8003780 <_malloc_r+0x90>
 8003728:	4629      	mov	r1, r5
 800372a:	4638      	mov	r0, r7
 800372c:	f7ff ffc0 	bl	80036b0 <sbrk_aligned>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	4604      	mov	r4, r0
 8003734:	d155      	bne.n	80037e2 <_malloc_r+0xf2>
 8003736:	f8d8 4000 	ldr.w	r4, [r8]
 800373a:	4626      	mov	r6, r4
 800373c:	2e00      	cmp	r6, #0
 800373e:	d145      	bne.n	80037cc <_malloc_r+0xdc>
 8003740:	2c00      	cmp	r4, #0
 8003742:	d048      	beq.n	80037d6 <_malloc_r+0xe6>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	4631      	mov	r1, r6
 8003748:	4638      	mov	r0, r7
 800374a:	eb04 0903 	add.w	r9, r4, r3
 800374e:	f000 fc73 	bl	8004038 <_sbrk_r>
 8003752:	4581      	cmp	r9, r0
 8003754:	d13f      	bne.n	80037d6 <_malloc_r+0xe6>
 8003756:	6821      	ldr	r1, [r4, #0]
 8003758:	1a6d      	subs	r5, r5, r1
 800375a:	4629      	mov	r1, r5
 800375c:	4638      	mov	r0, r7
 800375e:	f7ff ffa7 	bl	80036b0 <sbrk_aligned>
 8003762:	3001      	adds	r0, #1
 8003764:	d037      	beq.n	80037d6 <_malloc_r+0xe6>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	442b      	add	r3, r5
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	f8d8 3000 	ldr.w	r3, [r8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d038      	beq.n	80037e6 <_malloc_r+0xf6>
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	42a2      	cmp	r2, r4
 8003778:	d12b      	bne.n	80037d2 <_malloc_r+0xe2>
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	e00f      	b.n	80037a0 <_malloc_r+0xb0>
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	1b52      	subs	r2, r2, r5
 8003784:	d41f      	bmi.n	80037c6 <_malloc_r+0xd6>
 8003786:	2a0b      	cmp	r2, #11
 8003788:	d917      	bls.n	80037ba <_malloc_r+0xca>
 800378a:	1961      	adds	r1, r4, r5
 800378c:	42a3      	cmp	r3, r4
 800378e:	6025      	str	r5, [r4, #0]
 8003790:	bf18      	it	ne
 8003792:	6059      	strne	r1, [r3, #4]
 8003794:	6863      	ldr	r3, [r4, #4]
 8003796:	bf08      	it	eq
 8003798:	f8c8 1000 	streq.w	r1, [r8]
 800379c:	5162      	str	r2, [r4, r5]
 800379e:	604b      	str	r3, [r1, #4]
 80037a0:	4638      	mov	r0, r7
 80037a2:	f104 060b 	add.w	r6, r4, #11
 80037a6:	f000 f829 	bl	80037fc <__malloc_unlock>
 80037aa:	f026 0607 	bic.w	r6, r6, #7
 80037ae:	1d23      	adds	r3, r4, #4
 80037b0:	1af2      	subs	r2, r6, r3
 80037b2:	d0ae      	beq.n	8003712 <_malloc_r+0x22>
 80037b4:	1b9b      	subs	r3, r3, r6
 80037b6:	50a3      	str	r3, [r4, r2]
 80037b8:	e7ab      	b.n	8003712 <_malloc_r+0x22>
 80037ba:	42a3      	cmp	r3, r4
 80037bc:	6862      	ldr	r2, [r4, #4]
 80037be:	d1dd      	bne.n	800377c <_malloc_r+0x8c>
 80037c0:	f8c8 2000 	str.w	r2, [r8]
 80037c4:	e7ec      	b.n	80037a0 <_malloc_r+0xb0>
 80037c6:	4623      	mov	r3, r4
 80037c8:	6864      	ldr	r4, [r4, #4]
 80037ca:	e7ac      	b.n	8003726 <_malloc_r+0x36>
 80037cc:	4634      	mov	r4, r6
 80037ce:	6876      	ldr	r6, [r6, #4]
 80037d0:	e7b4      	b.n	800373c <_malloc_r+0x4c>
 80037d2:	4613      	mov	r3, r2
 80037d4:	e7cc      	b.n	8003770 <_malloc_r+0x80>
 80037d6:	230c      	movs	r3, #12
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4638      	mov	r0, r7
 80037dc:	f000 f80e 	bl	80037fc <__malloc_unlock>
 80037e0:	e797      	b.n	8003712 <_malloc_r+0x22>
 80037e2:	6025      	str	r5, [r4, #0]
 80037e4:	e7dc      	b.n	80037a0 <_malloc_r+0xb0>
 80037e6:	605b      	str	r3, [r3, #4]
 80037e8:	deff      	udf	#255	; 0xff
 80037ea:	bf00      	nop
 80037ec:	20000290 	.word	0x20000290

080037f0 <__malloc_lock>:
 80037f0:	4801      	ldr	r0, [pc, #4]	; (80037f8 <__malloc_lock+0x8>)
 80037f2:	f7ff bf0f 	b.w	8003614 <__retarget_lock_acquire_recursive>
 80037f6:	bf00      	nop
 80037f8:	2000028c 	.word	0x2000028c

080037fc <__malloc_unlock>:
 80037fc:	4801      	ldr	r0, [pc, #4]	; (8003804 <__malloc_unlock+0x8>)
 80037fe:	f7ff bf0a 	b.w	8003616 <__retarget_lock_release_recursive>
 8003802:	bf00      	nop
 8003804:	2000028c 	.word	0x2000028c

08003808 <__sfputc_r>:
 8003808:	6893      	ldr	r3, [r2, #8]
 800380a:	3b01      	subs	r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	b410      	push	{r4}
 8003810:	6093      	str	r3, [r2, #8]
 8003812:	da08      	bge.n	8003826 <__sfputc_r+0x1e>
 8003814:	6994      	ldr	r4, [r2, #24]
 8003816:	42a3      	cmp	r3, r4
 8003818:	db01      	blt.n	800381e <__sfputc_r+0x16>
 800381a:	290a      	cmp	r1, #10
 800381c:	d103      	bne.n	8003826 <__sfputc_r+0x1e>
 800381e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003822:	f000 bb73 	b.w	8003f0c <__swbuf_r>
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	1c58      	adds	r0, r3, #1
 800382a:	6010      	str	r0, [r2, #0]
 800382c:	7019      	strb	r1, [r3, #0]
 800382e:	4608      	mov	r0, r1
 8003830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003834:	4770      	bx	lr

08003836 <__sfputs_r>:
 8003836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003838:	4606      	mov	r6, r0
 800383a:	460f      	mov	r7, r1
 800383c:	4614      	mov	r4, r2
 800383e:	18d5      	adds	r5, r2, r3
 8003840:	42ac      	cmp	r4, r5
 8003842:	d101      	bne.n	8003848 <__sfputs_r+0x12>
 8003844:	2000      	movs	r0, #0
 8003846:	e007      	b.n	8003858 <__sfputs_r+0x22>
 8003848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800384c:	463a      	mov	r2, r7
 800384e:	4630      	mov	r0, r6
 8003850:	f7ff ffda 	bl	8003808 <__sfputc_r>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d1f3      	bne.n	8003840 <__sfputs_r+0xa>
 8003858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800385c <_vfiprintf_r>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	460d      	mov	r5, r1
 8003862:	b09d      	sub	sp, #116	; 0x74
 8003864:	4614      	mov	r4, r2
 8003866:	4698      	mov	r8, r3
 8003868:	4606      	mov	r6, r0
 800386a:	b118      	cbz	r0, 8003874 <_vfiprintf_r+0x18>
 800386c:	6a03      	ldr	r3, [r0, #32]
 800386e:	b90b      	cbnz	r3, 8003874 <_vfiprintf_r+0x18>
 8003870:	f7ff fdcc 	bl	800340c <__sinit>
 8003874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003876:	07d9      	lsls	r1, r3, #31
 8003878:	d405      	bmi.n	8003886 <_vfiprintf_r+0x2a>
 800387a:	89ab      	ldrh	r3, [r5, #12]
 800387c:	059a      	lsls	r2, r3, #22
 800387e:	d402      	bmi.n	8003886 <_vfiprintf_r+0x2a>
 8003880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003882:	f7ff fec7 	bl	8003614 <__retarget_lock_acquire_recursive>
 8003886:	89ab      	ldrh	r3, [r5, #12]
 8003888:	071b      	lsls	r3, r3, #28
 800388a:	d501      	bpl.n	8003890 <_vfiprintf_r+0x34>
 800388c:	692b      	ldr	r3, [r5, #16]
 800388e:	b99b      	cbnz	r3, 80038b8 <_vfiprintf_r+0x5c>
 8003890:	4629      	mov	r1, r5
 8003892:	4630      	mov	r0, r6
 8003894:	f000 fb78 	bl	8003f88 <__swsetup_r>
 8003898:	b170      	cbz	r0, 80038b8 <_vfiprintf_r+0x5c>
 800389a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800389c:	07dc      	lsls	r4, r3, #31
 800389e:	d504      	bpl.n	80038aa <_vfiprintf_r+0x4e>
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	b01d      	add	sp, #116	; 0x74
 80038a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038aa:	89ab      	ldrh	r3, [r5, #12]
 80038ac:	0598      	lsls	r0, r3, #22
 80038ae:	d4f7      	bmi.n	80038a0 <_vfiprintf_r+0x44>
 80038b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038b2:	f7ff feb0 	bl	8003616 <__retarget_lock_release_recursive>
 80038b6:	e7f3      	b.n	80038a0 <_vfiprintf_r+0x44>
 80038b8:	2300      	movs	r3, #0
 80038ba:	9309      	str	r3, [sp, #36]	; 0x24
 80038bc:	2320      	movs	r3, #32
 80038be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038c6:	2330      	movs	r3, #48	; 0x30
 80038c8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003a7c <_vfiprintf_r+0x220>
 80038cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038d0:	f04f 0901 	mov.w	r9, #1
 80038d4:	4623      	mov	r3, r4
 80038d6:	469a      	mov	sl, r3
 80038d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038dc:	b10a      	cbz	r2, 80038e2 <_vfiprintf_r+0x86>
 80038de:	2a25      	cmp	r2, #37	; 0x25
 80038e0:	d1f9      	bne.n	80038d6 <_vfiprintf_r+0x7a>
 80038e2:	ebba 0b04 	subs.w	fp, sl, r4
 80038e6:	d00b      	beq.n	8003900 <_vfiprintf_r+0xa4>
 80038e8:	465b      	mov	r3, fp
 80038ea:	4622      	mov	r2, r4
 80038ec:	4629      	mov	r1, r5
 80038ee:	4630      	mov	r0, r6
 80038f0:	f7ff ffa1 	bl	8003836 <__sfputs_r>
 80038f4:	3001      	adds	r0, #1
 80038f6:	f000 80a9 	beq.w	8003a4c <_vfiprintf_r+0x1f0>
 80038fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038fc:	445a      	add	r2, fp
 80038fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003900:	f89a 3000 	ldrb.w	r3, [sl]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a1 	beq.w	8003a4c <_vfiprintf_r+0x1f0>
 800390a:	2300      	movs	r3, #0
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003914:	f10a 0a01 	add.w	sl, sl, #1
 8003918:	9304      	str	r3, [sp, #16]
 800391a:	9307      	str	r3, [sp, #28]
 800391c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003920:	931a      	str	r3, [sp, #104]	; 0x68
 8003922:	4654      	mov	r4, sl
 8003924:	2205      	movs	r2, #5
 8003926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800392a:	4854      	ldr	r0, [pc, #336]	; (8003a7c <_vfiprintf_r+0x220>)
 800392c:	f7fc fc50 	bl	80001d0 <memchr>
 8003930:	9a04      	ldr	r2, [sp, #16]
 8003932:	b9d8      	cbnz	r0, 800396c <_vfiprintf_r+0x110>
 8003934:	06d1      	lsls	r1, r2, #27
 8003936:	bf44      	itt	mi
 8003938:	2320      	movmi	r3, #32
 800393a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800393e:	0713      	lsls	r3, r2, #28
 8003940:	bf44      	itt	mi
 8003942:	232b      	movmi	r3, #43	; 0x2b
 8003944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003948:	f89a 3000 	ldrb.w	r3, [sl]
 800394c:	2b2a      	cmp	r3, #42	; 0x2a
 800394e:	d015      	beq.n	800397c <_vfiprintf_r+0x120>
 8003950:	9a07      	ldr	r2, [sp, #28]
 8003952:	4654      	mov	r4, sl
 8003954:	2000      	movs	r0, #0
 8003956:	f04f 0c0a 	mov.w	ip, #10
 800395a:	4621      	mov	r1, r4
 800395c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003960:	3b30      	subs	r3, #48	; 0x30
 8003962:	2b09      	cmp	r3, #9
 8003964:	d94d      	bls.n	8003a02 <_vfiprintf_r+0x1a6>
 8003966:	b1b0      	cbz	r0, 8003996 <_vfiprintf_r+0x13a>
 8003968:	9207      	str	r2, [sp, #28]
 800396a:	e014      	b.n	8003996 <_vfiprintf_r+0x13a>
 800396c:	eba0 0308 	sub.w	r3, r0, r8
 8003970:	fa09 f303 	lsl.w	r3, r9, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	9304      	str	r3, [sp, #16]
 8003978:	46a2      	mov	sl, r4
 800397a:	e7d2      	b.n	8003922 <_vfiprintf_r+0xc6>
 800397c:	9b03      	ldr	r3, [sp, #12]
 800397e:	1d19      	adds	r1, r3, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	9103      	str	r1, [sp, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	bfbb      	ittet	lt
 8003988:	425b      	neglt	r3, r3
 800398a:	f042 0202 	orrlt.w	r2, r2, #2
 800398e:	9307      	strge	r3, [sp, #28]
 8003990:	9307      	strlt	r3, [sp, #28]
 8003992:	bfb8      	it	lt
 8003994:	9204      	strlt	r2, [sp, #16]
 8003996:	7823      	ldrb	r3, [r4, #0]
 8003998:	2b2e      	cmp	r3, #46	; 0x2e
 800399a:	d10c      	bne.n	80039b6 <_vfiprintf_r+0x15a>
 800399c:	7863      	ldrb	r3, [r4, #1]
 800399e:	2b2a      	cmp	r3, #42	; 0x2a
 80039a0:	d134      	bne.n	8003a0c <_vfiprintf_r+0x1b0>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	1d1a      	adds	r2, r3, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	9203      	str	r2, [sp, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bfb8      	it	lt
 80039ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80039b2:	3402      	adds	r4, #2
 80039b4:	9305      	str	r3, [sp, #20]
 80039b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003a8c <_vfiprintf_r+0x230>
 80039ba:	7821      	ldrb	r1, [r4, #0]
 80039bc:	2203      	movs	r2, #3
 80039be:	4650      	mov	r0, sl
 80039c0:	f7fc fc06 	bl	80001d0 <memchr>
 80039c4:	b138      	cbz	r0, 80039d6 <_vfiprintf_r+0x17a>
 80039c6:	9b04      	ldr	r3, [sp, #16]
 80039c8:	eba0 000a 	sub.w	r0, r0, sl
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	4082      	lsls	r2, r0
 80039d0:	4313      	orrs	r3, r2
 80039d2:	3401      	adds	r4, #1
 80039d4:	9304      	str	r3, [sp, #16]
 80039d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039da:	4829      	ldr	r0, [pc, #164]	; (8003a80 <_vfiprintf_r+0x224>)
 80039dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039e0:	2206      	movs	r2, #6
 80039e2:	f7fc fbf5 	bl	80001d0 <memchr>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d03f      	beq.n	8003a6a <_vfiprintf_r+0x20e>
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <_vfiprintf_r+0x228>)
 80039ec:	bb1b      	cbnz	r3, 8003a36 <_vfiprintf_r+0x1da>
 80039ee:	9b03      	ldr	r3, [sp, #12]
 80039f0:	3307      	adds	r3, #7
 80039f2:	f023 0307 	bic.w	r3, r3, #7
 80039f6:	3308      	adds	r3, #8
 80039f8:	9303      	str	r3, [sp, #12]
 80039fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039fc:	443b      	add	r3, r7
 80039fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003a00:	e768      	b.n	80038d4 <_vfiprintf_r+0x78>
 8003a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a06:	460c      	mov	r4, r1
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e7a6      	b.n	800395a <_vfiprintf_r+0xfe>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	3401      	adds	r4, #1
 8003a10:	9305      	str	r3, [sp, #20]
 8003a12:	4619      	mov	r1, r3
 8003a14:	f04f 0c0a 	mov.w	ip, #10
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a1e:	3a30      	subs	r2, #48	; 0x30
 8003a20:	2a09      	cmp	r2, #9
 8003a22:	d903      	bls.n	8003a2c <_vfiprintf_r+0x1d0>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0c6      	beq.n	80039b6 <_vfiprintf_r+0x15a>
 8003a28:	9105      	str	r1, [sp, #20]
 8003a2a:	e7c4      	b.n	80039b6 <_vfiprintf_r+0x15a>
 8003a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a30:	4604      	mov	r4, r0
 8003a32:	2301      	movs	r3, #1
 8003a34:	e7f0      	b.n	8003a18 <_vfiprintf_r+0x1bc>
 8003a36:	ab03      	add	r3, sp, #12
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	462a      	mov	r2, r5
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <_vfiprintf_r+0x22c>)
 8003a3e:	a904      	add	r1, sp, #16
 8003a40:	4630      	mov	r0, r6
 8003a42:	f3af 8000 	nop.w
 8003a46:	4607      	mov	r7, r0
 8003a48:	1c78      	adds	r0, r7, #1
 8003a4a:	d1d6      	bne.n	80039fa <_vfiprintf_r+0x19e>
 8003a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a4e:	07d9      	lsls	r1, r3, #31
 8003a50:	d405      	bmi.n	8003a5e <_vfiprintf_r+0x202>
 8003a52:	89ab      	ldrh	r3, [r5, #12]
 8003a54:	059a      	lsls	r2, r3, #22
 8003a56:	d402      	bmi.n	8003a5e <_vfiprintf_r+0x202>
 8003a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a5a:	f7ff fddc 	bl	8003616 <__retarget_lock_release_recursive>
 8003a5e:	89ab      	ldrh	r3, [r5, #12]
 8003a60:	065b      	lsls	r3, r3, #25
 8003a62:	f53f af1d 	bmi.w	80038a0 <_vfiprintf_r+0x44>
 8003a66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a68:	e71c      	b.n	80038a4 <_vfiprintf_r+0x48>
 8003a6a:	ab03      	add	r3, sp, #12
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	462a      	mov	r2, r5
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <_vfiprintf_r+0x22c>)
 8003a72:	a904      	add	r1, sp, #16
 8003a74:	4630      	mov	r0, r6
 8003a76:	f000 f879 	bl	8003b6c <_printf_i>
 8003a7a:	e7e4      	b.n	8003a46 <_vfiprintf_r+0x1ea>
 8003a7c:	08004218 	.word	0x08004218
 8003a80:	08004222 	.word	0x08004222
 8003a84:	00000000 	.word	0x00000000
 8003a88:	08003837 	.word	0x08003837
 8003a8c:	0800421e 	.word	0x0800421e

08003a90 <_printf_common>:
 8003a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a94:	4616      	mov	r6, r2
 8003a96:	4699      	mov	r9, r3
 8003a98:	688a      	ldr	r2, [r1, #8]
 8003a9a:	690b      	ldr	r3, [r1, #16]
 8003a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	bfb8      	it	lt
 8003aa4:	4613      	movlt	r3, r2
 8003aa6:	6033      	str	r3, [r6, #0]
 8003aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aac:	4607      	mov	r7, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	b10a      	cbz	r2, 8003ab6 <_printf_common+0x26>
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	6033      	str	r3, [r6, #0]
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	0699      	lsls	r1, r3, #26
 8003aba:	bf42      	ittt	mi
 8003abc:	6833      	ldrmi	r3, [r6, #0]
 8003abe:	3302      	addmi	r3, #2
 8003ac0:	6033      	strmi	r3, [r6, #0]
 8003ac2:	6825      	ldr	r5, [r4, #0]
 8003ac4:	f015 0506 	ands.w	r5, r5, #6
 8003ac8:	d106      	bne.n	8003ad8 <_printf_common+0x48>
 8003aca:	f104 0a19 	add.w	sl, r4, #25
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	6832      	ldr	r2, [r6, #0]
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	42ab      	cmp	r3, r5
 8003ad6:	dc26      	bgt.n	8003b26 <_printf_common+0x96>
 8003ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003adc:	1e13      	subs	r3, r2, #0
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	bf18      	it	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	0692      	lsls	r2, r2, #26
 8003ae6:	d42b      	bmi.n	8003b40 <_printf_common+0xb0>
 8003ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aec:	4649      	mov	r1, r9
 8003aee:	4638      	mov	r0, r7
 8003af0:	47c0      	blx	r8
 8003af2:	3001      	adds	r0, #1
 8003af4:	d01e      	beq.n	8003b34 <_printf_common+0xa4>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	6922      	ldr	r2, [r4, #16]
 8003afa:	f003 0306 	and.w	r3, r3, #6
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	bf02      	ittt	eq
 8003b02:	68e5      	ldreq	r5, [r4, #12]
 8003b04:	6833      	ldreq	r3, [r6, #0]
 8003b06:	1aed      	subeq	r5, r5, r3
 8003b08:	68a3      	ldr	r3, [r4, #8]
 8003b0a:	bf0c      	ite	eq
 8003b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b10:	2500      	movne	r5, #0
 8003b12:	4293      	cmp	r3, r2
 8003b14:	bfc4      	itt	gt
 8003b16:	1a9b      	subgt	r3, r3, r2
 8003b18:	18ed      	addgt	r5, r5, r3
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	341a      	adds	r4, #26
 8003b1e:	42b5      	cmp	r5, r6
 8003b20:	d11a      	bne.n	8003b58 <_printf_common+0xc8>
 8003b22:	2000      	movs	r0, #0
 8003b24:	e008      	b.n	8003b38 <_printf_common+0xa8>
 8003b26:	2301      	movs	r3, #1
 8003b28:	4652      	mov	r2, sl
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	47c0      	blx	r8
 8003b30:	3001      	adds	r0, #1
 8003b32:	d103      	bne.n	8003b3c <_printf_common+0xac>
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3c:	3501      	adds	r5, #1
 8003b3e:	e7c6      	b.n	8003ace <_printf_common+0x3e>
 8003b40:	18e1      	adds	r1, r4, r3
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	2030      	movs	r0, #48	; 0x30
 8003b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b4a:	4422      	add	r2, r4
 8003b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b54:	3302      	adds	r3, #2
 8003b56:	e7c7      	b.n	8003ae8 <_printf_common+0x58>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	4638      	mov	r0, r7
 8003b60:	47c0      	blx	r8
 8003b62:	3001      	adds	r0, #1
 8003b64:	d0e6      	beq.n	8003b34 <_printf_common+0xa4>
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7d9      	b.n	8003b1e <_printf_common+0x8e>
	...

08003b6c <_printf_i>:
 8003b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b70:	7e0f      	ldrb	r7, [r1, #24]
 8003b72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b74:	2f78      	cmp	r7, #120	; 0x78
 8003b76:	4691      	mov	r9, r2
 8003b78:	4680      	mov	r8, r0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	469a      	mov	sl, r3
 8003b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b82:	d807      	bhi.n	8003b94 <_printf_i+0x28>
 8003b84:	2f62      	cmp	r7, #98	; 0x62
 8003b86:	d80a      	bhi.n	8003b9e <_printf_i+0x32>
 8003b88:	2f00      	cmp	r7, #0
 8003b8a:	f000 80d4 	beq.w	8003d36 <_printf_i+0x1ca>
 8003b8e:	2f58      	cmp	r7, #88	; 0x58
 8003b90:	f000 80c0 	beq.w	8003d14 <_printf_i+0x1a8>
 8003b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b9c:	e03a      	b.n	8003c14 <_printf_i+0xa8>
 8003b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ba2:	2b15      	cmp	r3, #21
 8003ba4:	d8f6      	bhi.n	8003b94 <_printf_i+0x28>
 8003ba6:	a101      	add	r1, pc, #4	; (adr r1, 8003bac <_printf_i+0x40>)
 8003ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bac:	08003c05 	.word	0x08003c05
 8003bb0:	08003c19 	.word	0x08003c19
 8003bb4:	08003b95 	.word	0x08003b95
 8003bb8:	08003b95 	.word	0x08003b95
 8003bbc:	08003b95 	.word	0x08003b95
 8003bc0:	08003b95 	.word	0x08003b95
 8003bc4:	08003c19 	.word	0x08003c19
 8003bc8:	08003b95 	.word	0x08003b95
 8003bcc:	08003b95 	.word	0x08003b95
 8003bd0:	08003b95 	.word	0x08003b95
 8003bd4:	08003b95 	.word	0x08003b95
 8003bd8:	08003d1d 	.word	0x08003d1d
 8003bdc:	08003c45 	.word	0x08003c45
 8003be0:	08003cd7 	.word	0x08003cd7
 8003be4:	08003b95 	.word	0x08003b95
 8003be8:	08003b95 	.word	0x08003b95
 8003bec:	08003d3f 	.word	0x08003d3f
 8003bf0:	08003b95 	.word	0x08003b95
 8003bf4:	08003c45 	.word	0x08003c45
 8003bf8:	08003b95 	.word	0x08003b95
 8003bfc:	08003b95 	.word	0x08003b95
 8003c00:	08003cdf 	.word	0x08003cdf
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	1d1a      	adds	r2, r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	602a      	str	r2, [r5, #0]
 8003c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c14:	2301      	movs	r3, #1
 8003c16:	e09f      	b.n	8003d58 <_printf_i+0x1ec>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	682b      	ldr	r3, [r5, #0]
 8003c1c:	0607      	lsls	r7, r0, #24
 8003c1e:	f103 0104 	add.w	r1, r3, #4
 8003c22:	6029      	str	r1, [r5, #0]
 8003c24:	d501      	bpl.n	8003c2a <_printf_i+0xbe>
 8003c26:	681e      	ldr	r6, [r3, #0]
 8003c28:	e003      	b.n	8003c32 <_printf_i+0xc6>
 8003c2a:	0646      	lsls	r6, r0, #25
 8003c2c:	d5fb      	bpl.n	8003c26 <_printf_i+0xba>
 8003c2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c32:	2e00      	cmp	r6, #0
 8003c34:	da03      	bge.n	8003c3e <_printf_i+0xd2>
 8003c36:	232d      	movs	r3, #45	; 0x2d
 8003c38:	4276      	negs	r6, r6
 8003c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c3e:	485a      	ldr	r0, [pc, #360]	; (8003da8 <_printf_i+0x23c>)
 8003c40:	230a      	movs	r3, #10
 8003c42:	e012      	b.n	8003c6a <_printf_i+0xfe>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	6820      	ldr	r0, [r4, #0]
 8003c48:	1d19      	adds	r1, r3, #4
 8003c4a:	6029      	str	r1, [r5, #0]
 8003c4c:	0605      	lsls	r5, r0, #24
 8003c4e:	d501      	bpl.n	8003c54 <_printf_i+0xe8>
 8003c50:	681e      	ldr	r6, [r3, #0]
 8003c52:	e002      	b.n	8003c5a <_printf_i+0xee>
 8003c54:	0641      	lsls	r1, r0, #25
 8003c56:	d5fb      	bpl.n	8003c50 <_printf_i+0xe4>
 8003c58:	881e      	ldrh	r6, [r3, #0]
 8003c5a:	4853      	ldr	r0, [pc, #332]	; (8003da8 <_printf_i+0x23c>)
 8003c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c5e:	bf0c      	ite	eq
 8003c60:	2308      	moveq	r3, #8
 8003c62:	230a      	movne	r3, #10
 8003c64:	2100      	movs	r1, #0
 8003c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c6a:	6865      	ldr	r5, [r4, #4]
 8003c6c:	60a5      	str	r5, [r4, #8]
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	bfa2      	ittt	ge
 8003c72:	6821      	ldrge	r1, [r4, #0]
 8003c74:	f021 0104 	bicge.w	r1, r1, #4
 8003c78:	6021      	strge	r1, [r4, #0]
 8003c7a:	b90e      	cbnz	r6, 8003c80 <_printf_i+0x114>
 8003c7c:	2d00      	cmp	r5, #0
 8003c7e:	d04b      	beq.n	8003d18 <_printf_i+0x1ac>
 8003c80:	4615      	mov	r5, r2
 8003c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c86:	fb03 6711 	mls	r7, r3, r1, r6
 8003c8a:	5dc7      	ldrb	r7, [r0, r7]
 8003c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c90:	4637      	mov	r7, r6
 8003c92:	42bb      	cmp	r3, r7
 8003c94:	460e      	mov	r6, r1
 8003c96:	d9f4      	bls.n	8003c82 <_printf_i+0x116>
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d10b      	bne.n	8003cb4 <_printf_i+0x148>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	07de      	lsls	r6, r3, #31
 8003ca0:	d508      	bpl.n	8003cb4 <_printf_i+0x148>
 8003ca2:	6923      	ldr	r3, [r4, #16]
 8003ca4:	6861      	ldr	r1, [r4, #4]
 8003ca6:	4299      	cmp	r1, r3
 8003ca8:	bfde      	ittt	le
 8003caa:	2330      	movle	r3, #48	; 0x30
 8003cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cb4:	1b52      	subs	r2, r2, r5
 8003cb6:	6122      	str	r2, [r4, #16]
 8003cb8:	f8cd a000 	str.w	sl, [sp]
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	aa03      	add	r2, sp, #12
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	f7ff fee4 	bl	8003a90 <_printf_common>
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d14a      	bne.n	8003d62 <_printf_i+0x1f6>
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	b004      	add	sp, #16
 8003cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	f043 0320 	orr.w	r3, r3, #32
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	4833      	ldr	r0, [pc, #204]	; (8003dac <_printf_i+0x240>)
 8003ce0:	2778      	movs	r7, #120	; 0x78
 8003ce2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	6829      	ldr	r1, [r5, #0]
 8003cea:	061f      	lsls	r7, r3, #24
 8003cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cf0:	d402      	bmi.n	8003cf8 <_printf_i+0x18c>
 8003cf2:	065f      	lsls	r7, r3, #25
 8003cf4:	bf48      	it	mi
 8003cf6:	b2b6      	uxthmi	r6, r6
 8003cf8:	07df      	lsls	r7, r3, #31
 8003cfa:	bf48      	it	mi
 8003cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8003d00:	6029      	str	r1, [r5, #0]
 8003d02:	bf48      	it	mi
 8003d04:	6023      	strmi	r3, [r4, #0]
 8003d06:	b91e      	cbnz	r6, 8003d10 <_printf_i+0x1a4>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	f023 0320 	bic.w	r3, r3, #32
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	2310      	movs	r3, #16
 8003d12:	e7a7      	b.n	8003c64 <_printf_i+0xf8>
 8003d14:	4824      	ldr	r0, [pc, #144]	; (8003da8 <_printf_i+0x23c>)
 8003d16:	e7e4      	b.n	8003ce2 <_printf_i+0x176>
 8003d18:	4615      	mov	r5, r2
 8003d1a:	e7bd      	b.n	8003c98 <_printf_i+0x12c>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	6826      	ldr	r6, [r4, #0]
 8003d20:	6961      	ldr	r1, [r4, #20]
 8003d22:	1d18      	adds	r0, r3, #4
 8003d24:	6028      	str	r0, [r5, #0]
 8003d26:	0635      	lsls	r5, r6, #24
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	d501      	bpl.n	8003d30 <_printf_i+0x1c4>
 8003d2c:	6019      	str	r1, [r3, #0]
 8003d2e:	e002      	b.n	8003d36 <_printf_i+0x1ca>
 8003d30:	0670      	lsls	r0, r6, #25
 8003d32:	d5fb      	bpl.n	8003d2c <_printf_i+0x1c0>
 8003d34:	8019      	strh	r1, [r3, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	6123      	str	r3, [r4, #16]
 8003d3a:	4615      	mov	r5, r2
 8003d3c:	e7bc      	b.n	8003cb8 <_printf_i+0x14c>
 8003d3e:	682b      	ldr	r3, [r5, #0]
 8003d40:	1d1a      	adds	r2, r3, #4
 8003d42:	602a      	str	r2, [r5, #0]
 8003d44:	681d      	ldr	r5, [r3, #0]
 8003d46:	6862      	ldr	r2, [r4, #4]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7fc fa40 	bl	80001d0 <memchr>
 8003d50:	b108      	cbz	r0, 8003d56 <_printf_i+0x1ea>
 8003d52:	1b40      	subs	r0, r0, r5
 8003d54:	6060      	str	r0, [r4, #4]
 8003d56:	6863      	ldr	r3, [r4, #4]
 8003d58:	6123      	str	r3, [r4, #16]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d60:	e7aa      	b.n	8003cb8 <_printf_i+0x14c>
 8003d62:	6923      	ldr	r3, [r4, #16]
 8003d64:	462a      	mov	r2, r5
 8003d66:	4649      	mov	r1, r9
 8003d68:	4640      	mov	r0, r8
 8003d6a:	47d0      	blx	sl
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d0ad      	beq.n	8003ccc <_printf_i+0x160>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	079b      	lsls	r3, r3, #30
 8003d74:	d413      	bmi.n	8003d9e <_printf_i+0x232>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	4298      	cmp	r0, r3
 8003d7c:	bfb8      	it	lt
 8003d7e:	4618      	movlt	r0, r3
 8003d80:	e7a6      	b.n	8003cd0 <_printf_i+0x164>
 8003d82:	2301      	movs	r3, #1
 8003d84:	4632      	mov	r2, r6
 8003d86:	4649      	mov	r1, r9
 8003d88:	4640      	mov	r0, r8
 8003d8a:	47d0      	blx	sl
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d09d      	beq.n	8003ccc <_printf_i+0x160>
 8003d90:	3501      	adds	r5, #1
 8003d92:	68e3      	ldr	r3, [r4, #12]
 8003d94:	9903      	ldr	r1, [sp, #12]
 8003d96:	1a5b      	subs	r3, r3, r1
 8003d98:	42ab      	cmp	r3, r5
 8003d9a:	dcf2      	bgt.n	8003d82 <_printf_i+0x216>
 8003d9c:	e7eb      	b.n	8003d76 <_printf_i+0x20a>
 8003d9e:	2500      	movs	r5, #0
 8003da0:	f104 0619 	add.w	r6, r4, #25
 8003da4:	e7f5      	b.n	8003d92 <_printf_i+0x226>
 8003da6:	bf00      	nop
 8003da8:	08004229 	.word	0x08004229
 8003dac:	0800423a 	.word	0x0800423a

08003db0 <__sflush_r>:
 8003db0:	898a      	ldrh	r2, [r1, #12]
 8003db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db6:	4605      	mov	r5, r0
 8003db8:	0710      	lsls	r0, r2, #28
 8003dba:	460c      	mov	r4, r1
 8003dbc:	d458      	bmi.n	8003e70 <__sflush_r+0xc0>
 8003dbe:	684b      	ldr	r3, [r1, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	dc05      	bgt.n	8003dd0 <__sflush_r+0x20>
 8003dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	dc02      	bgt.n	8003dd0 <__sflush_r+0x20>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	d0f9      	beq.n	8003dca <__sflush_r+0x1a>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ddc:	682f      	ldr	r7, [r5, #0]
 8003dde:	6a21      	ldr	r1, [r4, #32]
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	d032      	beq.n	8003e4a <__sflush_r+0x9a>
 8003de4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	075a      	lsls	r2, r3, #29
 8003dea:	d505      	bpl.n	8003df8 <__sflush_r+0x48>
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	1ac0      	subs	r0, r0, r3
 8003df0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003df2:	b10b      	cbz	r3, 8003df8 <__sflush_r+0x48>
 8003df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003df6:	1ac0      	subs	r0, r0, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dfe:	6a21      	ldr	r1, [r4, #32]
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b0      	blx	r6
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	d106      	bne.n	8003e18 <__sflush_r+0x68>
 8003e0a:	6829      	ldr	r1, [r5, #0]
 8003e0c:	291d      	cmp	r1, #29
 8003e0e:	d82b      	bhi.n	8003e68 <__sflush_r+0xb8>
 8003e10:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <__sflush_r+0x108>)
 8003e12:	410a      	asrs	r2, r1
 8003e14:	07d6      	lsls	r6, r2, #31
 8003e16:	d427      	bmi.n	8003e68 <__sflush_r+0xb8>
 8003e18:	2200      	movs	r2, #0
 8003e1a:	6062      	str	r2, [r4, #4]
 8003e1c:	04d9      	lsls	r1, r3, #19
 8003e1e:	6922      	ldr	r2, [r4, #16]
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	d504      	bpl.n	8003e2e <__sflush_r+0x7e>
 8003e24:	1c42      	adds	r2, r0, #1
 8003e26:	d101      	bne.n	8003e2c <__sflush_r+0x7c>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	b903      	cbnz	r3, 8003e2e <__sflush_r+0x7e>
 8003e2c:	6560      	str	r0, [r4, #84]	; 0x54
 8003e2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e30:	602f      	str	r7, [r5, #0]
 8003e32:	2900      	cmp	r1, #0
 8003e34:	d0c9      	beq.n	8003dca <__sflush_r+0x1a>
 8003e36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e3a:	4299      	cmp	r1, r3
 8003e3c:	d002      	beq.n	8003e44 <__sflush_r+0x94>
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f7ff fbea 	bl	8003618 <_free_r>
 8003e44:	2000      	movs	r0, #0
 8003e46:	6360      	str	r0, [r4, #52]	; 0x34
 8003e48:	e7c0      	b.n	8003dcc <__sflush_r+0x1c>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b0      	blx	r6
 8003e50:	1c41      	adds	r1, r0, #1
 8003e52:	d1c8      	bne.n	8003de6 <__sflush_r+0x36>
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0c5      	beq.n	8003de6 <__sflush_r+0x36>
 8003e5a:	2b1d      	cmp	r3, #29
 8003e5c:	d001      	beq.n	8003e62 <__sflush_r+0xb2>
 8003e5e:	2b16      	cmp	r3, #22
 8003e60:	d101      	bne.n	8003e66 <__sflush_r+0xb6>
 8003e62:	602f      	str	r7, [r5, #0]
 8003e64:	e7b1      	b.n	8003dca <__sflush_r+0x1a>
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	e7ad      	b.n	8003dcc <__sflush_r+0x1c>
 8003e70:	690f      	ldr	r7, [r1, #16]
 8003e72:	2f00      	cmp	r7, #0
 8003e74:	d0a9      	beq.n	8003dca <__sflush_r+0x1a>
 8003e76:	0793      	lsls	r3, r2, #30
 8003e78:	680e      	ldr	r6, [r1, #0]
 8003e7a:	bf08      	it	eq
 8003e7c:	694b      	ldreq	r3, [r1, #20]
 8003e7e:	600f      	str	r7, [r1, #0]
 8003e80:	bf18      	it	ne
 8003e82:	2300      	movne	r3, #0
 8003e84:	eba6 0807 	sub.w	r8, r6, r7
 8003e88:	608b      	str	r3, [r1, #8]
 8003e8a:	f1b8 0f00 	cmp.w	r8, #0
 8003e8e:	dd9c      	ble.n	8003dca <__sflush_r+0x1a>
 8003e90:	6a21      	ldr	r1, [r4, #32]
 8003e92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e94:	4643      	mov	r3, r8
 8003e96:	463a      	mov	r2, r7
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b0      	blx	r6
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	dc06      	bgt.n	8003eae <__sflush_r+0xfe>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	e78e      	b.n	8003dcc <__sflush_r+0x1c>
 8003eae:	4407      	add	r7, r0
 8003eb0:	eba8 0800 	sub.w	r8, r8, r0
 8003eb4:	e7e9      	b.n	8003e8a <__sflush_r+0xda>
 8003eb6:	bf00      	nop
 8003eb8:	dfbffffe 	.word	0xdfbffffe

08003ebc <_fflush_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	690b      	ldr	r3, [r1, #16]
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	b913      	cbnz	r3, 8003ecc <_fflush_r+0x10>
 8003ec6:	2500      	movs	r5, #0
 8003ec8:	4628      	mov	r0, r5
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	b118      	cbz	r0, 8003ed6 <_fflush_r+0x1a>
 8003ece:	6a03      	ldr	r3, [r0, #32]
 8003ed0:	b90b      	cbnz	r3, 8003ed6 <_fflush_r+0x1a>
 8003ed2:	f7ff fa9b 	bl	800340c <__sinit>
 8003ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f3      	beq.n	8003ec6 <_fflush_r+0xa>
 8003ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ee0:	07d0      	lsls	r0, r2, #31
 8003ee2:	d404      	bmi.n	8003eee <_fflush_r+0x32>
 8003ee4:	0599      	lsls	r1, r3, #22
 8003ee6:	d402      	bmi.n	8003eee <_fflush_r+0x32>
 8003ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eea:	f7ff fb93 	bl	8003614 <__retarget_lock_acquire_recursive>
 8003eee:	4628      	mov	r0, r5
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	f7ff ff5d 	bl	8003db0 <__sflush_r>
 8003ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ef8:	07da      	lsls	r2, r3, #31
 8003efa:	4605      	mov	r5, r0
 8003efc:	d4e4      	bmi.n	8003ec8 <_fflush_r+0xc>
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	059b      	lsls	r3, r3, #22
 8003f02:	d4e1      	bmi.n	8003ec8 <_fflush_r+0xc>
 8003f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f06:	f7ff fb86 	bl	8003616 <__retarget_lock_release_recursive>
 8003f0a:	e7dd      	b.n	8003ec8 <_fflush_r+0xc>

08003f0c <__swbuf_r>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	460e      	mov	r6, r1
 8003f10:	4614      	mov	r4, r2
 8003f12:	4605      	mov	r5, r0
 8003f14:	b118      	cbz	r0, 8003f1e <__swbuf_r+0x12>
 8003f16:	6a03      	ldr	r3, [r0, #32]
 8003f18:	b90b      	cbnz	r3, 8003f1e <__swbuf_r+0x12>
 8003f1a:	f7ff fa77 	bl	800340c <__sinit>
 8003f1e:	69a3      	ldr	r3, [r4, #24]
 8003f20:	60a3      	str	r3, [r4, #8]
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	071a      	lsls	r2, r3, #28
 8003f26:	d525      	bpl.n	8003f74 <__swbuf_r+0x68>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	b31b      	cbz	r3, 8003f74 <__swbuf_r+0x68>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	6922      	ldr	r2, [r4, #16]
 8003f30:	1a98      	subs	r0, r3, r2
 8003f32:	6963      	ldr	r3, [r4, #20]
 8003f34:	b2f6      	uxtb	r6, r6
 8003f36:	4283      	cmp	r3, r0
 8003f38:	4637      	mov	r7, r6
 8003f3a:	dc04      	bgt.n	8003f46 <__swbuf_r+0x3a>
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f7ff ffbc 	bl	8003ebc <_fflush_r>
 8003f44:	b9e0      	cbnz	r0, 8003f80 <__swbuf_r+0x74>
 8003f46:	68a3      	ldr	r3, [r4, #8]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	60a3      	str	r3, [r4, #8]
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	6022      	str	r2, [r4, #0]
 8003f52:	701e      	strb	r6, [r3, #0]
 8003f54:	6962      	ldr	r2, [r4, #20]
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d004      	beq.n	8003f66 <__swbuf_r+0x5a>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	07db      	lsls	r3, r3, #31
 8003f60:	d506      	bpl.n	8003f70 <__swbuf_r+0x64>
 8003f62:	2e0a      	cmp	r6, #10
 8003f64:	d104      	bne.n	8003f70 <__swbuf_r+0x64>
 8003f66:	4621      	mov	r1, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f7ff ffa7 	bl	8003ebc <_fflush_r>
 8003f6e:	b938      	cbnz	r0, 8003f80 <__swbuf_r+0x74>
 8003f70:	4638      	mov	r0, r7
 8003f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f74:	4621      	mov	r1, r4
 8003f76:	4628      	mov	r0, r5
 8003f78:	f000 f806 	bl	8003f88 <__swsetup_r>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d0d5      	beq.n	8003f2c <__swbuf_r+0x20>
 8003f80:	f04f 37ff 	mov.w	r7, #4294967295
 8003f84:	e7f4      	b.n	8003f70 <__swbuf_r+0x64>
	...

08003f88 <__swsetup_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <__swsetup_r+0xac>)
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	460c      	mov	r4, r1
 8003f92:	b118      	cbz	r0, 8003f9c <__swsetup_r+0x14>
 8003f94:	6a03      	ldr	r3, [r0, #32]
 8003f96:	b90b      	cbnz	r3, 8003f9c <__swsetup_r+0x14>
 8003f98:	f7ff fa38 	bl	800340c <__sinit>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fa2:	0718      	lsls	r0, r3, #28
 8003fa4:	d422      	bmi.n	8003fec <__swsetup_r+0x64>
 8003fa6:	06d9      	lsls	r1, r3, #27
 8003fa8:	d407      	bmi.n	8003fba <__swsetup_r+0x32>
 8003faa:	2309      	movs	r3, #9
 8003fac:	602b      	str	r3, [r5, #0]
 8003fae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e034      	b.n	8004024 <__swsetup_r+0x9c>
 8003fba:	0758      	lsls	r0, r3, #29
 8003fbc:	d512      	bpl.n	8003fe4 <__swsetup_r+0x5c>
 8003fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fc0:	b141      	cbz	r1, 8003fd4 <__swsetup_r+0x4c>
 8003fc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	d002      	beq.n	8003fd0 <__swsetup_r+0x48>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f7ff fb24 	bl	8003618 <_free_r>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6363      	str	r3, [r4, #52]	; 0x34
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6063      	str	r3, [r4, #4]
 8003fe0:	6923      	ldr	r3, [r4, #16]
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f043 0308 	orr.w	r3, r3, #8
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	b94b      	cbnz	r3, 8004004 <__swsetup_r+0x7c>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffa:	d003      	beq.n	8004004 <__swsetup_r+0x7c>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 f850 	bl	80040a4 <__smakebuf_r>
 8004004:	89a0      	ldrh	r0, [r4, #12]
 8004006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800400a:	f010 0301 	ands.w	r3, r0, #1
 800400e:	d00a      	beq.n	8004026 <__swsetup_r+0x9e>
 8004010:	2300      	movs	r3, #0
 8004012:	60a3      	str	r3, [r4, #8]
 8004014:	6963      	ldr	r3, [r4, #20]
 8004016:	425b      	negs	r3, r3
 8004018:	61a3      	str	r3, [r4, #24]
 800401a:	6923      	ldr	r3, [r4, #16]
 800401c:	b943      	cbnz	r3, 8004030 <__swsetup_r+0xa8>
 800401e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004022:	d1c4      	bne.n	8003fae <__swsetup_r+0x26>
 8004024:	bd38      	pop	{r3, r4, r5, pc}
 8004026:	0781      	lsls	r1, r0, #30
 8004028:	bf58      	it	pl
 800402a:	6963      	ldrpl	r3, [r4, #20]
 800402c:	60a3      	str	r3, [r4, #8]
 800402e:	e7f4      	b.n	800401a <__swsetup_r+0x92>
 8004030:	2000      	movs	r0, #0
 8004032:	e7f7      	b.n	8004024 <__swsetup_r+0x9c>
 8004034:	20000064 	.word	0x20000064

08004038 <_sbrk_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4d06      	ldr	r5, [pc, #24]	; (8004054 <_sbrk_r+0x1c>)
 800403c:	2300      	movs	r3, #0
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	f7fc ffe8 	bl	8001018 <_sbrk>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_sbrk_r+0x1a>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_sbrk_r+0x1a>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	20000288 	.word	0x20000288

08004058 <__swhatbuf_r>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	460c      	mov	r4, r1
 800405c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004060:	2900      	cmp	r1, #0
 8004062:	b096      	sub	sp, #88	; 0x58
 8004064:	4615      	mov	r5, r2
 8004066:	461e      	mov	r6, r3
 8004068:	da0d      	bge.n	8004086 <__swhatbuf_r+0x2e>
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	bf0c      	ite	eq
 8004076:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800407a:	2340      	movne	r3, #64	; 0x40
 800407c:	2000      	movs	r0, #0
 800407e:	6031      	str	r1, [r6, #0]
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	b016      	add	sp, #88	; 0x58
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	466a      	mov	r2, sp
 8004088:	f000 f848 	bl	800411c <_fstat_r>
 800408c:	2800      	cmp	r0, #0
 800408e:	dbec      	blt.n	800406a <__swhatbuf_r+0x12>
 8004090:	9901      	ldr	r1, [sp, #4]
 8004092:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004096:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800409a:	4259      	negs	r1, r3
 800409c:	4159      	adcs	r1, r3
 800409e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040a2:	e7eb      	b.n	800407c <__swhatbuf_r+0x24>

080040a4 <__smakebuf_r>:
 80040a4:	898b      	ldrh	r3, [r1, #12]
 80040a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040a8:	079d      	lsls	r5, r3, #30
 80040aa:	4606      	mov	r6, r0
 80040ac:	460c      	mov	r4, r1
 80040ae:	d507      	bpl.n	80040c0 <__smakebuf_r+0x1c>
 80040b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	6123      	str	r3, [r4, #16]
 80040b8:	2301      	movs	r3, #1
 80040ba:	6163      	str	r3, [r4, #20]
 80040bc:	b002      	add	sp, #8
 80040be:	bd70      	pop	{r4, r5, r6, pc}
 80040c0:	ab01      	add	r3, sp, #4
 80040c2:	466a      	mov	r2, sp
 80040c4:	f7ff ffc8 	bl	8004058 <__swhatbuf_r>
 80040c8:	9900      	ldr	r1, [sp, #0]
 80040ca:	4605      	mov	r5, r0
 80040cc:	4630      	mov	r0, r6
 80040ce:	f7ff fb0f 	bl	80036f0 <_malloc_r>
 80040d2:	b948      	cbnz	r0, 80040e8 <__smakebuf_r+0x44>
 80040d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040d8:	059a      	lsls	r2, r3, #22
 80040da:	d4ef      	bmi.n	80040bc <__smakebuf_r+0x18>
 80040dc:	f023 0303 	bic.w	r3, r3, #3
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	e7e3      	b.n	80040b0 <__smakebuf_r+0xc>
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	6020      	str	r0, [r4, #0]
 80040ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	9b00      	ldr	r3, [sp, #0]
 80040f4:	6163      	str	r3, [r4, #20]
 80040f6:	9b01      	ldr	r3, [sp, #4]
 80040f8:	6120      	str	r0, [r4, #16]
 80040fa:	b15b      	cbz	r3, 8004114 <__smakebuf_r+0x70>
 80040fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004100:	4630      	mov	r0, r6
 8004102:	f000 f81d 	bl	8004140 <_isatty_r>
 8004106:	b128      	cbz	r0, 8004114 <__smakebuf_r+0x70>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	431d      	orrs	r5, r3
 8004118:	81a5      	strh	r5, [r4, #12]
 800411a:	e7cf      	b.n	80040bc <__smakebuf_r+0x18>

0800411c <_fstat_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d07      	ldr	r5, [pc, #28]	; (800413c <_fstat_r+0x20>)
 8004120:	2300      	movs	r3, #0
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	f7fc ff4c 	bl	8000fc6 <_fstat>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d102      	bne.n	8004138 <_fstat_r+0x1c>
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	b103      	cbz	r3, 8004138 <_fstat_r+0x1c>
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	bd38      	pop	{r3, r4, r5, pc}
 800413a:	bf00      	nop
 800413c:	20000288 	.word	0x20000288

08004140 <_isatty_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d06      	ldr	r5, [pc, #24]	; (800415c <_isatty_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fc ff4b 	bl	8000fe6 <_isatty>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_isatty_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_isatty_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000288 	.word	0x20000288

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
